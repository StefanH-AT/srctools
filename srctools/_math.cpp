/* Generated by Cython 0.29.24 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_24"
#define CYTHON_HEX_VERSION 0x001D18F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__srctools___math
#define __PYX_HAVE_API__srctools___math
/* Early includes */
#include <math.h>
#include <string.h>
#include <stdint.h>
#include <stdio.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "Structs/Vector3.hpp"
#include "Structs/VertexDataSource.hpp"
#include "ConvexHull.hpp"
#include "QuickHull.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "srctools\\_math.pyx",
  "type.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_8srctools_5_math_Vec;
struct __pyx_obj_8srctools_5_math_Matrix;
struct __pyx_obj_8srctools_5_math_Angle;
struct __pyx_obj_8srctools_5_math_VecIter;
struct __pyx_obj_8srctools_5_math_VecIterGrid;
struct __pyx_obj_8srctools_5_math_VecIterLine;
struct __pyx_obj_8srctools_5_math_AngleIter;
struct __pyx_obj_8srctools_5_math_VecTransform;
struct __pyx_obj_8srctools_5_math_AngleTransform;
struct __pyx_t_8srctools_5_math_vec_t;

/* "srctools/_math.pxd":6
 * # Lightweight struct just holding the three values.
 * # We can use this for temporaries. It's also used for angles.
 * cdef struct vec_t:             # <<<<<<<<<<<<<<
 *     double x
 *     double y
 */
struct __pyx_t_8srctools_5_math_vec_t {
  double x;
  double y;
  double z;
};

/* "srctools/_math.pxd":11
 *     double z
 * 
 * ctypedef double[3][3] mat_t             # <<<<<<<<<<<<<<
 * 
 * #  0: failed to string parse and using x/y/z defaults.
 */
typedef double __pyx_t_8srctools_5_math_mat_t[3][3];

/* "srctools/_math.pxd":25
 * 
 * @cython.final
 * cdef class Vec:             # <<<<<<<<<<<<<<
 *     cdef vec_t val
 * 
 */
struct __pyx_obj_8srctools_5_math_Vec {
  PyObject_HEAD
  struct __pyx_t_8srctools_5_math_vec_t val;
};


/* "srctools/_math.pxd":29
 * 
 * @cython.final
 * cdef class Matrix:             # <<<<<<<<<<<<<<
 *     cdef mat_t mat
 * 
 */
struct __pyx_obj_8srctools_5_math_Matrix {
  PyObject_HEAD
  __pyx_t_8srctools_5_math_mat_t mat;
};


/* "srctools/_math.pxd":33
 * 
 * @cython.final
 * cdef class Angle:             # <<<<<<<<<<<<<<
 *     cdef vec_t val
 */
struct __pyx_obj_8srctools_5_math_Angle {
  PyObject_HEAD
  struct __pyx_t_8srctools_5_math_vec_t val;
};


/* "srctools/_math.pyx":405
 * @cython.final
 * @cython.internal
 * cdef class VecIter:             # <<<<<<<<<<<<<<
 *     """Implements iter(Vec)."""
 *     cdef Vec vec
 */
struct __pyx_obj_8srctools_5_math_VecIter {
  PyObject_HEAD
  struct __pyx_obj_8srctools_5_math_Vec *vec;
  uint_fast8_t index;
};


/* "srctools/_math.pyx":434
 * @cython.final
 * @cython.internal
 * cdef class VecIterGrid:             # <<<<<<<<<<<<<<
 *     """Implements Vec.iter_grid()."""
 *     cdef:
 */
struct __pyx_obj_8srctools_5_math_VecIterGrid {
  PyObject_HEAD
  long start_x;
  long start_y;
  long start_z;
  long stop_x;
  long stop_y;
  long stop_z;
  long cur_x;
  long cur_y;
  long cur_z;
  long stride;
};


/* "srctools/_math.pyx":475
 * @cython.final
 * @cython.internal
 * cdef class VecIterLine:             # <<<<<<<<<<<<<<
 *     """Implements Vec.iter_line()."""
 *     cdef:
 */
struct __pyx_obj_8srctools_5_math_VecIterLine {
  PyObject_HEAD
  struct __pyx_t_8srctools_5_math_vec_t start;
  struct __pyx_t_8srctools_5_math_vec_t diff;
  long stride;
  long cur_off;
  long max;
  struct __pyx_t_8srctools_5_math_vec_t end;
};


/* "srctools/_math.pyx":510
 * @cython.final
 * @cython.internal
 * cdef class AngleIter:             # <<<<<<<<<<<<<<
 *     """Implements iter(Angle)."""
 *     cdef Angle ang
 */
struct __pyx_obj_8srctools_5_math_AngleIter {
  PyObject_HEAD
  struct __pyx_obj_8srctools_5_math_Angle *ang;
  uint_fast8_t index;
};


/* "srctools/_math.pyx":539
 * @cython.final
 * @cython.internal
 * cdef class VecTransform:             # <<<<<<<<<<<<<<
 *     """Implements Vec.transform()."""
 *     cdef Matrix mat
 */
struct __pyx_obj_8srctools_5_math_VecTransform {
  PyObject_HEAD
  struct __pyx_obj_8srctools_5_math_Matrix *mat;
  struct __pyx_obj_8srctools_5_math_Vec *vec;
};


/* "srctools/_math.pyx":565
 * @cython.final
 * @cython.internal
 * cdef class AngleTransform:             # <<<<<<<<<<<<<<
 *     """Implements Angle.transform()."""
 *     cdef Matrix mat
 */
struct __pyx_obj_8srctools_5_math_AngleTransform {
  PyObject_HEAD
  struct __pyx_obj_8srctools_5_math_Matrix *mat;
  struct __pyx_obj_8srctools_5_math_Angle *ang;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* None.proto */
static CYTHON_INLINE double __Pyx_mod_double(double, double);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* IterNext.proto */
#define __Pyx_PyIter_Next(obj) __Pyx_PyIter_Next2(obj, NULL)
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject *, PyObject *);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* GetItemIntUnicode.proto */
#define __Pyx_GetItemInt_Unicode(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Unicode_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "string index out of range"), (Py_UCS4)-1))
static CYTHON_INLINE Py_UCS4 __Pyx_GetItemInt_Unicode_Fast(PyObject* ustring, Py_ssize_t i,
                                                           int wraparound, int boundscheck);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* PyObjectFormat.proto */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);
#else
#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* BytesContains.proto */
static CYTHON_INLINE int __Pyx_BytesContains(PyObject* bytes, char character);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cython' */

/* Module declarations from 'libc' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'srctools' */

/* Module declarations from 'srctools.quickhull' */

/* Module declarations from 'srctools._math' */
static PyTypeObject *__pyx_ptype_8srctools_5_math_Vec = 0;
static PyTypeObject *__pyx_ptype_8srctools_5_math_Matrix = 0;
static PyTypeObject *__pyx_ptype_8srctools_5_math_Angle = 0;
static PyTypeObject *__pyx_ptype_8srctools_5_math_VecIter = 0;
static PyTypeObject *__pyx_ptype_8srctools_5_math_VecIterGrid = 0;
static PyTypeObject *__pyx_ptype_8srctools_5_math_VecIterLine = 0;
static PyTypeObject *__pyx_ptype_8srctools_5_math_AngleIter = 0;
static PyTypeObject *__pyx_ptype_8srctools_5_math_VecTransform = 0;
static PyTypeObject *__pyx_ptype_8srctools_5_math_AngleTransform = 0;
static PyObject *__pyx_v_8srctools_5_math_unpickle_vec = 0;
static PyObject *__pyx_v_8srctools_5_math_unpickle_ang = 0;
static PyObject *__pyx_v_8srctools_5_math_unpickle_mat = 0;
static PyObject *__pyx_v_8srctools_5_math_Vec_tuple = 0;
static PyObject *__pyx_v_8srctools_5_math_tuple_new = 0;
static PyObject *__pyx_v_8srctools_5_math_EMPTY_ITER = 0;
static int __pyx_f_8srctools_5_math__parse_vec_str(struct __pyx_t_8srctools_5_math_vec_t *, PyObject *, double, double, double); /*proto*/
static CYTHON_INLINE unsigned char __pyx_f_8srctools_5_math_conv_vec(struct __pyx_t_8srctools_5_math_vec_t *, PyObject *, int); /*proto*/
static CYTHON_INLINE unsigned char __pyx_f_8srctools_5_math_conv_angles(struct __pyx_t_8srctools_5_math_vec_t *, PyObject *); /*proto*/
static CYTHON_INLINE void __pyx_f_8srctools_5_math_mat_mul(double (*)[3], double (*)[3]); /*proto*/
static CYTHON_INLINE void __pyx_f_8srctools_5_math_vec_rot(struct __pyx_t_8srctools_5_math_vec_t *, double (*)[3]); /*proto*/
static CYTHON_INLINE struct __pyx_obj_8srctools_5_math_Vec *__pyx_f_8srctools_5_math__vector(double, double, double); /*proto*/
static CYTHON_INLINE struct __pyx_obj_8srctools_5_math_Angle *__pyx_f_8srctools_5_math__angle(double, double, double); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8srctools_5_math__make_tuple(double, double, double); /*proto*/
static CYTHON_INLINE double __pyx_f_8srctools_5_math_norm_ang(double); /*proto*/
static CYTHON_INLINE double __pyx_f_8srctools_5_math__vec_mag_sq(struct __pyx_t_8srctools_5_math_vec_t *); /*proto*/
static CYTHON_INLINE double __pyx_f_8srctools_5_math__vec_mag(struct __pyx_t_8srctools_5_math_vec_t *); /*proto*/
static CYTHON_INLINE void __pyx_f_8srctools_5_math__vec_normalise(struct __pyx_t_8srctools_5_math_vec_t *, struct __pyx_t_8srctools_5_math_vec_t *); /*proto*/
static CYTHON_INLINE void __pyx_f_8srctools_5_math__vec_cross(struct __pyx_t_8srctools_5_math_vec_t *, struct __pyx_t_8srctools_5_math_vec_t *, struct __pyx_t_8srctools_5_math_vec_t *); /*proto*/
static void __pyx_f_8srctools_5_math__mat_from_angle(double (*)[3], struct __pyx_t_8srctools_5_math_vec_t *); /*proto*/
static CYTHON_INLINE void __pyx_f_8srctools_5_math__mat_to_angle(struct __pyx_t_8srctools_5_math_vec_t *, double (*)[3]); /*proto*/
static int __pyx_f_8srctools_5_math__mat_from_basis(double (*)[3], struct __pyx_obj_8srctools_5_math_Vec *, struct __pyx_obj_8srctools_5_math_Vec *, struct __pyx_obj_8srctools_5_math_Vec *); /*proto*/
static CYTHON_INLINE void __pyx_f_8srctools_5_math__mat_identity(double (*)[3]); /*proto*/
static int __pyx_f_8srctools_5_math__conv_matrix(double (*)[3], PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "srctools._math"
extern int __pyx_module_is_main_srctools___math;
int __pyx_module_is_main_srctools___math = 0;

/* Implementation of 'srctools._math' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_DeprecationWarning;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_SystemError;
static PyObject *__pyx_builtin_OverflowError;
static const char __pyx_k_3[] = ".3";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_E[] = "E";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_W[] = "W";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k__4[] = "!";
static const char __pyx_k__7[] = "(";
static const char __pyx_k__8[] = ", ";
static const char __pyx_k_v1[] = "v1";
static const char __pyx_k_v2[] = "v2";
static const char __pyx_k_v3[] = "v3";
static const char __pyx_k_Vec[] = "Vec(";
static const char __pyx_k__14[] = " ";
static const char __pyx_k__15[] = ")";
static const char __pyx_k__16[] = ">";
static const char __pyx_k_ang[] = "ang";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_ind[] = "ind";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_pit[] = "pit";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_rol[] = "rol";
static const char __pyx_k_rot[] = "rot";
static const char __pyx_k_top[] = "top";
static const char __pyx_k_tup[] = "tup";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_vec[] = "vec";
static const char __pyx_k_yaw[] = "yaw";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_bbox[] = "bbox";
static const char __pyx_k_east[] = "east";
static const char __pyx_k_lerp[] = "lerp";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_max1[] = "max1";
static const char __pyx_k_max2[] = "max2";
static const char __pyx_k_min1[] = "min1";
static const char __pyx_k_min2[] = "min2";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_roll[] = "roll";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_west[] = "west";
static const char __pyx_k_Angle[] = "Angle(";
static const char __pyx_k_Vec_2[] = "Vec";
static const char __pyx_k_angle[] = "angle";
static const char __pyx_k_delim[] = "delim";
static const char __pyx_k_north[] = "north";
static const char __pyx_k_pitch[] = "pitch";
static const char __pyx_k_qhull[] = "qhull";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_south[] = "south";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_x_neg[] = "x_neg";
static const char __pyx_k_x_pos[] = "x_pos";
static const char __pyx_k_y_neg[] = "y_neg";
static const char __pyx_k_y_pos[] = "y_pos";
static const char __pyx_k_z_neg[] = "z_neg";
static const char __pyx_k_z_pos[] = "z_pos";
static const char __pyx_k_Matrix[] = "<Matrix ";
static const char __pyx_k_angles[] = "angles";
static const char __pyx_k_bottom[] = "bottom";
static const char __pyx_k_exc_tb[] = "exc_tb";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_in_max[] = "in_max";
static const char __pyx_k_in_min[] = "in_min";
static const char __pyx_k_mk_ang[] = "_mk_ang";
static const char __pyx_k_mk_mat[] = "_mk_mat";
static const char __pyx_k_mk_vec[] = "_mk_vec";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_origin[] = "origin";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_stride[] = "stride";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_vecobj[] = "vecobj";
static const char __pyx_k_z_norm[] = "z_norm";
static const char __pyx_k_Angle_2[] = "Angle";
static const char __pyx_k_exc_val[] = "exc_val";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_max_pos[] = "max_pos";
static const char __pyx_k_min_pos[] = "min_pos";
static const char __pyx_k_out_max[] = "out_max";
static const char __pyx_k_out_min[] = "out_min";
static const char __pyx_k_vectors[] = "vectors";
static const char __pyx_k_INV_AXIS[] = "INV_AXIS";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_Matrix_2[] = "Matrix";
static const char __pyx_k_exc_type[] = "exc_type";
static const char __pyx_k_from_str[] = "from_str";
static const char __pyx_k_from_yaw[] = "from_yaw";
static const char __pyx_k_memodict[] = "memodict";
static const char __pyx_k_vertexes[] = "vertexes";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_Vec_tuple[] = "Vec_tuple";
static const char __pyx_k_from_roll[] = "from_roll";
static const char __pyx_k_iter_grid[] = "iter_grid";
static const char __pyx_k_quickhull[] = "quickhull";
static const char __pyx_k_to_matrix[] = "to_matrix";
static const char __pyx_k_vert_list[] = "vert_list";
static const char __pyx_k_with_axes[] = "with_axes";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_axis_angle[] = "axis_angle";
static const char __pyx_k_from_angle[] = "from_angle";
static const char __pyx_k_from_basis[] = "from_basis";
static const char __pyx_k_from_pitch[] = "from_pitch";
static const char __pyx_k_round_vals[] = "round_vals";
static const char __pyx_k_were_given[] = " were given";
static const char __pyx_k_SystemError[] = "SystemError";
static const char __pyx_k_result_hull[] = "result_hull";
static const char __pyx_k_Invalid_axis[] = "Invalid axis ";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_OverflowError[] = "OverflowError";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_parse_vec_str[] = "parse_vec_str";
static const char __pyx_k_srctools_math[] = "srctools.math";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_Empty_iterator[] = "Empty iterator!";
static const char __pyx_k_Invalid_axis_2[] = "Invalid axis: ";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_bbox_intersect[] = "bbox_intersect";
static const char __pyx_k_srctools__math[] = "srctools._math";
static const char __pyx_k_Unknown_operation[] = "Unknown operation ";
static const char __pyx_k_DeprecationWarning[] = "DeprecationWarning";
static const char __pyx_k_Invalid_coordinate[] = "Invalid coordinate ";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_srctools__math_pyx[] = "srctools\\_math.pyx";
static const char __pyx_k_Neither_are_Matrices[] = "Neither are Matrices?";
static const char __pyx_k_Called_with_non_vectors[] = "Called with non-vectors\077\077";
static const char __pyx_k_Cannot_divide_2_Vectors[] = "Cannot divide 2 Vectors.";
static const char __pyx_k_Cannot_use_scalars_here[] = "Cannot use scalars here.";
static const char __pyx_k_Cannot_modulus_2_Vectors[] = "Cannot modulus 2 Vectors.";
static const char __pyx_k_is_not_a_Vec_like_object[] = " is not a Vec-like object!";
static const char __pyx_k_is_not_an_on_axis_vector[] = ") is not an on-axis vector!";
static const char __pyx_k_Cannot_multiply_2_Vectors[] = "Cannot multiply 2 Vectors.";
static const char __pyx_k_is_not_an_Angle_like_object[] = " is not an Angle-like object!";
static const char __pyx_k_Cannot_floor_divide_2_Vectors[] = "Cannot floor-divide 2 Vectors.";
static const char __pyx_k_Angle_with_axis_takes_2_4_or_6_p[] = "Angle.with_axis() takes 2, 4 or 6 positional arguments but ";
static const char __pyx_k_At_least_two_vectors_must_be_pro[] = "At least two vectors must be provided!";
static const char __pyx_k_Cannot_convert_scalars_to_an_Ang[] = "Cannot convert scalars to an Angle!";
static const char __pyx_k_Matrix_from_angles_accepts_a_sin[] = "Matrix.from_angles() accepts a single Angle or 3 floats!";
static const char __pyx_k_Vec_bbox_expected_at_least_1_arg[] = "Vec.bbox() expected at least 1 argument, got 0.";
static const char __pyx_k_Vec_tuple_is_not_a_tuple_subclas[] = "Vec_tuple is not a tuple subclass!";
static const char __pyx_k_Vec_with_axis_takes_2_4_or_6_pos[] = "Vec.with_axis() takes 2, 4 or 6 positional arguments but ";
static PyObject *__pyx_kp_u_3;
static PyObject *__pyx_kp_u_Angle;
static PyObject *__pyx_n_s_Angle_2;
static PyObject *__pyx_kp_u_Angle_with_axis_takes_2_4_or_6_p;
static PyObject *__pyx_kp_u_At_least_two_vectors_must_be_pro;
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_kp_u_Called_with_non_vectors;
static PyObject *__pyx_kp_u_Cannot_convert_scalars_to_an_Ang;
static PyObject *__pyx_kp_u_Cannot_divide_2_Vectors;
static PyObject *__pyx_kp_u_Cannot_floor_divide_2_Vectors;
static PyObject *__pyx_kp_u_Cannot_modulus_2_Vectors;
static PyObject *__pyx_kp_u_Cannot_multiply_2_Vectors;
static PyObject *__pyx_kp_u_Cannot_use_scalars_here;
static PyObject *__pyx_n_s_DeprecationWarning;
static PyObject *__pyx_n_s_E;
static PyObject *__pyx_kp_u_Empty_iterator;
static PyObject *__pyx_n_s_INV_AXIS;
static PyObject *__pyx_kp_u_Invalid_axis;
static PyObject *__pyx_kp_u_Invalid_axis_2;
static PyObject *__pyx_kp_u_Invalid_coordinate;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_kp_u_Matrix;
static PyObject *__pyx_n_s_Matrix_2;
static PyObject *__pyx_kp_u_Matrix_from_angles_accepts_a_sin;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_kp_u_Neither_are_Matrices;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_n_s_OverflowError;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_S;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_SystemError;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_Unknown_operation;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u_Vec;
static PyObject *__pyx_n_s_Vec_2;
static PyObject *__pyx_kp_u_Vec_bbox_expected_at_least_1_arg;
static PyObject *__pyx_n_s_Vec_tuple;
static PyObject *__pyx_kp_u_Vec_tuple_is_not_a_tuple_subclas;
static PyObject *__pyx_kp_u_Vec_with_axis_takes_2_4_or_6_pos;
static PyObject *__pyx_n_s_W;
static PyObject *__pyx_kp_u__14;
static PyObject *__pyx_kp_u__15;
static PyObject *__pyx_kp_u__16;
static PyObject *__pyx_kp_u__4;
static PyObject *__pyx_kp_u__7;
static PyObject *__pyx_kp_u__8;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_ang;
static PyObject *__pyx_n_s_angle;
static PyObject *__pyx_n_s_angles;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_axis_angle;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_bbox;
static PyObject *__pyx_n_s_bbox_intersect;
static PyObject *__pyx_n_s_bottom;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_delim;
static PyObject *__pyx_n_s_east;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_exc_tb;
static PyObject *__pyx_n_s_exc_type;
static PyObject *__pyx_n_s_exc_val;
static PyObject *__pyx_n_s_from_angle;
static PyObject *__pyx_n_s_from_basis;
static PyObject *__pyx_n_s_from_pitch;
static PyObject *__pyx_n_s_from_roll;
static PyObject *__pyx_n_s_from_str;
static PyObject *__pyx_n_s_from_yaw;
static PyObject *__pyx_n_u_g;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_max;
static PyObject *__pyx_n_s_in_min;
static PyObject *__pyx_n_s_ind;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_kp_u_is_not_a_Vec_like_object;
static PyObject *__pyx_kp_u_is_not_an_Angle_like_object;
static PyObject *__pyx_kp_u_is_not_an_on_axis_vector;
static PyObject *__pyx_n_s_iter_grid;
static PyObject *__pyx_n_s_lerp;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max1;
static PyObject *__pyx_n_s_max2;
static PyObject *__pyx_n_s_max_pos;
static PyObject *__pyx_n_s_memodict;
static PyObject *__pyx_n_s_min1;
static PyObject *__pyx_n_s_min2;
static PyObject *__pyx_n_s_min_pos;
static PyObject *__pyx_n_s_mk_ang;
static PyObject *__pyx_n_s_mk_mat;
static PyObject *__pyx_n_s_mk_vec;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_north;
static PyObject *__pyx_n_s_origin;
static PyObject *__pyx_n_s_out_max;
static PyObject *__pyx_n_s_out_min;
static PyObject *__pyx_n_u_p;
static PyObject *__pyx_n_s_parse_vec_str;
static PyObject *__pyx_n_u_pit;
static PyObject *__pyx_n_s_pitch;
static PyObject *__pyx_n_u_pitch;
static PyObject *__pyx_n_s_qhull;
static PyObject *__pyx_n_s_quickhull;
static PyObject *__pyx_n_u_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_result_hull;
static PyObject *__pyx_n_u_rol;
static PyObject *__pyx_n_s_roll;
static PyObject *__pyx_n_u_roll;
static PyObject *__pyx_n_s_rot;
static PyObject *__pyx_n_s_round;
static PyObject *__pyx_n_s_round_vals;
static PyObject *__pyx_n_s_south;
static PyObject *__pyx_n_s_srctools__math;
static PyObject *__pyx_kp_s_srctools__math_pyx;
static PyObject *__pyx_n_s_srctools_math;
static PyObject *__pyx_kp_u_srctools_math;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_stride;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_to_matrix;
static PyObject *__pyx_n_s_top;
static PyObject *__pyx_n_s_tup;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_v1;
static PyObject *__pyx_n_s_v2;
static PyObject *__pyx_n_s_v3;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_vec;
static PyObject *__pyx_n_s_vecobj;
static PyObject *__pyx_n_s_vectors;
static PyObject *__pyx_n_s_vert_list;
static PyObject *__pyx_n_s_vertexes;
static PyObject *__pyx_kp_u_were_given;
static PyObject *__pyx_n_s_west;
static PyObject *__pyx_n_s_with_axes;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_u_x;
static PyObject *__pyx_n_s_x_neg;
static PyObject *__pyx_n_s_x_pos;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_u_y;
static PyObject *__pyx_n_s_y_neg;
static PyObject *__pyx_n_s_y_pos;
static PyObject *__pyx_n_s_yaw;
static PyObject *__pyx_n_u_yaw;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_u_z;
static PyObject *__pyx_n_s_z_neg;
static PyObject *__pyx_n_s_z_norm;
static PyObject *__pyx_n_s_z_pos;
static PyObject *__pyx_pf_8srctools_5_math_parse_vec_str(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_val, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_z); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_2lerp(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_x, double __pyx_v_in_min, double __pyx_v_in_max, double __pyx_v_out_min, double __pyx_v_out_max); /* proto */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_4to_matrix(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_8srctools_5_math_7VecIter___cinit__(struct __pyx_obj_8srctools_5_math_VecIter *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_7VecIter_2__iter__(struct __pyx_obj_8srctools_5_math_VecIter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_7VecIter_4__next__(struct __pyx_obj_8srctools_5_math_VecIter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_11VecIterGrid___iter__(struct __pyx_obj_8srctools_5_math_VecIterGrid *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_11VecIterGrid_2__next__(struct __pyx_obj_8srctools_5_math_VecIterGrid *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_11VecIterLine___iter__(struct __pyx_obj_8srctools_5_math_VecIterLine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_11VecIterLine_2__next__(struct __pyx_obj_8srctools_5_math_VecIterLine *__pyx_v_self); /* proto */
static int __pyx_pf_8srctools_5_math_9AngleIter___cinit__(struct __pyx_obj_8srctools_5_math_AngleIter *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_9AngleIter_2__iter__(struct __pyx_obj_8srctools_5_math_AngleIter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_9AngleIter_4__next__(struct __pyx_obj_8srctools_5_math_AngleIter *__pyx_v_self); /* proto */
static int __pyx_pf_8srctools_5_math_12VecTransform___cinit__(struct __pyx_obj_8srctools_5_math_VecTransform *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_12VecTransform_2__enter__(struct __pyx_obj_8srctools_5_math_VecTransform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_12VecTransform_4__exit__(struct __pyx_obj_8srctools_5_math_VecTransform *__pyx_v_self, PyObject *__pyx_v_exc_type, PyObject *__pyx_v_exc_val, PyObject *__pyx_v_exc_tb); /* proto */
static int __pyx_pf_8srctools_5_math_14AngleTransform___cinit__(struct __pyx_obj_8srctools_5_math_AngleTransform *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_14AngleTransform_2__enter__(struct __pyx_obj_8srctools_5_math_AngleTransform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_14AngleTransform_4__exit__(struct __pyx_obj_8srctools_5_math_AngleTransform *__pyx_v_self, PyObject *__pyx_v_exc_type, PyObject *__pyx_v_exc_val, PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_1x___get__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static int __pyx_pf_8srctools_5_math_3Vec_1x_2__set__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_1y___get__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static int __pyx_pf_8srctools_5_math_3Vec_1y_2__set__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_1z___get__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static int __pyx_pf_8srctools_5_math_3Vec_1z_2__set__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_8srctools_5_math_3Vec___init__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_z); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_2copy(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_4__copy__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_6__deepcopy__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_8__reduce__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_10from_str(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_value, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z); /* proto */
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pf_8srctools_5_math_3Vec_12with_axes(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_args); /* proto */
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pf_8srctools_5_math_3Vec_14rotate(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, double __pyx_v_pitch, double __pyx_v_yaw, double __pyx_v_roll, int __pyx_v_round_vals); /* proto */
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pf_8srctools_5_math_3Vec_16rotate_by_str(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_ang, double __pyx_v_pitch, double __pyx_v_yaw, double __pyx_v_roll, int __pyx_v_round_vals); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_18bbox(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_points); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_20iter_grid(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_min_pos, PyObject *__pyx_v_max_pos, PyObject *__pyx_v_stride); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_22iter_line(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_end, PyObject *__pyx_v_stride); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_24axis(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_26other_axes(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_axis); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_28in_bbox(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_30bbox_intersect(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_min1, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_max1, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_min2, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_max2); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_32as_tuple(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_34to_angle(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, double __pyx_v_roll); /* proto */
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pf_8srctools_5_math_3Vec_36to_angle_roll(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_z_norm, CYTHON_UNUSED PyObject *__pyx_v_stride); /* proto */
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pf_8srctools_5_math_3Vec_38rotation_around(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, double __pyx_v_rot); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_40__abs__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_42__neg__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_44__pos__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static int __pyx_pf_8srctools_5_math_3Vec_46__contains__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_48__add__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_50__sub__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_52__mul__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_54__truediv__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_56__floordiv__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_58__mod__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /* proto */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_8srctools_5_math_3Vec_60__matmul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second); /* proto */
#endif
static PyObject *__pyx_pf_8srctools_5_math_3Vec_62__iadd__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_64__isub__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_66__imul__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_68__itruediv__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_70__ifloordiv__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_72__imod__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_8srctools_5_math_3Vec_74__matmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
#endif
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_8srctools_5_math_3Vec_76__imatmul__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
#endif
static PyObject *__pyx_pf_8srctools_5_math_3Vec_78__divmod__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /* proto */
static int __pyx_pf_8srctools_5_math_3Vec_80__bool__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8srctools_5_math_3Vec_82__len__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_84__richcmp__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other_obj, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_86max(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_88min(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_90__round__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_92mag_sq(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_94len_sq(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_96mag(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_98len(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_100norm(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pf_8srctools_5_math_3Vec_102norm_mask(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_normal); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_104dot(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pf_8srctools_5_math_3Vec_106cross(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_108localise(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_origin, PyObject *__pyx_v_angles); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_110join(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_delim); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_112__str__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_114__repr__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_116__format__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_format_spec); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_118__iter__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_120__getitem__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_ind_obj); /* proto */
static int __pyx_pf_8srctools_5_math_3Vec_122__setitem__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_ind_obj, double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_3Vec_124transform(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self); /* proto */
static int __pyx_pf_8srctools_5_math_6Matrix___init__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_2__eq__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_4__ne__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_6__repr__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self); /* proto */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_6Matrix_8copy(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self); /* proto */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_6Matrix_10__copy__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self); /* proto */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_6Matrix_12__deepcopy__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_14__reduce__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_16from_pitch(PyTypeObject *__pyx_v_cls, double __pyx_v_pitch); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_18from_yaw(PyTypeObject *__pyx_v_cls, double __pyx_v_yaw); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_20from_roll(PyTypeObject *__pyx_v_cls, double __pyx_v_roll); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_22from_angle(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_pitch, PyObject *__pyx_v_yaw, PyObject *__pyx_v_roll); /* proto */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_6Matrix_24axis_angle(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_axis, double __pyx_v_angle); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_26forward(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_28left(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_30up(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_32__getitem__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_pf_8srctools_5_math_6Matrix_34__setitem__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self, PyObject *__pyx_v_item, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_36to_angle(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self); /* proto */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_6Matrix_38transpose(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self); /* proto */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_6Matrix_40from_basis(PyTypeObject *__pyx_v_cls, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_x, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_y, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_z); /* proto */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_42__matmul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second); /* proto */
#endif
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_44__imatmul__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
#endif
static int __pyx_pf_8srctools_5_math_5Angle___init__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, PyObject *__pyx_v_pitch, PyObject *__pyx_v_yaw, PyObject *__pyx_v_roll); /* proto */
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pf_8srctools_5_math_5Angle_2copy(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self); /* proto */
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pf_8srctools_5_math_5Angle_4__copy__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self); /* proto */
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pf_8srctools_5_math_5Angle_6__deepcopy__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_8__reduce__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_10from_str(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_val, double __pyx_v_pitch, double __pyx_v_yaw, double __pyx_v_roll); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_5pitch___get__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self); /* proto */
static int __pyx_pf_8srctools_5_math_5Angle_5pitch_2__set__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, double __pyx_v_pitch); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_3yaw___get__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self); /* proto */
static int __pyx_pf_8srctools_5_math_5Angle_3yaw_2__set__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, double __pyx_v_yaw); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_4roll___get__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self); /* proto */
static int __pyx_pf_8srctools_5_math_5Angle_4roll_2__set__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, double __pyx_v_roll); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_12join(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, PyObject *__pyx_v_delim); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_14__str__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_16__repr__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_18__format__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, PyObject *__pyx_v_format_spec); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_20as_tuple(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_22__iter__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_24with_axes(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_args); /* proto */
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pf_8srctools_5_math_5Angle_26from_basis(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_x, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_y, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_z); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_28__getitem__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, PyObject *__pyx_v_pos); /* proto */
static int __pyx_pf_8srctools_5_math_5Angle_30__setitem__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, PyObject *__pyx_v_pos, double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_32__richcmp__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, PyObject *__pyx_v_other_obj, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_5Angle_34__mul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second); /* proto */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_8srctools_5_math_5Angle_36__matmul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second); /* proto */
#endif
static PyObject *__pyx_pf_8srctools_5_math_5Angle_38transform(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8srctools_5_math_6quickhull(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vertexes); /* proto */
static PyObject *__pyx_tp_new_8srctools_5_math_Vec(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8srctools_5_math_Matrix(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8srctools_5_math_Angle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8srctools_5_math_VecIter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8srctools_5_math_VecIterGrid(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8srctools_5_math_VecIterLine(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8srctools_5_math_AngleIter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8srctools_5_math_VecTransform(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8srctools_5_math_AngleTransform(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_6;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
/* Late includes */

/* "srctools/_math.pyx":18
 *     const char* PyUnicode_AsUTF8AndSize(str string, Py_ssize_t *size) except NULL
 * 
 * cdef inline Vec _vector(double x, double y, double z):             # <<<<<<<<<<<<<<
 *     """Make a Vector directly."""
 *     cdef Vec vec = Vec.__new__(Vec)
 */

static CYTHON_INLINE struct __pyx_obj_8srctools_5_math_Vec *__pyx_f_8srctools_5_math__vector(double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_vector", 0);

  /* "srctools/_math.pyx":20
 * cdef inline Vec _vector(double x, double y, double z):
 *     """Make a Vector directly."""
 *     cdef Vec vec = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *     vec.val.x = x
 *     vec.val.y = y
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":21
 *     """Make a Vector directly."""
 *     cdef Vec vec = Vec.__new__(Vec)
 *     vec.val.x = x             # <<<<<<<<<<<<<<
 *     vec.val.y = y
 *     vec.val.z = z
 */
  __pyx_v_vec->val.x = __pyx_v_x;

  /* "srctools/_math.pyx":22
 *     cdef Vec vec = Vec.__new__(Vec)
 *     vec.val.x = x
 *     vec.val.y = y             # <<<<<<<<<<<<<<
 *     vec.val.z = z
 *     return vec
 */
  __pyx_v_vec->val.y = __pyx_v_y;

  /* "srctools/_math.pyx":23
 *     vec.val.x = x
 *     vec.val.y = y
 *     vec.val.z = z             # <<<<<<<<<<<<<<
 *     return vec
 * 
 */
  __pyx_v_vec->val.z = __pyx_v_z;

  /* "srctools/_math.pyx":24
 *     vec.val.y = y
 *     vec.val.z = z
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * cdef inline Angle _angle(double pitch, double yaw, double roll):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "srctools/_math.pyx":18
 *     const char* PyUnicode_AsUTF8AndSize(str string, Py_ssize_t *size) except NULL
 * 
 * cdef inline Vec _vector(double x, double y, double z):             # <<<<<<<<<<<<<<
 *     """Make a Vector directly."""
 *     cdef Vec vec = Vec.__new__(Vec)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math._vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":26
 *     return vec
 * 
 * cdef inline Angle _angle(double pitch, double yaw, double roll):             # <<<<<<<<<<<<<<
 *     """Make an Angle directly."""
 *     cdef Angle ang = Angle.__new__(Angle)
 */

static CYTHON_INLINE struct __pyx_obj_8srctools_5_math_Angle *__pyx_f_8srctools_5_math__angle(double __pyx_v_pitch, double __pyx_v_yaw, double __pyx_v_roll) {
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang = 0;
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_angle", 0);

  /* "srctools/_math.pyx":28
 * cdef inline Angle _angle(double pitch, double yaw, double roll):
 *     """Make an Angle directly."""
 *     cdef Angle ang = Angle.__new__(Angle)             # <<<<<<<<<<<<<<
 *     ang.val.x = pitch
 *     ang.val.y = yaw
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Angle(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Angle), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ang = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":29
 *     """Make an Angle directly."""
 *     cdef Angle ang = Angle.__new__(Angle)
 *     ang.val.x = pitch             # <<<<<<<<<<<<<<
 *     ang.val.y = yaw
 *     ang.val.z = roll
 */
  __pyx_v_ang->val.x = __pyx_v_pitch;

  /* "srctools/_math.pyx":30
 *     cdef Angle ang = Angle.__new__(Angle)
 *     ang.val.x = pitch
 *     ang.val.y = yaw             # <<<<<<<<<<<<<<
 *     ang.val.z = roll
 *     return ang
 */
  __pyx_v_ang->val.y = __pyx_v_yaw;

  /* "srctools/_math.pyx":31
 *     ang.val.x = pitch
 *     ang.val.y = yaw
 *     ang.val.z = roll             # <<<<<<<<<<<<<<
 *     return ang
 * 
 */
  __pyx_v_ang->val.z = __pyx_v_roll;

  /* "srctools/_math.pyx":32
 *     ang.val.y = yaw
 *     ang.val.z = roll
 *     return ang             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_ang));
  __pyx_r = __pyx_v_ang;
  goto __pyx_L0;

  /* "srctools/_math.pyx":26
 *     return vec
 * 
 * cdef inline Angle _angle(double pitch, double yaw, double roll):             # <<<<<<<<<<<<<<
 *     """Make an Angle directly."""
 *     cdef Angle ang = Angle.__new__(Angle)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math._angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ang);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":67
 *     cdef bint USE_TYPE_INTERNALS "CYTHON_USE_TYPE_SLOTS"
 * 
 * cdef inline object _make_tuple(double x, double y, double z):             # <<<<<<<<<<<<<<
 *     # Fast-construct a Vec_tuple. We make a normal tuple (fast),
 *     # then assign the namedtuple type. The type is on the heap
 */

static CYTHON_INLINE PyObject *__pyx_f_8srctools_5_math__make_tuple(double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  PyObject *__pyx_v_tup = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_tuple", 0);

  /* "srctools/_math.pyx":71
 *     # then assign the namedtuple type. The type is on the heap
 *     # so we need to incref it.
 *     cdef tuple tup = (round(x, ROUND_TO), round(y, ROUND_TO), round(z, ROUND_TO))             # <<<<<<<<<<<<<<
 *     if USE_TYPE_INTERNALS:
 *         Py_INCREF(Vec_tuple)
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_6);
  __Pyx_GIVEREF(__pyx_int_6);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_6);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_6);
  __Pyx_GIVEREF(__pyx_int_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_6);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_int_6);
  __Pyx_GIVEREF(__pyx_int_6);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_6);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_tup = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "srctools/_math.pyx":72
 *     # so we need to incref it.
 *     cdef tuple tup = (round(x, ROUND_TO), round(y, ROUND_TO), round(z, ROUND_TO))
 *     if USE_TYPE_INTERNALS:             # <<<<<<<<<<<<<<
 *         Py_INCREF(Vec_tuple)
 *         (<PyObject *>tup).ob_type = <PyTypeObject*>Vec_tuple
 */
  __pyx_t_5 = (CYTHON_USE_TYPE_SLOTS != 0);
  if (__pyx_t_5) {

    /* "srctools/_math.pyx":73
 *     cdef tuple tup = (round(x, ROUND_TO), round(y, ROUND_TO), round(z, ROUND_TO))
 *     if USE_TYPE_INTERNALS:
 *         Py_INCREF(Vec_tuple)             # <<<<<<<<<<<<<<
 *         (<PyObject *>tup).ob_type = <PyTypeObject*>Vec_tuple
 *         return tup
 */
    __pyx_t_4 = __pyx_v_8srctools_5_math_Vec_tuple;
    __Pyx_INCREF(__pyx_t_4);
    Py_INCREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "srctools/_math.pyx":74
 *     if USE_TYPE_INTERNALS:
 *         Py_INCREF(Vec_tuple)
 *         (<PyObject *>tup).ob_type = <PyTypeObject*>Vec_tuple             # <<<<<<<<<<<<<<
 *         return tup
 *     else: # Not CPython, use more correct but slow method.
 */
    ((PyObject *)__pyx_v_tup)->ob_type = ((PyTypeObject *)__pyx_v_8srctools_5_math_Vec_tuple);

    /* "srctools/_math.pyx":75
 *         Py_INCREF(Vec_tuple)
 *         (<PyObject *>tup).ob_type = <PyTypeObject*>Vec_tuple
 *         return tup             # <<<<<<<<<<<<<<
 *     else: # Not CPython, use more correct but slow method.
 *         with cython.optimize.unpack_method_calls(False):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_tup);
    __pyx_r = __pyx_v_tup;
    goto __pyx_L0;

    /* "srctools/_math.pyx":72
 *     # so we need to incref it.
 *     cdef tuple tup = (round(x, ROUND_TO), round(y, ROUND_TO), round(z, ROUND_TO))
 *     if USE_TYPE_INTERNALS:             # <<<<<<<<<<<<<<
 *         Py_INCREF(Vec_tuple)
 *         (<PyObject *>tup).ob_type = <PyTypeObject*>Vec_tuple
 */
  }

  /* "srctools/_math.pyx":77
 *         return tup
 *     else: # Not CPython, use more correct but slow method.
 *         with cython.optimize.unpack_method_calls(False):             # <<<<<<<<<<<<<<
 *             return tuple_new(Vec_tuple, tup)
 * 
 */
  /*else*/ {

    /* "srctools/_math.pyx":78
 *     else: # Not CPython, use more correct but slow method.
 *         with cython.optimize.unpack_method_calls(False):
 *             return tuple_new(Vec_tuple, tup)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_8srctools_5_math_Vec_tuple);
    __Pyx_GIVEREF(__pyx_v_8srctools_5_math_Vec_tuple);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_8srctools_5_math_Vec_tuple);
    __Pyx_INCREF(__pyx_v_tup);
    __Pyx_GIVEREF(__pyx_v_tup);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_tup);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_8srctools_5_math_tuple_new, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "srctools/_math.pyx":67
 *     cdef bint USE_TYPE_INTERNALS "CYTHON_USE_TYPE_SLOTS"
 * 
 * cdef inline object _make_tuple(double x, double y, double z):             # <<<<<<<<<<<<<<
 *     # Fast-construct a Vec_tuple. We make a normal tuple (fast),
 *     # then assign the namedtuple type. The type is on the heap
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("srctools._math._make_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":81
 * 
 * 
 * cdef inline double norm_ang(double val):             # <<<<<<<<<<<<<<
 *     """Normalise an angle to 0-360."""
 *     # We have to double-modulus because -1e-14 % 360.0 = 360.0.
 */

static CYTHON_INLINE double __pyx_f_8srctools_5_math_norm_ang(double __pyx_v_val) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("norm_ang", 0);

  /* "srctools/_math.pyx":84
 *     """Normalise an angle to 0-360."""
 *     # We have to double-modulus because -1e-14 % 360.0 = 360.0.
 *     val = val % 360.0 % 360.0             # <<<<<<<<<<<<<<
 *     return val
 * 
 */
  __pyx_v_val = __Pyx_mod_double(__Pyx_mod_double(__pyx_v_val, 360.0), 360.0);

  /* "srctools/_math.pyx":85
 *     # We have to double-modulus because -1e-14 % 360.0 = 360.0.
 *     val = val % 360.0 % 360.0
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "srctools/_math.pyx":81
 * 
 * 
 * cdef inline double norm_ang(double val):             # <<<<<<<<<<<<<<
 *     """Normalise an angle to 0-360."""
 *     # We have to double-modulus because -1e-14 % 360.0 = 360.0.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":88
 * 
 * 
 * cdef int _parse_vec_str(vec_t *vec, object value, double x, double y, double z) except -1:             # <<<<<<<<<<<<<<
 *     cdef const char *buf
 *     cdef Py_ssize_t size, i
 */

static int __pyx_f_8srctools_5_math__parse_vec_str(struct __pyx_t_8srctools_5_math_vec_t *__pyx_v_vec, PyObject *__pyx_v_value, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  char const *__pyx_v_buf;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_v_i;
  int __pyx_v_read_amt;
  char __pyx_v_c;
  char __pyx_v_end_delim;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  char const *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_parse_vec_str", 0);

  /* "srctools/_math.pyx":92
 *     cdef Py_ssize_t size, i
 *     cdef int read_amt
 *     cdef char c, end_delim = 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(value, Vec):
 */
  __pyx_v_end_delim = 0;

  /* "srctools/_math.pyx":94
 *     cdef char c, end_delim = 0
 * 
 *     if isinstance(value, Vec):             # <<<<<<<<<<<<<<
 *         vec.x = (<Vec>value).val.x
 *         vec.y = (<Vec>value).val.y
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":95
 * 
 *     if isinstance(value, Vec):
 *         vec.x = (<Vec>value).val.x             # <<<<<<<<<<<<<<
 *         vec.y = (<Vec>value).val.y
 *         vec.z = (<Vec>value).val.z
 */
    __pyx_t_3 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_value)->val.x;
    __pyx_v_vec->x = __pyx_t_3;

    /* "srctools/_math.pyx":96
 *     if isinstance(value, Vec):
 *         vec.x = (<Vec>value).val.x
 *         vec.y = (<Vec>value).val.y             # <<<<<<<<<<<<<<
 *         vec.z = (<Vec>value).val.z
 *     elif isinstance(value, Angle):
 */
    __pyx_t_3 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_value)->val.y;
    __pyx_v_vec->y = __pyx_t_3;

    /* "srctools/_math.pyx":97
 *         vec.x = (<Vec>value).val.x
 *         vec.y = (<Vec>value).val.y
 *         vec.z = (<Vec>value).val.z             # <<<<<<<<<<<<<<
 *     elif isinstance(value, Angle):
 *         vec.x = (<Angle>value).val.x
 */
    __pyx_t_3 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_value)->val.z;
    __pyx_v_vec->z = __pyx_t_3;

    /* "srctools/_math.pyx":94
 *     cdef char c, end_delim = 0
 * 
 *     if isinstance(value, Vec):             # <<<<<<<<<<<<<<
 *         vec.x = (<Vec>value).val.x
 *         vec.y = (<Vec>value).val.y
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":98
 *         vec.y = (<Vec>value).val.y
 *         vec.z = (<Vec>value).val.z
 *     elif isinstance(value, Angle):             # <<<<<<<<<<<<<<
 *         vec.x = (<Angle>value).val.x
 *         vec.y = (<Angle>value).val.y
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_8srctools_5_math_Angle); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":99
 *         vec.z = (<Vec>value).val.z
 *     elif isinstance(value, Angle):
 *         vec.x = (<Angle>value).val.x             # <<<<<<<<<<<<<<
 *         vec.y = (<Angle>value).val.y
 *         vec.z = (<Angle>value).val.z
 */
    __pyx_t_3 = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_value)->val.x;
    __pyx_v_vec->x = __pyx_t_3;

    /* "srctools/_math.pyx":100
 *     elif isinstance(value, Angle):
 *         vec.x = (<Angle>value).val.x
 *         vec.y = (<Angle>value).val.y             # <<<<<<<<<<<<<<
 *         vec.z = (<Angle>value).val.z
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_value)->val.y;
    __pyx_v_vec->y = __pyx_t_3;

    /* "srctools/_math.pyx":101
 *         vec.x = (<Angle>value).val.x
 *         vec.y = (<Angle>value).val.y
 *         vec.z = (<Angle>value).val.z             # <<<<<<<<<<<<<<
 *     else:
 *         buf = PyUnicode_AsUTF8AndSize(value, &size)
 */
    __pyx_t_3 = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_value)->val.z;
    __pyx_v_vec->z = __pyx_t_3;

    /* "srctools/_math.pyx":98
 *         vec.y = (<Vec>value).val.y
 *         vec.z = (<Vec>value).val.z
 *     elif isinstance(value, Angle):             # <<<<<<<<<<<<<<
 *         vec.x = (<Angle>value).val.x
 *         vec.y = (<Angle>value).val.y
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":103
 *         vec.z = (<Angle>value).val.z
 *     else:
 *         buf = PyUnicode_AsUTF8AndSize(value, &size)             # <<<<<<<<<<<<<<
 *         # First, skip through whitespace, and stop after the first
 *         # <{[( delim, or when any other char is found.
 */
  /*else*/ {
    if (!(likely(PyUnicode_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 103, __pyx_L1_error)
    __pyx_t_4 = PyUnicode_AsUTF8AndSize(((PyObject*)__pyx_v_value), (&__pyx_v_size)); if (unlikely(__pyx_t_4 == ((char const *)NULL))) __PYX_ERR(0, 103, __pyx_L1_error)
    __pyx_v_buf = __pyx_t_4;

    /* "srctools/_math.pyx":106
 *         # First, skip through whitespace, and stop after the first
 *         # <{[( delim, or when any other char is found.
 *         i = 0             # <<<<<<<<<<<<<<
 *         while i < size:
 *             c = buf[i]
 */
    __pyx_v_i = 0;

    /* "srctools/_math.pyx":107
 *         # <{[( delim, or when any other char is found.
 *         i = 0
 *         while i < size:             # <<<<<<<<<<<<<<
 *             c = buf[i]
 *             if c in b' \t\v\f':
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_size) != 0);
      if (!__pyx_t_1) break;

      /* "srctools/_math.pyx":108
 *         i = 0
 *         while i < size:
 *             c = buf[i]             # <<<<<<<<<<<<<<
 *             if c in b' \t\v\f':
 *                 i += 1
 */
      __pyx_v_c = (__pyx_v_buf[__pyx_v_i]);

      /* "srctools/_math.pyx":109
 *         while i < size:
 *             c = buf[i]
 *             if c in b' \t\v\f':             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
      switch (__pyx_v_c) {
        case '\t':
        case '\x0B':
        case '\x0C':
        case ' ':

        /* "srctools/_math.pyx":110
 *             c = buf[i]
 *             if c in b' \t\v\f':
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             elif c == b'<':
 */
        __pyx_v_i = (__pyx_v_i + 1);

        /* "srctools/_math.pyx":111
 *             if c in b' \t\v\f':
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             elif c == b'<':
 *                 i += 1
 */
        goto __pyx_L4_continue;

        /* "srctools/_math.pyx":109
 *         while i < size:
 *             c = buf[i]
 *             if c in b' \t\v\f':             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
        break;
        case '<':

        /* "srctools/_math.pyx":113
 *                 continue
 *             elif c == b'<':
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 end_delim = b'>'
 *                 break
 */
        __pyx_v_i = (__pyx_v_i + 1);

        /* "srctools/_math.pyx":114
 *             elif c == b'<':
 *                 i += 1
 *                 end_delim = b'>'             # <<<<<<<<<<<<<<
 *                 break
 *             elif c == b'{':
 */
        __pyx_v_end_delim = '>';

        /* "srctools/_math.pyx":115
 *                 i += 1
 *                 end_delim = b'>'
 *                 break             # <<<<<<<<<<<<<<
 *             elif c == b'{':
 *                 i += 1
 */
        goto __pyx_L5_break;

        /* "srctools/_math.pyx":112
 *                 i += 1
 *                 continue
 *             elif c == b'<':             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 end_delim = b'>'
 */
        break;
        case '{':

          /* "srctools/_math.pyx":117
 *                 break
 *             elif c == b'{':
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 end_delim = b'}'
 *                 break
 */
          __pyx_v_i = (__pyx_v_i + 1);

          /* "srctools/_math.pyx":118
 *             elif c == b'{':
 *                 i += 1
 *                 end_delim = b'}'             # <<<<<<<<<<<<<<
 *                 break
 *             elif c == b'[':
 */
        __pyx_v_end_delim = '}';

        /* "srctools/_math.pyx":119
 *                 i += 1
 *                 end_delim = b'}'
 *                 break             # <<<<<<<<<<<<<<
 *             elif c == b'[':
 *                 i += 1
 */
        goto __pyx_L5_break;

        /* "srctools/_math.pyx":116
 *                 end_delim = b'>'
 *                 break
 *             elif c == b'{':             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 end_delim = b'}'
 */
        break;
        case '[':

        /* "srctools/_math.pyx":121
 *                 break
 *             elif c == b'[':
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 end_delim = b']'
 *                 break
 */
        __pyx_v_i = (__pyx_v_i + 1);

        /* "srctools/_math.pyx":122
 *             elif c == b'[':
 *                 i += 1
 *                 end_delim = b']'             # <<<<<<<<<<<<<<
 *                 break
 *             elif c == b'(':
 */
        __pyx_v_end_delim = ']';

        /* "srctools/_math.pyx":123
 *                 i += 1
 *                 end_delim = b']'
 *                 break             # <<<<<<<<<<<<<<
 *             elif c == b'(':
 *                 i += 1
 */
        goto __pyx_L5_break;

        /* "srctools/_math.pyx":120
 *                 end_delim = b'}'
 *                 break
 *             elif c == b'[':             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 end_delim = b']'
 */
        break;
        case '(':

        /* "srctools/_math.pyx":125
 *                 break
 *             elif c == b'(':
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 end_delim = b')'
 *                 break
 */
        __pyx_v_i = (__pyx_v_i + 1);

        /* "srctools/_math.pyx":126
 *             elif c == b'(':
 *                 i += 1
 *                 end_delim = b')'             # <<<<<<<<<<<<<<
 *                 break
 *             else:
 */
        __pyx_v_end_delim = ')';

        /* "srctools/_math.pyx":127
 *                 i += 1
 *                 end_delim = b')'
 *                 break             # <<<<<<<<<<<<<<
 *             else:
 *                 break
 */
        goto __pyx_L5_break;

        /* "srctools/_math.pyx":124
 *                 end_delim = b']'
 *                 break
 *             elif c == b'(':             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 end_delim = b')'
 */
        break;
        default:

        /* "srctools/_math.pyx":129
 *                 break
 *             else:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         # Parse all three floats with scanf. < 3, because %n might not be counted?
 */
        goto __pyx_L5_break;
        break;
      }
      __pyx_L4_continue:;
    }
    __pyx_L5_break:;

    /* "srctools/_math.pyx":132
 * 
 *         # Parse all three floats with scanf. < 3, because %n might not be counted?
 *         if sscanf(buf+i, b"%lf %lf %lf%n", &vec.x, &vec.y, &vec.z, &read_amt) < 3:             # <<<<<<<<<<<<<<
 *             vec.x = x
 *             vec.y = y
 */
    __pyx_t_1 = ((sscanf((__pyx_v_buf + __pyx_v_i), ((char const *)"%lf %lf %lf%n"), (&__pyx_v_vec->x), (&__pyx_v_vec->y), (&__pyx_v_vec->z), (&__pyx_v_read_amt)) < 3) != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":133
 *         # Parse all three floats with scanf. < 3, because %n might not be counted?
 *         if sscanf(buf+i, b"%lf %lf %lf%n", &vec.x, &vec.y, &vec.z, &read_amt) < 3:
 *             vec.x = x             # <<<<<<<<<<<<<<
 *             vec.y = y
 *             vec.z = z
 */
      __pyx_v_vec->x = __pyx_v_x;

      /* "srctools/_math.pyx":134
 *         if sscanf(buf+i, b"%lf %lf %lf%n", &vec.x, &vec.y, &vec.z, &read_amt) < 3:
 *             vec.x = x
 *             vec.y = y             # <<<<<<<<<<<<<<
 *             vec.z = z
 *             return 0
 */
      __pyx_v_vec->y = __pyx_v_y;

      /* "srctools/_math.pyx":135
 *             vec.x = x
 *             vec.y = y
 *             vec.z = z             # <<<<<<<<<<<<<<
 *             return 0
 *         # Then check the remaining characters for the end delim.
 */
      __pyx_v_vec->z = __pyx_v_z;

      /* "srctools/_math.pyx":136
 *             vec.y = y
 *             vec.z = z
 *             return 0             # <<<<<<<<<<<<<<
 *         # Then check the remaining characters for the end delim.
 *         for i in range(i+read_amt, size):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "srctools/_math.pyx":132
 * 
 *         # Parse all three floats with scanf. < 3, because %n might not be counted?
 *         if sscanf(buf+i, b"%lf %lf %lf%n", &vec.x, &vec.y, &vec.z, &read_amt) < 3:             # <<<<<<<<<<<<<<
 *             vec.x = x
 *             vec.y = y
 */
    }

    /* "srctools/_math.pyx":138
 *             return 0
 *         # Then check the remaining characters for the end delim.
 *         for i in range(i+read_amt, size):             # <<<<<<<<<<<<<<
 *             if buf[i] == end_delim and end_delim != 0:
 *                 end_delim = 0  # Only allow it once.
 */
    __pyx_t_5 = __pyx_v_size;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = (__pyx_v_i + __pyx_v_read_amt); __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "srctools/_math.pyx":139
 *         # Then check the remaining characters for the end delim.
 *         for i in range(i+read_amt, size):
 *             if buf[i] == end_delim and end_delim != 0:             # <<<<<<<<<<<<<<
 *                 end_delim = 0  # Only allow it once.
 *             elif buf[i] not in b' \t\v\f':
 */
      __pyx_t_2 = (((__pyx_v_buf[__pyx_v_i]) == __pyx_v_end_delim) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_2 = ((__pyx_v_end_delim != 0) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_1) {

        /* "srctools/_math.pyx":140
 *         for i in range(i+read_amt, size):
 *             if buf[i] == end_delim and end_delim != 0:
 *                 end_delim = 0  # Only allow it once.             # <<<<<<<<<<<<<<
 *             elif buf[i] not in b' \t\v\f':
 *                 # Illegal char, pretend the scan failed.
 */
        __pyx_v_end_delim = 0;

        /* "srctools/_math.pyx":139
 *         # Then check the remaining characters for the end delim.
 *         for i in range(i+read_amt, size):
 *             if buf[i] == end_delim and end_delim != 0:             # <<<<<<<<<<<<<<
 *                 end_delim = 0  # Only allow it once.
 *             elif buf[i] not in b' \t\v\f':
 */
        goto __pyx_L9;
      }

      /* "srctools/_math.pyx":141
 *             if buf[i] == end_delim and end_delim != 0:
 *                 end_delim = 0  # Only allow it once.
 *             elif buf[i] not in b' \t\v\f':             # <<<<<<<<<<<<<<
 *                 # Illegal char, pretend the scan failed.
 *                 vec.x = x
 */
      switch ((__pyx_v_buf[__pyx_v_i])) {
        case '\t':
        case '\x0B':
        case '\x0C':
        case ' ':
        __pyx_t_1 = 0;
        break;
        default:
        __pyx_t_1 = 1;
        break;
      }
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (__pyx_t_2) {

        /* "srctools/_math.pyx":143
 *             elif buf[i] not in b' \t\v\f':
 *                 # Illegal char, pretend the scan failed.
 *                 vec.x = x             # <<<<<<<<<<<<<<
 *                 vec.y = y
 *                 vec.z = z
 */
        __pyx_v_vec->x = __pyx_v_x;

        /* "srctools/_math.pyx":144
 *                 # Illegal char, pretend the scan failed.
 *                 vec.x = x
 *                 vec.y = y             # <<<<<<<<<<<<<<
 *                 vec.z = z
 *                 return 0
 */
        __pyx_v_vec->y = __pyx_v_y;

        /* "srctools/_math.pyx":145
 *                 vec.x = x
 *                 vec.y = y
 *                 vec.z = z             # <<<<<<<<<<<<<<
 *                 return 0
 *     return 1
 */
        __pyx_v_vec->z = __pyx_v_z;

        /* "srctools/_math.pyx":146
 *                 vec.y = y
 *                 vec.z = z
 *                 return 0             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
        __pyx_r = 0;
        goto __pyx_L0;

        /* "srctools/_math.pyx":141
 *             if buf[i] == end_delim and end_delim != 0:
 *                 end_delim = 0  # Only allow it once.
 *             elif buf[i] not in b' \t\v\f':             # <<<<<<<<<<<<<<
 *                 # Illegal char, pretend the scan failed.
 *                 vec.x = x
 */
      }
      __pyx_L9:;
    }
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":147
 *                 vec.z = z
 *                 return 0
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "srctools/_math.pyx":88
 * 
 * 
 * cdef int _parse_vec_str(vec_t *vec, object value, double x, double y, double z) except -1:             # <<<<<<<<<<<<<<
 *     cdef const char *buf
 *     cdef Py_ssize_t size, i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("srctools._math._parse_vec_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":150
 * 
 * 
 * def parse_vec_str(object val, object x=0.0, object y=0.0, object z=0.0):             # <<<<<<<<<<<<<<
 *     """Convert a string in the form '(4 6 -4)' into a set of floats.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_1parse_vec_str(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_parse_vec_str[] = "parse_vec_str(val, x=0.0, y=0.0, z=0.0)\nConvert a string in the form '(4 6 -4)' into a set of floats.\n\n    If the string is unparsable, this uses the defaults (x,y,z).\n    The string can be surrounded with any of the (), {}, [], <> bracket\n    types.\n\n    If the 'string' is actually a Vec, the values will be returned.\n    ";
static PyMethodDef __pyx_mdef_8srctools_5_math_1parse_vec_str = {"parse_vec_str", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_1parse_vec_str, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_parse_vec_str};
static PyObject *__pyx_pw_8srctools_5_math_1parse_vec_str(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_z = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_vec_str (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_float_0_0);
    values[2] = ((PyObject *)__pyx_float_0_0);
    values[3] = ((PyObject *)__pyx_float_0_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "parse_vec_str") < 0)) __PYX_ERR(0, 150, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_val = values[0];
    __pyx_v_x = values[1];
    __pyx_v_y = values[2];
    __pyx_v_z = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parse_vec_str", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 150, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.parse_vec_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_parse_vec_str(__pyx_self, __pyx_v_val, __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_parse_vec_str(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_val, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_z) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_vec;
  PyObject *__pyx_v_tup = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse_vec_str", 0);

  /* "srctools/_math.pyx":163
 *     # Don't pass x/y/z to _parse_vec_str, so that we can pass through the objects
 *     # if it fails.
 *     if _parse_vec_str(&vec, val, NAN, NAN, NAN) == 1:             # <<<<<<<<<<<<<<
 *         return _make_tuple(vec.x, vec.y, vec.z)
 *     else:
 */
  __pyx_t_1 = __pyx_f_8srctools_5_math__parse_vec_str((&__pyx_v_vec), __pyx_v_val, NAN, NAN, NAN); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 163, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":164
 *     # if it fails.
 *     if _parse_vec_str(&vec, val, NAN, NAN, NAN) == 1:
 *         return _make_tuple(vec.x, vec.y, vec.z)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = (x, y, z)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_f_8srctools_5_math__make_tuple(__pyx_v_vec.x, __pyx_v_vec.y, __pyx_v_vec.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":163
 *     # Don't pass x/y/z to _parse_vec_str, so that we can pass through the objects
 *     # if it fails.
 *     if _parse_vec_str(&vec, val, NAN, NAN, NAN) == 1:             # <<<<<<<<<<<<<<
 *         return _make_tuple(vec.x, vec.y, vec.z)
 *     else:
 */
  }

  /* "srctools/_math.pyx":166
 *         return _make_tuple(vec.x, vec.y, vec.z)
 *     else:
 *         tup = (x, y, z)             # <<<<<<<<<<<<<<
 *         if USE_TYPE_INTERNALS:
 *             Py_INCREF(Vec_tuple)
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_y);
    __Pyx_INCREF(__pyx_v_z);
    __Pyx_GIVEREF(__pyx_v_z);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_z);
    __pyx_v_tup = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "srctools/_math.pyx":167
 *     else:
 *         tup = (x, y, z)
 *         if USE_TYPE_INTERNALS:             # <<<<<<<<<<<<<<
 *             Py_INCREF(Vec_tuple)
 *             (<PyObject *> tup).ob_type = <PyTypeObject *> Vec_tuple
 */
    __pyx_t_2 = (CYTHON_USE_TYPE_SLOTS != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":168
 *         tup = (x, y, z)
 *         if USE_TYPE_INTERNALS:
 *             Py_INCREF(Vec_tuple)             # <<<<<<<<<<<<<<
 *             (<PyObject *> tup).ob_type = <PyTypeObject *> Vec_tuple
 *             return tup
 */
      __pyx_t_3 = __pyx_v_8srctools_5_math_Vec_tuple;
      __Pyx_INCREF(__pyx_t_3);
      Py_INCREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "srctools/_math.pyx":169
 *         if USE_TYPE_INTERNALS:
 *             Py_INCREF(Vec_tuple)
 *             (<PyObject *> tup).ob_type = <PyTypeObject *> Vec_tuple             # <<<<<<<<<<<<<<
 *             return tup
 *         else:  # Not CPython, use more correct but slow method.
 */
      ((PyObject *)__pyx_v_tup)->ob_type = ((PyTypeObject *)__pyx_v_8srctools_5_math_Vec_tuple);

      /* "srctools/_math.pyx":170
 *             Py_INCREF(Vec_tuple)
 *             (<PyObject *> tup).ob_type = <PyTypeObject *> Vec_tuple
 *             return tup             # <<<<<<<<<<<<<<
 *         else:  # Not CPython, use more correct but slow method.
 *             with cython.optimize.unpack_method_calls(False):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_tup);
      __pyx_r = __pyx_v_tup;
      goto __pyx_L0;

      /* "srctools/_math.pyx":167
 *     else:
 *         tup = (x, y, z)
 *         if USE_TYPE_INTERNALS:             # <<<<<<<<<<<<<<
 *             Py_INCREF(Vec_tuple)
 *             (<PyObject *> tup).ob_type = <PyTypeObject *> Vec_tuple
 */
    }

    /* "srctools/_math.pyx":172
 *             return tup
 *         else:  # Not CPython, use more correct but slow method.
 *             with cython.optimize.unpack_method_calls(False):             # <<<<<<<<<<<<<<
 *                 return tuple_new(Vec_tuple, tup)
 * 
 */
    /*else*/ {

      /* "srctools/_math.pyx":173
 *         else:  # Not CPython, use more correct but slow method.
 *             with cython.optimize.unpack_method_calls(False):
 *                 return tuple_new(Vec_tuple, tup)             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(False)  # ZeroDivisionError is needed.
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_8srctools_5_math_Vec_tuple);
      __Pyx_GIVEREF(__pyx_v_8srctools_5_math_Vec_tuple);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_8srctools_5_math_Vec_tuple);
      __Pyx_INCREF(__pyx_v_tup);
      __Pyx_GIVEREF(__pyx_v_tup);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_tup);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_v_8srctools_5_math_tuple_new, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
    }
  }

  /* "srctools/_math.pyx":150
 * 
 * 
 * def parse_vec_str(object val, object x=0.0, object y=0.0, object z=0.0):             # <<<<<<<<<<<<<<
 *     """Convert a string in the form '(4 6 -4)' into a set of floats.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("srctools._math.parse_vec_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":176
 * 
 * @cython.cdivision(False)  # ZeroDivisionError is needed.
 * def lerp(x: float, in_min: float, in_max: float, out_min: float, out_max: float) -> float:             # <<<<<<<<<<<<<<
 *     """Linearly interpolate from in to out.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3lerp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_2lerp[] = "lerp(double x: float, double in_min: float, double in_max: float, double out_min: float, double out_max: float) -> float\nLinearly interpolate from in to out.\n\n    If both in values are the same, ZeroDivisionError is raised.\n    ";
static PyMethodDef __pyx_mdef_8srctools_5_math_3lerp = {"lerp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3lerp, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_2lerp};
static PyObject *__pyx_pw_8srctools_5_math_3lerp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  double __pyx_v_in_min;
  double __pyx_v_in_max;
  double __pyx_v_out_min;
  double __pyx_v_out_max;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lerp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_in_min,&__pyx_n_s_in_max,&__pyx_n_s_out_min,&__pyx_n_s_out_max,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lerp", 1, 5, 5, 1); __PYX_ERR(0, 176, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lerp", 1, 5, 5, 2); __PYX_ERR(0, 176, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lerp", 1, 5, 5, 3); __PYX_ERR(0, 176, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lerp", 1, 5, 5, 4); __PYX_ERR(0, 176, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lerp") < 0)) __PYX_ERR(0, 176, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L3_error)
    __pyx_v_in_min = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_in_min == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L3_error)
    __pyx_v_in_max = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_in_max == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L3_error)
    __pyx_v_out_min = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_out_min == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L3_error)
    __pyx_v_out_max = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_out_max == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lerp", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 176, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.lerp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_2lerp(__pyx_self, __pyx_v_x, __pyx_v_in_min, __pyx_v_in_max, __pyx_v_out_min, __pyx_v_out_max);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_2lerp(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_x, double __pyx_v_in_min, double __pyx_v_in_max, double __pyx_v_out_min, double __pyx_v_out_max) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lerp", 0);

  /* "srctools/_math.pyx":181
 *     If both in values are the same, ZeroDivisionError is raised.
 *     """
 *     return out_min + ((x - in_min) * (out_max - out_min)) / (in_max - in_min)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((__pyx_v_x - __pyx_v_in_min) * (__pyx_v_out_max - __pyx_v_out_min));
  __pyx_t_2 = (__pyx_v_in_max - __pyx_v_in_min);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 181, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_out_min + (__pyx_t_1 / __pyx_t_2))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":176
 * 
 * @cython.cdivision(False)  # ZeroDivisionError is needed.
 * def lerp(x: float, in_min: float, in_max: float, out_min: float, out_max: float) -> float:             # <<<<<<<<<<<<<<
 *     """Linearly interpolate from in to out.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("srctools._math.lerp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":184
 * 
 * 
 * cdef inline unsigned char conv_vec(             # <<<<<<<<<<<<<<
 *     vec_t *result,
 *     object vec,
 */

static CYTHON_INLINE unsigned char __pyx_f_8srctools_5_math_conv_vec(struct __pyx_t_8srctools_5_math_vec_t *__pyx_v_result, PyObject *__pyx_v_vec, int __pyx_v_scalar) {
  unsigned char __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  double __pyx_t_9;
  double __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv_vec", 0);

  /* "srctools/_math.pyx":193
 *     If scalar is True, allow int/float to set all axes.
 *     """
 *     if isinstance(vec, Vec):             # <<<<<<<<<<<<<<
 *         result.x = (<Vec>vec).val.x
 *         result.y = (<Vec>vec).val.y
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_vec, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":194
 *     """
 *     if isinstance(vec, Vec):
 *         result.x = (<Vec>vec).val.x             # <<<<<<<<<<<<<<
 *         result.y = (<Vec>vec).val.y
 *         result.z = (<Vec>vec).val.z
 */
    __pyx_t_3 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_vec)->val.x;
    __pyx_v_result->x = __pyx_t_3;

    /* "srctools/_math.pyx":195
 *     if isinstance(vec, Vec):
 *         result.x = (<Vec>vec).val.x
 *         result.y = (<Vec>vec).val.y             # <<<<<<<<<<<<<<
 *         result.z = (<Vec>vec).val.z
 *     elif isinstance(vec, float) or isinstance(vec, int):
 */
    __pyx_t_3 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_vec)->val.y;
    __pyx_v_result->y = __pyx_t_3;

    /* "srctools/_math.pyx":196
 *         result.x = (<Vec>vec).val.x
 *         result.y = (<Vec>vec).val.y
 *         result.z = (<Vec>vec).val.z             # <<<<<<<<<<<<<<
 *     elif isinstance(vec, float) or isinstance(vec, int):
 *         if scalar:
 */
    __pyx_t_3 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_vec)->val.z;
    __pyx_v_result->z = __pyx_t_3;

    /* "srctools/_math.pyx":193
 *     If scalar is True, allow int/float to set all axes.
 *     """
 *     if isinstance(vec, Vec):             # <<<<<<<<<<<<<<
 *         result.x = (<Vec>vec).val.x
 *         result.y = (<Vec>vec).val.y
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":197
 *         result.y = (<Vec>vec).val.y
 *         result.z = (<Vec>vec).val.z
 *     elif isinstance(vec, float) or isinstance(vec, int):             # <<<<<<<<<<<<<<
 *         if scalar:
 *             result.x = result.y = result.z = vec
 */
  __pyx_t_1 = PyFloat_Check(__pyx_v_vec); 
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyInt_Check(__pyx_v_vec); 
  __pyx_t_1 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":198
 *         result.z = (<Vec>vec).val.z
 *     elif isinstance(vec, float) or isinstance(vec, int):
 *         if scalar:             # <<<<<<<<<<<<<<
 *             result.x = result.y = result.z = vec
 *         else:
 */
    __pyx_t_2 = (__pyx_v_scalar != 0);
    if (likely(__pyx_t_2)) {

      /* "srctools/_math.pyx":199
 *     elif isinstance(vec, float) or isinstance(vec, int):
 *         if scalar:
 *             result.x = result.y = result.z = vec             # <<<<<<<<<<<<<<
 *         else:
 *             # No need to do argument checks.
 */
      __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_vec); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L1_error)
      __pyx_v_result->x = __pyx_t_3;
      __pyx_v_result->y = __pyx_t_3;
      __pyx_v_result->z = __pyx_t_3;

      /* "srctools/_math.pyx":198
 *         result.z = (<Vec>vec).val.z
 *     elif isinstance(vec, float) or isinstance(vec, int):
 *         if scalar:             # <<<<<<<<<<<<<<
 *             result.x = result.y = result.z = vec
 *         else:
 */
      goto __pyx_L6;
    }

    /* "srctools/_math.pyx":202
 *         else:
 *             # No need to do argument checks.
 *             raise TypeError('Cannot use scalars here.')             # <<<<<<<<<<<<<<
 *     elif isinstance(vec, tuple):
 *         result.x, result.y, result.z = <tuple>vec
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 202, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 202, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "srctools/_math.pyx":197
 *         result.y = (<Vec>vec).val.y
 *         result.z = (<Vec>vec).val.z
 *     elif isinstance(vec, float) or isinstance(vec, int):             # <<<<<<<<<<<<<<
 *         if scalar:
 *             result.x = result.y = result.z = vec
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":203
 *             # No need to do argument checks.
 *             raise TypeError('Cannot use scalars here.')
 *     elif isinstance(vec, tuple):             # <<<<<<<<<<<<<<
 *         result.x, result.y, result.z = <tuple>vec
 *     else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_vec); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":204
 *             raise TypeError('Cannot use scalars here.')
 *     elif isinstance(vec, tuple):
 *         result.x, result.y, result.z = <tuple>vec             # <<<<<<<<<<<<<<
 *     else:
 *         try:
 */
    __pyx_t_5 = __pyx_v_vec;
    __Pyx_INCREF(__pyx_t_5);
    if (likely(__pyx_t_5 != Py_None)) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 204, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 204, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_result->x = __pyx_t_3;
    __pyx_v_result->y = __pyx_t_9;
    __pyx_v_result->z = __pyx_t_10;

    /* "srctools/_math.pyx":203
 *             # No need to do argument checks.
 *             raise TypeError('Cannot use scalars here.')
 *     elif isinstance(vec, tuple):             # <<<<<<<<<<<<<<
 *         result.x, result.y, result.z = <tuple>vec
 *     else:
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":206
 *         result.x, result.y, result.z = <tuple>vec
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             result.x = vec.x
 *             result.y = vec.y
 */
  /*else*/ {
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      /*try:*/ {

        /* "srctools/_math.pyx":207
 *     else:
 *         try:
 *             result.x = vec.x             # <<<<<<<<<<<<<<
 *             result.y = vec.y
 *             result.z = vec.z
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_vec, __pyx_n_s_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 207, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 207, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_result->x = __pyx_t_10;

        /* "srctools/_math.pyx":208
 *         try:
 *             result.x = vec.x
 *             result.y = vec.y             # <<<<<<<<<<<<<<
 *             result.z = vec.z
 *         except AttributeError:
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_vec, __pyx_n_s_y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 208, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_result->y = __pyx_t_10;

        /* "srctools/_math.pyx":209
 *             result.x = vec.x
 *             result.y = vec.y
 *             result.z = vec.z             # <<<<<<<<<<<<<<
 *         except AttributeError:
 *             raise TypeError(f'{type(vec)} is not a Vec-like object!')
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_vec, __pyx_n_s_z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 209, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 209, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_result->z = __pyx_t_10;

        /* "srctools/_math.pyx":206
 *         result.x, result.y, result.z = <tuple>vec
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             result.x = vec.x
 *             result.y = vec.y
 */
      }
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L12_try_end;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "srctools/_math.pyx":210
 *             result.y = vec.y
 *             result.z = vec.z
 *         except AttributeError:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'{type(vec)} is not a Vec-like object!')
 *     return True
 */
      __pyx_t_14 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
      if (__pyx_t_14) {
        __Pyx_AddTraceback("srctools._math.conv_vec", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_8, &__pyx_t_7) < 0) __PYX_ERR(0, 210, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_7);

        /* "srctools/_math.pyx":211
 *             result.z = vec.z
 *         except AttributeError:
 *             raise TypeError(f'{type(vec)} is not a Vec-like object!')             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
        __pyx_t_6 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_vec)), __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 211, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_15 = __Pyx_PyUnicode_Concat(__pyx_t_6, __pyx_kp_u_is_not_a_Vec_like_object); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 211, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 211, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_Raise(__pyx_t_6, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __PYX_ERR(0, 211, __pyx_L9_except_error)
      }
      goto __pyx_L9_except_error;
      __pyx_L9_except_error:;

      /* "srctools/_math.pyx":206
 *         result.x, result.y, result.z = <tuple>vec
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             result.x = vec.x
 *             result.y = vec.y
 */
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L1_error;
      __pyx_L12_try_end:;
    }
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":212
 *         except AttributeError:
 *             raise TypeError(f'{type(vec)} is not a Vec-like object!')
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline unsigned char conv_angles(vec_t *result, object ang) except False:
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "srctools/_math.pyx":184
 * 
 * 
 * cdef inline unsigned char conv_vec(             # <<<<<<<<<<<<<<
 *     vec_t *result,
 *     object vec,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("srctools._math.conv_vec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":214
 *     return True
 * 
 * cdef inline unsigned char conv_angles(vec_t *result, object ang) except False:             # <<<<<<<<<<<<<<
 *     """Convert some object to a unified Angle struct.
 * 
 */

static CYTHON_INLINE unsigned char __pyx_f_8srctools_5_math_conv_angles(struct __pyx_t_8srctools_5_math_vec_t *__pyx_v_result, PyObject *__pyx_v_ang) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  unsigned char __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  double __pyx_t_9;
  double __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv_angles", 0);

  /* "srctools/_math.pyx":220
 *     """
 *     cdef double x, y, z
 *     if isinstance(ang, Angle):             # <<<<<<<<<<<<<<
 *         result.x = (<Angle>ang).val.x
 *         result.y = (<Angle>ang).val.y
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_ang, __pyx_ptype_8srctools_5_math_Angle); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":221
 *     cdef double x, y, z
 *     if isinstance(ang, Angle):
 *         result.x = (<Angle>ang).val.x             # <<<<<<<<<<<<<<
 *         result.y = (<Angle>ang).val.y
 *         result.z = (<Angle>ang).val.z
 */
    __pyx_t_3 = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_ang)->val.x;
    __pyx_v_result->x = __pyx_t_3;

    /* "srctools/_math.pyx":222
 *     if isinstance(ang, Angle):
 *         result.x = (<Angle>ang).val.x
 *         result.y = (<Angle>ang).val.y             # <<<<<<<<<<<<<<
 *         result.z = (<Angle>ang).val.z
 *     elif isinstance(ang, float) or isinstance(ang, int):
 */
    __pyx_t_3 = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_ang)->val.y;
    __pyx_v_result->y = __pyx_t_3;

    /* "srctools/_math.pyx":223
 *         result.x = (<Angle>ang).val.x
 *         result.y = (<Angle>ang).val.y
 *         result.z = (<Angle>ang).val.z             # <<<<<<<<<<<<<<
 *     elif isinstance(ang, float) or isinstance(ang, int):
 *         raise TypeError('Cannot convert scalars to an Angle!')
 */
    __pyx_t_3 = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_ang)->val.z;
    __pyx_v_result->z = __pyx_t_3;

    /* "srctools/_math.pyx":220
 *     """
 *     cdef double x, y, z
 *     if isinstance(ang, Angle):             # <<<<<<<<<<<<<<
 *         result.x = (<Angle>ang).val.x
 *         result.y = (<Angle>ang).val.y
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":224
 *         result.y = (<Angle>ang).val.y
 *         result.z = (<Angle>ang).val.z
 *     elif isinstance(ang, float) or isinstance(ang, int):             # <<<<<<<<<<<<<<
 *         raise TypeError('Cannot convert scalars to an Angle!')
 *     elif isinstance(ang, tuple):
 */
  __pyx_t_1 = PyFloat_Check(__pyx_v_ang); 
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyInt_Check(__pyx_v_ang); 
  __pyx_t_1 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "srctools/_math.pyx":225
 *         result.z = (<Angle>ang).val.z
 *     elif isinstance(ang, float) or isinstance(ang, int):
 *         raise TypeError('Cannot convert scalars to an Angle!')             # <<<<<<<<<<<<<<
 *     elif isinstance(ang, tuple):
 *         x, y, z = <tuple>ang
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 225, __pyx_L1_error)

    /* "srctools/_math.pyx":224
 *         result.y = (<Angle>ang).val.y
 *         result.z = (<Angle>ang).val.z
 *     elif isinstance(ang, float) or isinstance(ang, int):             # <<<<<<<<<<<<<<
 *         raise TypeError('Cannot convert scalars to an Angle!')
 *     elif isinstance(ang, tuple):
 */
  }

  /* "srctools/_math.pyx":226
 *     elif isinstance(ang, float) or isinstance(ang, int):
 *         raise TypeError('Cannot convert scalars to an Angle!')
 *     elif isinstance(ang, tuple):             # <<<<<<<<<<<<<<
 *         x, y, z = <tuple>ang
 *         result.x = norm_ang(x)
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_ang); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":227
 *         raise TypeError('Cannot convert scalars to an Angle!')
 *     elif isinstance(ang, tuple):
 *         x, y, z = <tuple>ang             # <<<<<<<<<<<<<<
 *         result.x = norm_ang(x)
 *         result.y = norm_ang(y)
 */
    __pyx_t_5 = __pyx_v_ang;
    __Pyx_INCREF(__pyx_t_5);
    if (likely(__pyx_t_5 != Py_None)) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 227, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 227, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_x = __pyx_t_3;
    __pyx_v_y = __pyx_t_9;
    __pyx_v_z = __pyx_t_10;

    /* "srctools/_math.pyx":228
 *     elif isinstance(ang, tuple):
 *         x, y, z = <tuple>ang
 *         result.x = norm_ang(x)             # <<<<<<<<<<<<<<
 *         result.y = norm_ang(y)
 *         result.z = norm_ang(z)
 */
    __pyx_v_result->x = __pyx_f_8srctools_5_math_norm_ang(__pyx_v_x);

    /* "srctools/_math.pyx":229
 *         x, y, z = <tuple>ang
 *         result.x = norm_ang(x)
 *         result.y = norm_ang(y)             # <<<<<<<<<<<<<<
 *         result.z = norm_ang(z)
 *     else:
 */
    __pyx_v_result->y = __pyx_f_8srctools_5_math_norm_ang(__pyx_v_y);

    /* "srctools/_math.pyx":230
 *         result.x = norm_ang(x)
 *         result.y = norm_ang(y)
 *         result.z = norm_ang(z)             # <<<<<<<<<<<<<<
 *     else:
 *         try:
 */
    __pyx_v_result->z = __pyx_f_8srctools_5_math_norm_ang(__pyx_v_z);

    /* "srctools/_math.pyx":226
 *     elif isinstance(ang, float) or isinstance(ang, int):
 *         raise TypeError('Cannot convert scalars to an Angle!')
 *     elif isinstance(ang, tuple):             # <<<<<<<<<<<<<<
 *         x, y, z = <tuple>ang
 *         result.x = norm_ang(x)
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":232
 *         result.z = norm_ang(z)
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             result.x = norm_ang(ang.x)
 *             result.y = norm_ang(ang.y)
 */
  /*else*/ {
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      /*try:*/ {

        /* "srctools/_math.pyx":233
 *     else:
 *         try:
 *             result.x = norm_ang(ang.x)             # <<<<<<<<<<<<<<
 *             result.y = norm_ang(ang.y)
 *             result.z = norm_ang(ang.z)
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ang, __pyx_n_s_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 233, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 233, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_result->x = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_10);

        /* "srctools/_math.pyx":234
 *         try:
 *             result.x = norm_ang(ang.x)
 *             result.y = norm_ang(ang.y)             # <<<<<<<<<<<<<<
 *             result.z = norm_ang(ang.z)
 *         except AttributeError:
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ang, __pyx_n_s_y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 234, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 234, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_result->y = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_10);

        /* "srctools/_math.pyx":235
 *             result.x = norm_ang(ang.x)
 *             result.y = norm_ang(ang.y)
 *             result.z = norm_ang(ang.z)             # <<<<<<<<<<<<<<
 *         except AttributeError:
 *             raise TypeError(f'{type(ang)} is not an Angle-like object!')
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ang, __pyx_n_s_z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_result->z = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_10);

        /* "srctools/_math.pyx":232
 *         result.z = norm_ang(z)
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             result.x = norm_ang(ang.x)
 *             result.y = norm_ang(ang.y)
 */
      }
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L11_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "srctools/_math.pyx":236
 *             result.y = norm_ang(ang.y)
 *             result.z = norm_ang(ang.z)
 *         except AttributeError:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'{type(ang)} is not an Angle-like object!')
 *     return True
 */
      __pyx_t_14 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
      if (__pyx_t_14) {
        __Pyx_AddTraceback("srctools._math.conv_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_8, &__pyx_t_7) < 0) __PYX_ERR(0, 236, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_7);

        /* "srctools/_math.pyx":237
 *             result.z = norm_ang(ang.z)
 *         except AttributeError:
 *             raise TypeError(f'{type(ang)} is not an Angle-like object!')             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
        __pyx_t_6 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_ang)), __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 237, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_15 = __Pyx_PyUnicode_Concat(__pyx_t_6, __pyx_kp_u_is_not_an_Angle_like_object); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 237, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 237, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_Raise(__pyx_t_6, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __PYX_ERR(0, 237, __pyx_L8_except_error)
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;

      /* "srctools/_math.pyx":232
 *         result.z = norm_ang(z)
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             result.x = norm_ang(ang.x)
 *             result.y = norm_ang(ang.y)
 */
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L1_error;
      __pyx_L11_try_end:;
    }
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":238
 *         except AttributeError:
 *             raise TypeError(f'{type(ang)} is not an Angle-like object!')
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline double _vec_mag_sq(vec_t *vec):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "srctools/_math.pyx":214
 *     return True
 * 
 * cdef inline unsigned char conv_angles(vec_t *result, object ang) except False:             # <<<<<<<<<<<<<<
 *     """Convert some object to a unified Angle struct.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("srctools._math.conv_angles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":240
 *     return True
 * 
 * cdef inline double _vec_mag_sq(vec_t *vec):             # <<<<<<<<<<<<<<
 *     # This is faster if you just need to compare.
 *     return vec.x**2 + vec.y**2 + vec.z**2
 */

static CYTHON_INLINE double __pyx_f_8srctools_5_math__vec_mag_sq(struct __pyx_t_8srctools_5_math_vec_t *__pyx_v_vec) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_vec_mag_sq", 0);

  /* "srctools/_math.pyx":242
 * cdef inline double _vec_mag_sq(vec_t *vec):
 *     # This is faster if you just need to compare.
 *     return vec.x**2 + vec.y**2 + vec.z**2             # <<<<<<<<<<<<<<
 * 
 * cdef inline double _vec_mag(vec_t *vec):
 */
  __pyx_r = ((pow(__pyx_v_vec->x, 2.0) + pow(__pyx_v_vec->y, 2.0)) + pow(__pyx_v_vec->z, 2.0));
  goto __pyx_L0;

  /* "srctools/_math.pyx":240
 *     return True
 * 
 * cdef inline double _vec_mag_sq(vec_t *vec):             # <<<<<<<<<<<<<<
 *     # This is faster if you just need to compare.
 *     return vec.x**2 + vec.y**2 + vec.z**2
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":244
 *     return vec.x**2 + vec.y**2 + vec.z**2
 * 
 * cdef inline double _vec_mag(vec_t *vec):             # <<<<<<<<<<<<<<
 *     return math.sqrt(_vec_mag_sq(vec))
 * 
 */

static CYTHON_INLINE double __pyx_f_8srctools_5_math__vec_mag(struct __pyx_t_8srctools_5_math_vec_t *__pyx_v_vec) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_vec_mag", 0);

  /* "srctools/_math.pyx":245
 * 
 * cdef inline double _vec_mag(vec_t *vec):
 *     return math.sqrt(_vec_mag_sq(vec))             # <<<<<<<<<<<<<<
 * 
 * cdef inline void _vec_normalise(vec_t *out, vec_t *inp):
 */
  __pyx_r = sqrt(__pyx_f_8srctools_5_math__vec_mag_sq(__pyx_v_vec));
  goto __pyx_L0;

  /* "srctools/_math.pyx":244
 *     return vec.x**2 + vec.y**2 + vec.z**2
 * 
 * cdef inline double _vec_mag(vec_t *vec):             # <<<<<<<<<<<<<<
 *     return math.sqrt(_vec_mag_sq(vec))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":247
 *     return math.sqrt(_vec_mag_sq(vec))
 * 
 * cdef inline void _vec_normalise(vec_t *out, vec_t *inp):             # <<<<<<<<<<<<<<
 *     """Normalise the vector, writing to out. inp and out may be the same."""
 *     cdef double mag = _vec_mag(inp)
 */

static CYTHON_INLINE void __pyx_f_8srctools_5_math__vec_normalise(struct __pyx_t_8srctools_5_math_vec_t *__pyx_v_out, struct __pyx_t_8srctools_5_math_vec_t *__pyx_v_inp) {
  double __pyx_v_mag;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_vec_normalise", 0);

  /* "srctools/_math.pyx":249
 * cdef inline void _vec_normalise(vec_t *out, vec_t *inp):
 *     """Normalise the vector, writing to out. inp and out may be the same."""
 *     cdef double mag = _vec_mag(inp)             # <<<<<<<<<<<<<<
 * 
 *     if mag == 0:
 */
  __pyx_v_mag = __pyx_f_8srctools_5_math__vec_mag(__pyx_v_inp);

  /* "srctools/_math.pyx":251
 *     cdef double mag = _vec_mag(inp)
 * 
 *     if mag == 0:             # <<<<<<<<<<<<<<
 *         # Vec(0, 0, 0).norm = Vec(0, 0, 0), as a special case.
 *         out.x = out.y = out.z = 0
 */
  __pyx_t_1 = ((__pyx_v_mag == 0.0) != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":253
 *     if mag == 0:
 *         # Vec(0, 0, 0).norm = Vec(0, 0, 0), as a special case.
 *         out.x = out.y = out.z = 0             # <<<<<<<<<<<<<<
 *     else:
 *         # Disable ZeroDivisionError check, we just checked that.
 */
    __pyx_v_out->x = 0.0;
    __pyx_v_out->y = 0.0;
    __pyx_v_out->z = 0.0;

    /* "srctools/_math.pyx":251
 *     cdef double mag = _vec_mag(inp)
 * 
 *     if mag == 0:             # <<<<<<<<<<<<<<
 *         # Vec(0, 0, 0).norm = Vec(0, 0, 0), as a special case.
 *         out.x = out.y = out.z = 0
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":256
 *     else:
 *         # Disable ZeroDivisionError check, we just checked that.
 *         with cython.cdivision(True):             # <<<<<<<<<<<<<<
 *             out.x = inp.x / mag
 *             out.y = inp.y / mag
 */
  /*else*/ {

    /* "srctools/_math.pyx":257
 *         # Disable ZeroDivisionError check, we just checked that.
 *         with cython.cdivision(True):
 *             out.x = inp.x / mag             # <<<<<<<<<<<<<<
 *             out.y = inp.y / mag
 *             out.z = inp.z / mag
 */
    __pyx_v_out->x = (__pyx_v_inp->x / __pyx_v_mag);

    /* "srctools/_math.pyx":258
 *         with cython.cdivision(True):
 *             out.x = inp.x / mag
 *             out.y = inp.y / mag             # <<<<<<<<<<<<<<
 *             out.z = inp.z / mag
 * 
 */
    __pyx_v_out->y = (__pyx_v_inp->y / __pyx_v_mag);

    /* "srctools/_math.pyx":259
 *             out.x = inp.x / mag
 *             out.y = inp.y / mag
 *             out.z = inp.z / mag             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_out->z = (__pyx_v_inp->z / __pyx_v_mag);
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":247
 *     return math.sqrt(_vec_mag_sq(vec))
 * 
 * cdef inline void _vec_normalise(vec_t *out, vec_t *inp):             # <<<<<<<<<<<<<<
 *     """Normalise the vector, writing to out. inp and out may be the same."""
 *     cdef double mag = _vec_mag(inp)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "srctools/_math.pyx":262
 * 
 * 
 * cdef inline void mat_mul(mat_t targ, mat_t rot):             # <<<<<<<<<<<<<<
 *     """Rotate target by the rotator matrix."""
 *     cdef double a, b, c
 */

static CYTHON_INLINE void __pyx_f_8srctools_5_math_mat_mul(double (*__pyx_v_targ)[3], double (*__pyx_v_rot)[3]) {
  double __pyx_v_a;
  double __pyx_v_b;
  double __pyx_v_c;
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("mat_mul", 0);

  /* "srctools/_math.pyx":266
 *     cdef double a, b, c
 *     cdef int i
 *     for i in range(3):             # <<<<<<<<<<<<<<
 *         a = targ[i][0]
 *         b = targ[i][1]
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "srctools/_math.pyx":267
 *     cdef int i
 *     for i in range(3):
 *         a = targ[i][0]             # <<<<<<<<<<<<<<
 *         b = targ[i][1]
 *         c = targ[i][2]
 */
    __pyx_v_a = ((__pyx_v_targ[__pyx_v_i])[0]);

    /* "srctools/_math.pyx":268
 *     for i in range(3):
 *         a = targ[i][0]
 *         b = targ[i][1]             # <<<<<<<<<<<<<<
 *         c = targ[i][2]
 *         # The source rows only affect that row, so we only need to
 */
    __pyx_v_b = ((__pyx_v_targ[__pyx_v_i])[1]);

    /* "srctools/_math.pyx":269
 *         a = targ[i][0]
 *         b = targ[i][1]
 *         c = targ[i][2]             # <<<<<<<<<<<<<<
 *         # The source rows only affect that row, so we only need to
 *         # store a copy of 3 at a time.
 */
    __pyx_v_c = ((__pyx_v_targ[__pyx_v_i])[2]);

    /* "srctools/_math.pyx":272
 *         # The source rows only affect that row, so we only need to
 *         # store a copy of 3 at a time.
 *         targ[i][0] = a * rot[0][0] + b * rot[1][0] + c * rot[2][0]             # <<<<<<<<<<<<<<
 *         targ[i][1] = a * rot[0][1] + b * rot[1][1] + c * rot[2][1]
 *         targ[i][2] = a * rot[0][2] + b * rot[1][2] + c * rot[2][2]
 */
    ((__pyx_v_targ[__pyx_v_i])[0]) = (((__pyx_v_a * ((__pyx_v_rot[0])[0])) + (__pyx_v_b * ((__pyx_v_rot[1])[0]))) + (__pyx_v_c * ((__pyx_v_rot[2])[0])));

    /* "srctools/_math.pyx":273
 *         # store a copy of 3 at a time.
 *         targ[i][0] = a * rot[0][0] + b * rot[1][0] + c * rot[2][0]
 *         targ[i][1] = a * rot[0][1] + b * rot[1][1] + c * rot[2][1]             # <<<<<<<<<<<<<<
 *         targ[i][2] = a * rot[0][2] + b * rot[1][2] + c * rot[2][2]
 * 
 */
    ((__pyx_v_targ[__pyx_v_i])[1]) = (((__pyx_v_a * ((__pyx_v_rot[0])[1])) + (__pyx_v_b * ((__pyx_v_rot[1])[1]))) + (__pyx_v_c * ((__pyx_v_rot[2])[1])));

    /* "srctools/_math.pyx":274
 *         targ[i][0] = a * rot[0][0] + b * rot[1][0] + c * rot[2][0]
 *         targ[i][1] = a * rot[0][1] + b * rot[1][1] + c * rot[2][1]
 *         targ[i][2] = a * rot[0][2] + b * rot[1][2] + c * rot[2][2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    ((__pyx_v_targ[__pyx_v_i])[2]) = (((__pyx_v_a * ((__pyx_v_rot[0])[2])) + (__pyx_v_b * ((__pyx_v_rot[1])[2]))) + (__pyx_v_c * ((__pyx_v_rot[2])[2])));
  }

  /* "srctools/_math.pyx":262
 * 
 * 
 * cdef inline void mat_mul(mat_t targ, mat_t rot):             # <<<<<<<<<<<<<<
 *     """Rotate target by the rotator matrix."""
 *     cdef double a, b, c
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "srctools/_math.pyx":277
 * 
 * 
 * cdef inline void vec_rot(vec_t *vec, mat_t mat):             # <<<<<<<<<<<<<<
 *     """Rotate a vector by our value."""
 *     cdef double x = vec.x
 */

static CYTHON_INLINE void __pyx_f_8srctools_5_math_vec_rot(struct __pyx_t_8srctools_5_math_vec_t *__pyx_v_vec, double (*__pyx_v_mat)[3]) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("vec_rot", 0);

  /* "srctools/_math.pyx":279
 * cdef inline void vec_rot(vec_t *vec, mat_t mat):
 *     """Rotate a vector by our value."""
 *     cdef double x = vec.x             # <<<<<<<<<<<<<<
 *     cdef double y = vec.y
 *     cdef double z = vec.z
 */
  __pyx_t_1 = __pyx_v_vec->x;
  __pyx_v_x = __pyx_t_1;

  /* "srctools/_math.pyx":280
 *     """Rotate a vector by our value."""
 *     cdef double x = vec.x
 *     cdef double y = vec.y             # <<<<<<<<<<<<<<
 *     cdef double z = vec.z
 *     vec.x = (x * mat[0][0]) + (y * mat[1][0]) + (z * mat[2][0])
 */
  __pyx_t_1 = __pyx_v_vec->y;
  __pyx_v_y = __pyx_t_1;

  /* "srctools/_math.pyx":281
 *     cdef double x = vec.x
 *     cdef double y = vec.y
 *     cdef double z = vec.z             # <<<<<<<<<<<<<<
 *     vec.x = (x * mat[0][0]) + (y * mat[1][0]) + (z * mat[2][0])
 *     vec.y = (x * mat[0][1]) + (y * mat[1][1]) + (z * mat[2][1])
 */
  __pyx_t_1 = __pyx_v_vec->z;
  __pyx_v_z = __pyx_t_1;

  /* "srctools/_math.pyx":282
 *     cdef double y = vec.y
 *     cdef double z = vec.z
 *     vec.x = (x * mat[0][0]) + (y * mat[1][0]) + (z * mat[2][0])             # <<<<<<<<<<<<<<
 *     vec.y = (x * mat[0][1]) + (y * mat[1][1]) + (z * mat[2][1])
 *     vec.z = (x * mat[0][2]) + (y * mat[1][2]) + (z * mat[2][2])
 */
  __pyx_v_vec->x = (((__pyx_v_x * ((__pyx_v_mat[0])[0])) + (__pyx_v_y * ((__pyx_v_mat[1])[0]))) + (__pyx_v_z * ((__pyx_v_mat[2])[0])));

  /* "srctools/_math.pyx":283
 *     cdef double z = vec.z
 *     vec.x = (x * mat[0][0]) + (y * mat[1][0]) + (z * mat[2][0])
 *     vec.y = (x * mat[0][1]) + (y * mat[1][1]) + (z * mat[2][1])             # <<<<<<<<<<<<<<
 *     vec.z = (x * mat[0][2]) + (y * mat[1][2]) + (z * mat[2][2])
 * 
 */
  __pyx_v_vec->y = (((__pyx_v_x * ((__pyx_v_mat[0])[1])) + (__pyx_v_y * ((__pyx_v_mat[1])[1]))) + (__pyx_v_z * ((__pyx_v_mat[2])[1])));

  /* "srctools/_math.pyx":284
 *     vec.x = (x * mat[0][0]) + (y * mat[1][0]) + (z * mat[2][0])
 *     vec.y = (x * mat[0][1]) + (y * mat[1][1]) + (z * mat[2][1])
 *     vec.z = (x * mat[0][2]) + (y * mat[1][2]) + (z * mat[2][2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_vec->z = (((__pyx_v_x * ((__pyx_v_mat[0])[2])) + (__pyx_v_y * ((__pyx_v_mat[1])[2]))) + (__pyx_v_z * ((__pyx_v_mat[2])[2])));

  /* "srctools/_math.pyx":277
 * 
 * 
 * cdef inline void vec_rot(vec_t *vec, mat_t mat):             # <<<<<<<<<<<<<<
 *     """Rotate a vector by our value."""
 *     cdef double x = vec.x
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "srctools/_math.pyx":287
 * 
 * 
 * cdef inline void _vec_cross(vec_t *res, vec_t *a, vec_t *b):             # <<<<<<<<<<<<<<
 *     """Compute the cross product of A x B. """
 *     res.x = a.y * b.z - a.z * b.y
 */

static CYTHON_INLINE void __pyx_f_8srctools_5_math__vec_cross(struct __pyx_t_8srctools_5_math_vec_t *__pyx_v_res, struct __pyx_t_8srctools_5_math_vec_t *__pyx_v_a, struct __pyx_t_8srctools_5_math_vec_t *__pyx_v_b) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_vec_cross", 0);

  /* "srctools/_math.pyx":289
 * cdef inline void _vec_cross(vec_t *res, vec_t *a, vec_t *b):
 *     """Compute the cross product of A x B. """
 *     res.x = a.y * b.z - a.z * b.y             # <<<<<<<<<<<<<<
 *     res.y = a.z * b.x - a.x * b.z
 *     res.z = a.x * b.y - a.y * b.x
 */
  __pyx_v_res->x = ((__pyx_v_a->y * __pyx_v_b->z) - (__pyx_v_a->z * __pyx_v_b->y));

  /* "srctools/_math.pyx":290
 *     """Compute the cross product of A x B. """
 *     res.x = a.y * b.z - a.z * b.y
 *     res.y = a.z * b.x - a.x * b.z             # <<<<<<<<<<<<<<
 *     res.z = a.x * b.y - a.y * b.x
 * 
 */
  __pyx_v_res->y = ((__pyx_v_a->z * __pyx_v_b->x) - (__pyx_v_a->x * __pyx_v_b->z));

  /* "srctools/_math.pyx":291
 *     res.x = a.y * b.z - a.z * b.y
 *     res.y = a.z * b.x - a.x * b.z
 *     res.z = a.x * b.y - a.y * b.x             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_res->z = ((__pyx_v_a->x * __pyx_v_b->y) - (__pyx_v_a->y * __pyx_v_b->x));

  /* "srctools/_math.pyx":287
 * 
 * 
 * cdef inline void _vec_cross(vec_t *res, vec_t *a, vec_t *b):             # <<<<<<<<<<<<<<
 *     """Compute the cross product of A x B. """
 *     res.x = a.y * b.z - a.z * b.y
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "srctools/_math.pyx":294
 * 
 * 
 * cdef void _mat_from_angle(mat_t res, vec_t *angle):             # <<<<<<<<<<<<<<
 *     cdef double p = deg_2_rad * angle.x
 *     cdef double y = deg_2_rad * angle.y
 */

static void __pyx_f_8srctools_5_math__mat_from_angle(double (*__pyx_v_res)[3], struct __pyx_t_8srctools_5_math_vec_t *__pyx_v_angle) {
  double __pyx_v_p;
  double __pyx_v_y;
  double __pyx_v_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_mat_from_angle", 0);

  /* "srctools/_math.pyx":295
 * 
 * cdef void _mat_from_angle(mat_t res, vec_t *angle):
 *     cdef double p = deg_2_rad * angle.x             # <<<<<<<<<<<<<<
 *     cdef double y = deg_2_rad * angle.y
 *     cdef double r = deg_2_rad * angle.z
 */
  __pyx_v_p = (0.017453292519943295 * __pyx_v_angle->x);

  /* "srctools/_math.pyx":296
 * cdef void _mat_from_angle(mat_t res, vec_t *angle):
 *     cdef double p = deg_2_rad * angle.x
 *     cdef double y = deg_2_rad * angle.y             # <<<<<<<<<<<<<<
 *     cdef double r = deg_2_rad * angle.z
 * 
 */
  __pyx_v_y = (0.017453292519943295 * __pyx_v_angle->y);

  /* "srctools/_math.pyx":297
 *     cdef double p = deg_2_rad * angle.x
 *     cdef double y = deg_2_rad * angle.y
 *     cdef double r = deg_2_rad * angle.z             # <<<<<<<<<<<<<<
 * 
 *     res[0][0] = cos(p) * cos(y)
 */
  __pyx_v_r = (0.017453292519943295 * __pyx_v_angle->z);

  /* "srctools/_math.pyx":299
 *     cdef double r = deg_2_rad * angle.z
 * 
 *     res[0][0] = cos(p) * cos(y)             # <<<<<<<<<<<<<<
 *     res[0][1] = cos(p) * sin(y)
 *     res[0][2] = -sin(p)
 */
  ((__pyx_v_res[0])[0]) = (cos(__pyx_v_p) * cos(__pyx_v_y));

  /* "srctools/_math.pyx":300
 * 
 *     res[0][0] = cos(p) * cos(y)
 *     res[0][1] = cos(p) * sin(y)             # <<<<<<<<<<<<<<
 *     res[0][2] = -sin(p)
 * 
 */
  ((__pyx_v_res[0])[1]) = (cos(__pyx_v_p) * sin(__pyx_v_y));

  /* "srctools/_math.pyx":301
 *     res[0][0] = cos(p) * cos(y)
 *     res[0][1] = cos(p) * sin(y)
 *     res[0][2] = -sin(p)             # <<<<<<<<<<<<<<
 * 
 *     res[1][0] = sin(p) * sin(r) * cos(y) - cos(r) * sin(y)
 */
  ((__pyx_v_res[0])[2]) = (-sin(__pyx_v_p));

  /* "srctools/_math.pyx":303
 *     res[0][2] = -sin(p)
 * 
 *     res[1][0] = sin(p) * sin(r) * cos(y) - cos(r) * sin(y)             # <<<<<<<<<<<<<<
 *     res[1][1] = sin(p) * sin(r) * sin(y) + cos(r) * cos(y)
 *     res[1][2] = sin(r) * cos(p)
 */
  ((__pyx_v_res[1])[0]) = (((sin(__pyx_v_p) * sin(__pyx_v_r)) * cos(__pyx_v_y)) - (cos(__pyx_v_r) * sin(__pyx_v_y)));

  /* "srctools/_math.pyx":304
 * 
 *     res[1][0] = sin(p) * sin(r) * cos(y) - cos(r) * sin(y)
 *     res[1][1] = sin(p) * sin(r) * sin(y) + cos(r) * cos(y)             # <<<<<<<<<<<<<<
 *     res[1][2] = sin(r) * cos(p)
 * 
 */
  ((__pyx_v_res[1])[1]) = (((sin(__pyx_v_p) * sin(__pyx_v_r)) * sin(__pyx_v_y)) + (cos(__pyx_v_r) * cos(__pyx_v_y)));

  /* "srctools/_math.pyx":305
 *     res[1][0] = sin(p) * sin(r) * cos(y) - cos(r) * sin(y)
 *     res[1][1] = sin(p) * sin(r) * sin(y) + cos(r) * cos(y)
 *     res[1][2] = sin(r) * cos(p)             # <<<<<<<<<<<<<<
 * 
 *     res[2][0] = sin(p) * cos(r) * cos(y) + sin(r) * sin(y)
 */
  ((__pyx_v_res[1])[2]) = (sin(__pyx_v_r) * cos(__pyx_v_p));

  /* "srctools/_math.pyx":307
 *     res[1][2] = sin(r) * cos(p)
 * 
 *     res[2][0] = sin(p) * cos(r) * cos(y) + sin(r) * sin(y)             # <<<<<<<<<<<<<<
 *     res[2][1] = sin(p) * cos(r) * sin(y) - sin(r) * cos(y)
 *     res[2][2] = cos(r) * cos(p)
 */
  ((__pyx_v_res[2])[0]) = (((sin(__pyx_v_p) * cos(__pyx_v_r)) * cos(__pyx_v_y)) + (sin(__pyx_v_r) * sin(__pyx_v_y)));

  /* "srctools/_math.pyx":308
 * 
 *     res[2][0] = sin(p) * cos(r) * cos(y) + sin(r) * sin(y)
 *     res[2][1] = sin(p) * cos(r) * sin(y) - sin(r) * cos(y)             # <<<<<<<<<<<<<<
 *     res[2][2] = cos(r) * cos(p)
 * 
 */
  ((__pyx_v_res[2])[1]) = (((sin(__pyx_v_p) * cos(__pyx_v_r)) * sin(__pyx_v_y)) - (sin(__pyx_v_r) * cos(__pyx_v_y)));

  /* "srctools/_math.pyx":309
 *     res[2][0] = sin(p) * cos(r) * cos(y) + sin(r) * sin(y)
 *     res[2][1] = sin(p) * cos(r) * sin(y) - sin(r) * cos(y)
 *     res[2][2] = cos(r) * cos(p)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((__pyx_v_res[2])[2]) = (cos(__pyx_v_r) * cos(__pyx_v_p));

  /* "srctools/_math.pyx":294
 * 
 * 
 * cdef void _mat_from_angle(mat_t res, vec_t *angle):             # <<<<<<<<<<<<<<
 *     cdef double p = deg_2_rad * angle.x
 *     cdef double y = deg_2_rad * angle.y
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "srctools/_math.pyx":312
 * 
 * 
 * cdef inline void _mat_to_angle(vec_t *ang, mat_t mat):             # <<<<<<<<<<<<<<
 *     # https://github.com/ValveSoftware/source-sdk-2013/blob/master/sp/src/mathlib/mathlib_base.cpp#L208
 *     cdef double horiz_dist = math.sqrt(mat[0][0]**2 + mat[0][1]**2)
 */

static CYTHON_INLINE void __pyx_f_8srctools_5_math__mat_to_angle(struct __pyx_t_8srctools_5_math_vec_t *__pyx_v_ang, double (*__pyx_v_mat)[3]) {
  double __pyx_v_horiz_dist;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_mat_to_angle", 0);

  /* "srctools/_math.pyx":314
 * cdef inline void _mat_to_angle(vec_t *ang, mat_t mat):
 *     # https://github.com/ValveSoftware/source-sdk-2013/blob/master/sp/src/mathlib/mathlib_base.cpp#L208
 *     cdef double horiz_dist = math.sqrt(mat[0][0]**2 + mat[0][1]**2)             # <<<<<<<<<<<<<<
 *     if horiz_dist > 0.001:
 *         ang.x = norm_ang(rad_2_deg * math.atan2(-mat[0][2], horiz_dist))
 */
  __pyx_v_horiz_dist = sqrt((pow(((__pyx_v_mat[0])[0]), 2.0) + pow(((__pyx_v_mat[0])[1]), 2.0)));

  /* "srctools/_math.pyx":315
 *     # https://github.com/ValveSoftware/source-sdk-2013/blob/master/sp/src/mathlib/mathlib_base.cpp#L208
 *     cdef double horiz_dist = math.sqrt(mat[0][0]**2 + mat[0][1]**2)
 *     if horiz_dist > 0.001:             # <<<<<<<<<<<<<<
 *         ang.x = norm_ang(rad_2_deg * math.atan2(-mat[0][2], horiz_dist))
 *         ang.y = norm_ang(rad_2_deg * math.atan2(mat[0][1], mat[0][0]))
 */
  __pyx_t_1 = ((__pyx_v_horiz_dist > 0.001) != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":316
 *     cdef double horiz_dist = math.sqrt(mat[0][0]**2 + mat[0][1]**2)
 *     if horiz_dist > 0.001:
 *         ang.x = norm_ang(rad_2_deg * math.atan2(-mat[0][2], horiz_dist))             # <<<<<<<<<<<<<<
 *         ang.y = norm_ang(rad_2_deg * math.atan2(mat[0][1], mat[0][0]))
 *         ang.z = norm_ang(rad_2_deg * math.atan2(mat[1][2], mat[2][2]))
 */
    __pyx_v_ang->x = __pyx_f_8srctools_5_math_norm_ang((57.29577951308232 * atan2((-((__pyx_v_mat[0])[2])), __pyx_v_horiz_dist)));

    /* "srctools/_math.pyx":317
 *     if horiz_dist > 0.001:
 *         ang.x = norm_ang(rad_2_deg * math.atan2(-mat[0][2], horiz_dist))
 *         ang.y = norm_ang(rad_2_deg * math.atan2(mat[0][1], mat[0][0]))             # <<<<<<<<<<<<<<
 *         ang.z = norm_ang(rad_2_deg * math.atan2(mat[1][2], mat[2][2]))
 *     else:
 */
    __pyx_v_ang->y = __pyx_f_8srctools_5_math_norm_ang((57.29577951308232 * atan2(((__pyx_v_mat[0])[1]), ((__pyx_v_mat[0])[0]))));

    /* "srctools/_math.pyx":318
 *         ang.x = norm_ang(rad_2_deg * math.atan2(-mat[0][2], horiz_dist))
 *         ang.y = norm_ang(rad_2_deg * math.atan2(mat[0][1], mat[0][0]))
 *         ang.z = norm_ang(rad_2_deg * math.atan2(mat[1][2], mat[2][2]))             # <<<<<<<<<<<<<<
 *     else:
 *         # Vertical, gimbal lock (yaw=roll)...
 */
    __pyx_v_ang->z = __pyx_f_8srctools_5_math_norm_ang((57.29577951308232 * atan2(((__pyx_v_mat[1])[2]), ((__pyx_v_mat[2])[2]))));

    /* "srctools/_math.pyx":315
 *     # https://github.com/ValveSoftware/source-sdk-2013/blob/master/sp/src/mathlib/mathlib_base.cpp#L208
 *     cdef double horiz_dist = math.sqrt(mat[0][0]**2 + mat[0][1]**2)
 *     if horiz_dist > 0.001:             # <<<<<<<<<<<<<<
 *         ang.x = norm_ang(rad_2_deg * math.atan2(-mat[0][2], horiz_dist))
 *         ang.y = norm_ang(rad_2_deg * math.atan2(mat[0][1], mat[0][0]))
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":321
 *     else:
 *         # Vertical, gimbal lock (yaw=roll)...
 *         ang.x = norm_ang(rad_2_deg * math.atan2(-mat[0][2], horiz_dist))             # <<<<<<<<<<<<<<
 *         ang.y = norm_ang(rad_2_deg * math.atan2(-mat[1][0], mat[1][1]))
 *         ang.z = 0.0  # Can't produce.
 */
  /*else*/ {
    __pyx_v_ang->x = __pyx_f_8srctools_5_math_norm_ang((57.29577951308232 * atan2((-((__pyx_v_mat[0])[2])), __pyx_v_horiz_dist)));

    /* "srctools/_math.pyx":322
 *         # Vertical, gimbal lock (yaw=roll)...
 *         ang.x = norm_ang(rad_2_deg * math.atan2(-mat[0][2], horiz_dist))
 *         ang.y = norm_ang(rad_2_deg * math.atan2(-mat[1][0], mat[1][1]))             # <<<<<<<<<<<<<<
 *         ang.z = 0.0  # Can't produce.
 * 
 */
    __pyx_v_ang->y = __pyx_f_8srctools_5_math_norm_ang((57.29577951308232 * atan2((-((__pyx_v_mat[1])[0])), ((__pyx_v_mat[1])[1]))));

    /* "srctools/_math.pyx":323
 *         ang.x = norm_ang(rad_2_deg * math.atan2(-mat[0][2], horiz_dist))
 *         ang.y = norm_ang(rad_2_deg * math.atan2(-mat[1][0], mat[1][1]))
 *         ang.z = 0.0  # Can't produce.             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_ang->z = 0.0;
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":312
 * 
 * 
 * cdef inline void _mat_to_angle(vec_t *ang, mat_t mat):             # <<<<<<<<<<<<<<
 *     # https://github.com/ValveSoftware/source-sdk-2013/blob/master/sp/src/mathlib/mathlib_base.cpp#L208
 *     cdef double horiz_dist = math.sqrt(mat[0][0]**2 + mat[0][1]**2)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "srctools/_math.pyx":326
 * 
 * 
 * cdef bint _mat_from_basis(mat_t mat, Vec x, Vec y, Vec z) except True:             # <<<<<<<<<<<<<<
 *     """Implement the shared parts of Matrix/Angle .from_basis()."""
 *     cdef vec_t res
 */

static int __pyx_f_8srctools_5_math__mat_from_basis(double (*__pyx_v_mat)[3], struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_x, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_y, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_z) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_res;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  struct __pyx_t_8srctools_5_math_vec_t __pyx_t_5;
  double *__pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mat_from_basis", 0);

  /* "srctools/_math.pyx":330
 *     cdef vec_t res
 * 
 *     if x is None:             # <<<<<<<<<<<<<<
 *         if y is not None and z is not None:
 *             _vec_cross(&res, &y.val, &z.val)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_x) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":331
 * 
 *     if x is None:
 *         if y is not None and z is not None:             # <<<<<<<<<<<<<<
 *             _vec_cross(&res, &y.val, &z.val)
 *         else:
 */
    __pyx_t_1 = (((PyObject *)__pyx_v_y) != Py_None);
    __pyx_t_3 = (__pyx_t_1 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (((PyObject *)__pyx_v_z) != Py_None);
    __pyx_t_1 = (__pyx_t_3 != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L5_bool_binop_done:;
    if (likely(__pyx_t_2)) {

      /* "srctools/_math.pyx":332
 *     if x is None:
 *         if y is not None and z is not None:
 *             _vec_cross(&res, &y.val, &z.val)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('At least two vectors must be provided!')
 */
      __pyx_f_8srctools_5_math__vec_cross((&__pyx_v_res), (&__pyx_v_y->val), (&__pyx_v_z->val));

      /* "srctools/_math.pyx":331
 * 
 *     if x is None:
 *         if y is not None and z is not None:             # <<<<<<<<<<<<<<
 *             _vec_cross(&res, &y.val, &z.val)
 *         else:
 */
      goto __pyx_L4;
    }

    /* "srctools/_math.pyx":334
 *             _vec_cross(&res, &y.val, &z.val)
 *         else:
 *             raise TypeError('At least two vectors must be provided!')             # <<<<<<<<<<<<<<
 *     else:
 *         res = x.val
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 334, __pyx_L1_error)
    }
    __pyx_L4:;

    /* "srctools/_math.pyx":330
 *     cdef vec_t res
 * 
 *     if x is None:             # <<<<<<<<<<<<<<
 *         if y is not None and z is not None:
 *             _vec_cross(&res, &y.val, &z.val)
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":336
 *             raise TypeError('At least two vectors must be provided!')
 *     else:
 *         res = x.val             # <<<<<<<<<<<<<<
 * 
 *     _vec_normalise(&res, &res)
 */
  /*else*/ {
    __pyx_t_5 = __pyx_v_x->val;
    __pyx_v_res = __pyx_t_5;
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":338
 *         res = x.val
 * 
 *     _vec_normalise(&res, &res)             # <<<<<<<<<<<<<<
 *     mat[0] = res.x, res.y, res.z
 * 
 */
  __pyx_f_8srctools_5_math__vec_normalise((&__pyx_v_res), (&__pyx_v_res));

  /* "srctools/_math.pyx":339
 * 
 *     _vec_normalise(&res, &res)
 *     mat[0] = res.x, res.y, res.z             # <<<<<<<<<<<<<<
 * 
 *     if y is None:
 */
  __pyx_t_6 = (__pyx_v_mat[0]);
  __pyx_t_7 = __pyx_v_res.x;
  __pyx_t_8 = __pyx_v_res.y;
  __pyx_t_9 = __pyx_v_res.z;
  (__pyx_t_6[0]) = __pyx_t_7;
  (__pyx_t_6[1]) = __pyx_t_8;
  (__pyx_t_6[2]) = __pyx_t_9;

  /* "srctools/_math.pyx":341
 *     mat[0] = res.x, res.y, res.z
 * 
 *     if y is None:             # <<<<<<<<<<<<<<
 *         if x is not None and z is not None:
 *             _vec_cross(&res, &z.val, &x.val)
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_y) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":342
 * 
 *     if y is None:
 *         if x is not None and z is not None:             # <<<<<<<<<<<<<<
 *             _vec_cross(&res, &z.val, &x.val)
 *         else:
 */
    __pyx_t_2 = (((PyObject *)__pyx_v_x) != Py_None);
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_3 = (((PyObject *)__pyx_v_z) != Py_None);
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L9_bool_binop_done:;
    if (likely(__pyx_t_1)) {

      /* "srctools/_math.pyx":343
 *     if y is None:
 *         if x is not None and z is not None:
 *             _vec_cross(&res, &z.val, &x.val)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('At least two vectors must be provided!')
 */
      __pyx_f_8srctools_5_math__vec_cross((&__pyx_v_res), (&__pyx_v_z->val), (&__pyx_v_x->val));

      /* "srctools/_math.pyx":342
 * 
 *     if y is None:
 *         if x is not None and z is not None:             # <<<<<<<<<<<<<<
 *             _vec_cross(&res, &z.val, &x.val)
 *         else:
 */
      goto __pyx_L8;
    }

    /* "srctools/_math.pyx":345
 *             _vec_cross(&res, &z.val, &x.val)
 *         else:
 *             raise TypeError('At least two vectors must be provided!')             # <<<<<<<<<<<<<<
 *     else:
 *         res = y.val
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 345, __pyx_L1_error)
    }
    __pyx_L8:;

    /* "srctools/_math.pyx":341
 *     mat[0] = res.x, res.y, res.z
 * 
 *     if y is None:             # <<<<<<<<<<<<<<
 *         if x is not None and z is not None:
 *             _vec_cross(&res, &z.val, &x.val)
 */
    goto __pyx_L7;
  }

  /* "srctools/_math.pyx":347
 *             raise TypeError('At least two vectors must be provided!')
 *     else:
 *         res = y.val             # <<<<<<<<<<<<<<
 * 
 *     _vec_normalise(&res, &res)
 */
  /*else*/ {
    __pyx_t_5 = __pyx_v_y->val;
    __pyx_v_res = __pyx_t_5;
  }
  __pyx_L7:;

  /* "srctools/_math.pyx":349
 *         res = y.val
 * 
 *     _vec_normalise(&res, &res)             # <<<<<<<<<<<<<<
 *     mat[1] = res.x, res.y, res.z
 * 
 */
  __pyx_f_8srctools_5_math__vec_normalise((&__pyx_v_res), (&__pyx_v_res));

  /* "srctools/_math.pyx":350
 * 
 *     _vec_normalise(&res, &res)
 *     mat[1] = res.x, res.y, res.z             # <<<<<<<<<<<<<<
 * 
 *     if z is None:
 */
  __pyx_t_6 = (__pyx_v_mat[1]);
  __pyx_t_9 = __pyx_v_res.x;
  __pyx_t_8 = __pyx_v_res.y;
  __pyx_t_7 = __pyx_v_res.z;
  (__pyx_t_6[0]) = __pyx_t_9;
  (__pyx_t_6[1]) = __pyx_t_8;
  (__pyx_t_6[2]) = __pyx_t_7;

  /* "srctools/_math.pyx":352
 *     mat[1] = res.x, res.y, res.z
 * 
 *     if z is None:             # <<<<<<<<<<<<<<
 *         if x is not None and y is not None:
 *             _vec_cross(&res, &x.val, &y.val)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_z) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":353
 * 
 *     if z is None:
 *         if x is not None and y is not None:             # <<<<<<<<<<<<<<
 *             _vec_cross(&res, &x.val, &y.val)
 *         else:
 */
    __pyx_t_1 = (((PyObject *)__pyx_v_x) != Py_None);
    __pyx_t_3 = (__pyx_t_1 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_3 = (((PyObject *)__pyx_v_y) != Py_None);
    __pyx_t_1 = (__pyx_t_3 != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L13_bool_binop_done:;
    if (likely(__pyx_t_2)) {

      /* "srctools/_math.pyx":354
 *     if z is None:
 *         if x is not None and y is not None:
 *             _vec_cross(&res, &x.val, &y.val)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('At least two vectors must be provided!')
 */
      __pyx_f_8srctools_5_math__vec_cross((&__pyx_v_res), (&__pyx_v_x->val), (&__pyx_v_y->val));

      /* "srctools/_math.pyx":353
 * 
 *     if z is None:
 *         if x is not None and y is not None:             # <<<<<<<<<<<<<<
 *             _vec_cross(&res, &x.val, &y.val)
 *         else:
 */
      goto __pyx_L12;
    }

    /* "srctools/_math.pyx":356
 *             _vec_cross(&res, &x.val, &y.val)
 *         else:
 *             raise TypeError('At least two vectors must be provided!')             # <<<<<<<<<<<<<<
 *     else:
 *         res = z.val
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 356, __pyx_L1_error)
    }
    __pyx_L12:;

    /* "srctools/_math.pyx":352
 *     mat[1] = res.x, res.y, res.z
 * 
 *     if z is None:             # <<<<<<<<<<<<<<
 *         if x is not None and y is not None:
 *             _vec_cross(&res, &x.val, &y.val)
 */
    goto __pyx_L11;
  }

  /* "srctools/_math.pyx":358
 *             raise TypeError('At least two vectors must be provided!')
 *     else:
 *         res = z.val             # <<<<<<<<<<<<<<
 * 
 *     _vec_normalise(&res, &res)
 */
  /*else*/ {
    __pyx_t_5 = __pyx_v_z->val;
    __pyx_v_res = __pyx_t_5;
  }
  __pyx_L11:;

  /* "srctools/_math.pyx":360
 *         res = z.val
 * 
 *     _vec_normalise(&res, &res)             # <<<<<<<<<<<<<<
 *     mat[2] = res.x, res.y, res.z
 *     return False
 */
  __pyx_f_8srctools_5_math__vec_normalise((&__pyx_v_res), (&__pyx_v_res));

  /* "srctools/_math.pyx":361
 * 
 *     _vec_normalise(&res, &res)
 *     mat[2] = res.x, res.y, res.z             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
  __pyx_t_6 = (__pyx_v_mat[2]);
  __pyx_t_7 = __pyx_v_res.x;
  __pyx_t_8 = __pyx_v_res.y;
  __pyx_t_9 = __pyx_v_res.z;
  (__pyx_t_6[0]) = __pyx_t_7;
  (__pyx_t_6[1]) = __pyx_t_8;
  (__pyx_t_6[2]) = __pyx_t_9;

  /* "srctools/_math.pyx":362
 *     _vec_normalise(&res, &res)
 *     mat[2] = res.x, res.y, res.z
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":326
 * 
 * 
 * cdef bint _mat_from_basis(mat_t mat, Vec x, Vec y, Vec z) except True:             # <<<<<<<<<<<<<<
 *     """Implement the shared parts of Matrix/Angle .from_basis()."""
 *     cdef vec_t res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("srctools._math._mat_from_basis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":365
 * 
 * 
 * cdef inline void _mat_identity(mat_t matrix):             # <<<<<<<<<<<<<<
 *     """Set the matrix to the identity transform."""
 *     memset(matrix, 0, sizeof(mat_t))
 */

static CYTHON_INLINE void __pyx_f_8srctools_5_math__mat_identity(double (*__pyx_v_matrix)[3]) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_mat_identity", 0);

  /* "srctools/_math.pyx":367
 * cdef inline void _mat_identity(mat_t matrix):
 *     """Set the matrix to the identity transform."""
 *     memset(matrix, 0, sizeof(mat_t))             # <<<<<<<<<<<<<<
 *     matrix[0][0] = 1.0
 *     matrix[1][1] = 1.0
 */
  (void)(memset(__pyx_v_matrix, 0, (sizeof(__pyx_t_8srctools_5_math_mat_t))));

  /* "srctools/_math.pyx":368
 *     """Set the matrix to the identity transform."""
 *     memset(matrix, 0, sizeof(mat_t))
 *     matrix[0][0] = 1.0             # <<<<<<<<<<<<<<
 *     matrix[1][1] = 1.0
 *     matrix[2][2] = 1.0
 */
  ((__pyx_v_matrix[0])[0]) = 1.0;

  /* "srctools/_math.pyx":369
 *     memset(matrix, 0, sizeof(mat_t))
 *     matrix[0][0] = 1.0
 *     matrix[1][1] = 1.0             # <<<<<<<<<<<<<<
 *     matrix[2][2] = 1.0
 * 
 */
  ((__pyx_v_matrix[1])[1]) = 1.0;

  /* "srctools/_math.pyx":370
 *     matrix[0][0] = 1.0
 *     matrix[1][1] = 1.0
 *     matrix[2][2] = 1.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((__pyx_v_matrix[2])[2]) = 1.0;

  /* "srctools/_math.pyx":365
 * 
 * 
 * cdef inline void _mat_identity(mat_t matrix):             # <<<<<<<<<<<<<<
 *     """Set the matrix to the identity transform."""
 *     memset(matrix, 0, sizeof(mat_t))
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "srctools/_math.pyx":373
 * 
 * 
 * cdef bint _conv_matrix(mat_t result, object value) except True:             # <<<<<<<<<<<<<<
 *     """Convert various values to a rotation matrix.
 * 
 */

static int __pyx_f_8srctools_5_math__conv_matrix(double (*__pyx_v_result)[3], PyObject *__pyx_v_value) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_ang;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_conv_matrix", 0);

  /* "srctools/_math.pyx":379
 *     """
 *     cdef vec_t ang
 *     if value is None:             # <<<<<<<<<<<<<<
 *         _mat_identity(result)
 *     elif isinstance(value, Matrix):
 */
  __pyx_t_1 = (__pyx_v_value == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":380
 *     cdef vec_t ang
 *     if value is None:
 *         _mat_identity(result)             # <<<<<<<<<<<<<<
 *     elif isinstance(value, Matrix):
 *         memcpy(result, (<Matrix>value).mat, sizeof(mat_t))
 */
    __pyx_f_8srctools_5_math__mat_identity(__pyx_v_result);

    /* "srctools/_math.pyx":379
 *     """
 *     cdef vec_t ang
 *     if value is None:             # <<<<<<<<<<<<<<
 *         _mat_identity(result)
 *     elif isinstance(value, Matrix):
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":381
 *     if value is None:
 *         _mat_identity(result)
 *     elif isinstance(value, Matrix):             # <<<<<<<<<<<<<<
 *         memcpy(result, (<Matrix>value).mat, sizeof(mat_t))
 *     elif isinstance(value, Angle):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_8srctools_5_math_Matrix); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":382
 *         _mat_identity(result)
 *     elif isinstance(value, Matrix):
 *         memcpy(result, (<Matrix>value).mat, sizeof(mat_t))             # <<<<<<<<<<<<<<
 *     elif isinstance(value, Angle):
 *         _mat_from_angle(result, &(<Angle>value).val)
 */
    (void)(memcpy(__pyx_v_result, ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_value)->mat, (sizeof(__pyx_t_8srctools_5_math_mat_t))));

    /* "srctools/_math.pyx":381
 *     if value is None:
 *         _mat_identity(result)
 *     elif isinstance(value, Matrix):             # <<<<<<<<<<<<<<
 *         memcpy(result, (<Matrix>value).mat, sizeof(mat_t))
 *     elif isinstance(value, Angle):
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":383
 *     elif isinstance(value, Matrix):
 *         memcpy(result, (<Matrix>value).mat, sizeof(mat_t))
 *     elif isinstance(value, Angle):             # <<<<<<<<<<<<<<
 *         _mat_from_angle(result, &(<Angle>value).val)
 *     elif isinstance(value, Vec):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_8srctools_5_math_Angle); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":384
 *         memcpy(result, (<Matrix>value).mat, sizeof(mat_t))
 *     elif isinstance(value, Angle):
 *         _mat_from_angle(result, &(<Angle>value).val)             # <<<<<<<<<<<<<<
 *     elif isinstance(value, Vec):
 *         _mat_from_angle(result, &(<Vec>value).val)
 */
    __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_result, (&((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_value)->val));

    /* "srctools/_math.pyx":383
 *     elif isinstance(value, Matrix):
 *         memcpy(result, (<Matrix>value).mat, sizeof(mat_t))
 *     elif isinstance(value, Angle):             # <<<<<<<<<<<<<<
 *         _mat_from_angle(result, &(<Angle>value).val)
 *     elif isinstance(value, Vec):
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":385
 *     elif isinstance(value, Angle):
 *         _mat_from_angle(result, &(<Angle>value).val)
 *     elif isinstance(value, Vec):             # <<<<<<<<<<<<<<
 *         _mat_from_angle(result, &(<Vec>value).val)
 *     else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":386
 *         _mat_from_angle(result, &(<Angle>value).val)
 *     elif isinstance(value, Vec):
 *         _mat_from_angle(result, &(<Vec>value).val)             # <<<<<<<<<<<<<<
 *     else:
 *         [ang.x, ang.y, ang.z] = value
 */
    __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_result, (&((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_value)->val));

    /* "srctools/_math.pyx":385
 *     elif isinstance(value, Angle):
 *         _mat_from_angle(result, &(<Angle>value).val)
 *     elif isinstance(value, Vec):             # <<<<<<<<<<<<<<
 *         _mat_from_angle(result, &(<Vec>value).val)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":388
 *         _mat_from_angle(result, &(<Vec>value).val)
 *     else:
 *         [ang.x, ang.y, ang.z] = value             # <<<<<<<<<<<<<<
 *         _mat_from_angle(result, &ang)
 *     return False
 */
  /*else*/ {
    if ((likely(PyTuple_CheckExact(__pyx_v_value))) || (PyList_CheckExact(__pyx_v_value))) {
      PyObject* sequence = __pyx_v_value;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 388, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_v_value); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 2; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 388, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 388, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 388, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 388, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ang.x = __pyx_t_8;
    __pyx_v_ang.y = __pyx_t_9;
    __pyx_v_ang.z = __pyx_t_10;

    /* "srctools/_math.pyx":389
 *     else:
 *         [ang.x, ang.y, ang.z] = value
 *         _mat_from_angle(result, &ang)             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
    __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_result, (&__pyx_v_ang));
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":390
 *         [ang.x, ang.y, ang.z] = value
 *         _mat_from_angle(result, &ang)
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":373
 * 
 * 
 * cdef bint _conv_matrix(mat_t result, object value) except True:             # <<<<<<<<<<<<<<
 *     """Convert various values to a rotation matrix.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("srctools._math._conv_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":393
 * 
 * 
 * def to_matrix(value) -> Matrix:             # <<<<<<<<<<<<<<
 *     """Convert various values to a rotation matrix.
 * 
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_5to_matrix(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_8srctools_5_math_4to_matrix[] = "to_matrix(value) -> Matrix\nConvert various values to a rotation matrix.\n\n    Vectors will be treated as angles, and None as the identity.\n    ";
static PyMethodDef __pyx_mdef_8srctools_5_math_5to_matrix = {"to_matrix", (PyCFunction)__pyx_pw_8srctools_5_math_5to_matrix, METH_O, __pyx_doc_8srctools_5_math_4to_matrix};
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_5to_matrix(PyObject *__pyx_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_matrix (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_4to_matrix(__pyx_self, ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_4to_matrix(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_result = 0;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_matrix", 0);

  /* "srctools/_math.pyx":398
 *     Vectors will be treated as angles, and None as the identity.
 *     """
 *     cdef Matrix result = Matrix.__new__(Matrix)             # <<<<<<<<<<<<<<
 *     _conv_matrix(result.mat, value)
 *     return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Matrix(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Matrix), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":399
 *     """
 *     cdef Matrix result = Matrix.__new__(Matrix)
 *     _conv_matrix(result.mat, value)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_2 = __pyx_f_8srctools_5_math__conv_matrix(__pyx_v_result->mat, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)1))) __PYX_ERR(0, 399, __pyx_L1_error)

  /* "srctools/_math.pyx":400
 *     cdef Matrix result = Matrix.__new__(Matrix)
 *     _conv_matrix(result.mat, value)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "srctools/_math.pyx":393
 * 
 * 
 * def to_matrix(value) -> Matrix:             # <<<<<<<<<<<<<<
 *     """Convert various values to a rotation matrix.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.to_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":410
 *     cdef uint_fast8_t index
 * 
 *     def __cinit__(self, Vec vec not None):             # <<<<<<<<<<<<<<
 *         self.vec = vec
 *         self.index = 0
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_7VecIter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8srctools_5_math_7VecIter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vec,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 410, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 410, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.VecIter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vec), __pyx_ptype_8srctools_5_math_Vec, 0, "vec", 0))) __PYX_ERR(0, 410, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_7VecIter___cinit__(((struct __pyx_obj_8srctools_5_math_VecIter *)__pyx_v_self), __pyx_v_vec);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_7VecIter___cinit__(struct __pyx_obj_8srctools_5_math_VecIter *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "srctools/_math.pyx":411
 * 
 *     def __cinit__(self, Vec vec not None):
 *         self.vec = vec             # <<<<<<<<<<<<<<
 *         self.index = 0
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_vec));
  __Pyx_GOTREF(__pyx_v_self->vec);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->vec));
  __pyx_v_self->vec = __pyx_v_vec;

  /* "srctools/_math.pyx":412
 *     def __cinit__(self, Vec vec not None):
 *         self.vec = vec
 *         self.index = 0             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self) -> VecIter:
 */
  __pyx_v_self->index = 0;

  /* "srctools/_math.pyx":410
 *     cdef uint_fast8_t index
 * 
 *     def __cinit__(self, Vec vec not None):             # <<<<<<<<<<<<<<
 *         self.vec = vec
 *         self.index = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":414
 *         self.index = 0
 * 
 *     def __iter__(self) -> VecIter:             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_7VecIter_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_7VecIter_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_7VecIter_2__iter__(((struct __pyx_obj_8srctools_5_math_VecIter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_7VecIter_2__iter__(struct __pyx_obj_8srctools_5_math_VecIter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "srctools/_math.pyx":415
 * 
 *     def __iter__(self) -> VecIter:
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self) -> float:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "srctools/_math.pyx":414
 *         self.index = 0
 * 
 *     def __iter__(self) -> VecIter:             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":417
 *         return self
 * 
 *     def __next__(self) -> float:             # <<<<<<<<<<<<<<
 *         if self.index == 3:
 *             raise StopIteration
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_7VecIter_5__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_7VecIter_5__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_7VecIter_4__next__(((struct __pyx_obj_8srctools_5_math_VecIter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_7VecIter_4__next__(struct __pyx_obj_8srctools_5_math_VecIter *__pyx_v_self) {
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "srctools/_math.pyx":418
 * 
 *     def __next__(self) -> float:
 *         if self.index == 3:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         self.index += 1
 */
  __pyx_t_1 = ((__pyx_v_self->index == 3) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "srctools/_math.pyx":419
 *     def __next__(self) -> float:
 *         if self.index == 3:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         self.index += 1
 *         if self.index == 1:
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(0, 419, __pyx_L1_error)

    /* "srctools/_math.pyx":418
 * 
 *     def __next__(self) -> float:
 *         if self.index == 3:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         self.index += 1
 */
  }

  /* "srctools/_math.pyx":420
 *         if self.index == 3:
 *             raise StopIteration
 *         self.index += 1             # <<<<<<<<<<<<<<
 *         if self.index == 1:
 *             return self.vec.val.x
 */
  __pyx_v_self->index = (__pyx_v_self->index + 1);

  /* "srctools/_math.pyx":421
 *             raise StopIteration
 *         self.index += 1
 *         if self.index == 1:             # <<<<<<<<<<<<<<
 *             return self.vec.val.x
 *         elif self.index == 2:
 */
  switch (__pyx_v_self->index) {
    case 1:

    /* "srctools/_math.pyx":422
 *         self.index += 1
 *         if self.index == 1:
 *             return self.vec.val.x             # <<<<<<<<<<<<<<
 *         elif self.index == 2:
 *             return self.vec.val.y
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->vec->val.x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":421
 *             raise StopIteration
 *         self.index += 1
 *         if self.index == 1:             # <<<<<<<<<<<<<<
 *             return self.vec.val.x
 *         elif self.index == 2:
 */
    break;
    case 2:

    /* "srctools/_math.pyx":424
 *             return self.vec.val.x
 *         elif self.index == 2:
 *             return self.vec.val.y             # <<<<<<<<<<<<<<
 *         elif self.index == 3:
 *             # Drop our reference.
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->vec->val.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":423
 *         if self.index == 1:
 *             return self.vec.val.x
 *         elif self.index == 2:             # <<<<<<<<<<<<<<
 *             return self.vec.val.y
 *         elif self.index == 3:
 */
    break;
    case 3:

    /* "srctools/_math.pyx":427
 *         elif self.index == 3:
 *             # Drop our reference.
 *             ret = self.vec.val.z             # <<<<<<<<<<<<<<
 *             self.vec = None
 *             return ret
 */
    __pyx_t_3 = __pyx_v_self->vec->val.z;
    __pyx_v_ret = __pyx_t_3;

    /* "srctools/_math.pyx":428
 *             # Drop our reference.
 *             ret = self.vec.val.z
 *             self.vec = None             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->vec);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->vec));
    __pyx_v_self->vec = ((struct __pyx_obj_8srctools_5_math_Vec *)Py_None);

    /* "srctools/_math.pyx":429
 *             ret = self.vec.val.z
 *             self.vec = None
 *             return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":425
 *         elif self.index == 2:
 *             return self.vec.val.y
 *         elif self.index == 3:             # <<<<<<<<<<<<<<
 *             # Drop our reference.
 *             ret = self.vec.val.z
 */
    break;
    default: break;
  }

  /* "srctools/_math.pyx":417
 *         return self
 * 
 *     def __next__(self) -> float:             # <<<<<<<<<<<<<<
 *         if self.index == 3:
 *             raise StopIteration
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srctools._math.VecIter.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":451
 *         long stride
 * 
 *     def __iter__(self) -> VecIterGrid:             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_11VecIterGrid_1__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_11VecIterGrid_1__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_11VecIterGrid___iter__(((struct __pyx_obj_8srctools_5_math_VecIterGrid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_11VecIterGrid___iter__(struct __pyx_obj_8srctools_5_math_VecIterGrid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "srctools/_math.pyx":452
 * 
 *     def __iter__(self) -> VecIterGrid:
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self) -> Vec:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "srctools/_math.pyx":451
 *         long stride
 * 
 *     def __iter__(self) -> VecIterGrid:             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":454
 *         return self
 * 
 *     def __next__(self) -> Vec:             # <<<<<<<<<<<<<<
 *         cdef Vec vec
 *         if self.cur_x > self.stop_x:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_11VecIterGrid_3__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_11VecIterGrid_3__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_11VecIterGrid_2__next__(((struct __pyx_obj_8srctools_5_math_VecIterGrid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_11VecIterGrid_2__next__(struct __pyx_obj_8srctools_5_math_VecIterGrid *__pyx_v_self) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "srctools/_math.pyx":456
 *     def __next__(self) -> Vec:
 *         cdef Vec vec
 *         if self.cur_x > self.stop_x:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->cur_x > __pyx_v_self->stop_x) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "srctools/_math.pyx":457
 *         cdef Vec vec
 *         if self.cur_x > self.stop_x:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *         vec =_vector(self.cur_x, self.cur_y, self.cur_z)
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(0, 457, __pyx_L1_error)

    /* "srctools/_math.pyx":456
 *     def __next__(self) -> Vec:
 *         cdef Vec vec
 *         if self.cur_x > self.stop_x:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 * 
 */
  }

  /* "srctools/_math.pyx":459
 *             raise StopIteration
 * 
 *         vec =_vector(self.cur_x, self.cur_y, self.cur_z)             # <<<<<<<<<<<<<<
 * 
 *         self.cur_z += self.stride
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_8srctools_5_math__vector(__pyx_v_self->cur_x, __pyx_v_self->cur_y, __pyx_v_self->cur_z)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "srctools/_math.pyx":461
 *         vec =_vector(self.cur_x, self.cur_y, self.cur_z)
 * 
 *         self.cur_z += self.stride             # <<<<<<<<<<<<<<
 *         if self.cur_z > self.stop_z:
 *             self.cur_z = self.start_z
 */
  __pyx_v_self->cur_z = (__pyx_v_self->cur_z + __pyx_v_self->stride);

  /* "srctools/_math.pyx":462
 * 
 *         self.cur_z += self.stride
 *         if self.cur_z > self.stop_z:             # <<<<<<<<<<<<<<
 *             self.cur_z = self.start_z
 *             self.cur_y += self.stride
 */
  __pyx_t_1 = ((__pyx_v_self->cur_z > __pyx_v_self->stop_z) != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":463
 *         self.cur_z += self.stride
 *         if self.cur_z > self.stop_z:
 *             self.cur_z = self.start_z             # <<<<<<<<<<<<<<
 *             self.cur_y += self.stride
 *             if self.cur_y > self.stop_y:
 */
    __pyx_t_3 = __pyx_v_self->start_z;
    __pyx_v_self->cur_z = __pyx_t_3;

    /* "srctools/_math.pyx":464
 *         if self.cur_z > self.stop_z:
 *             self.cur_z = self.start_z
 *             self.cur_y += self.stride             # <<<<<<<<<<<<<<
 *             if self.cur_y > self.stop_y:
 *                 self.cur_y = self.start_y
 */
    __pyx_v_self->cur_y = (__pyx_v_self->cur_y + __pyx_v_self->stride);

    /* "srctools/_math.pyx":465
 *             self.cur_z = self.start_z
 *             self.cur_y += self.stride
 *             if self.cur_y > self.stop_y:             # <<<<<<<<<<<<<<
 *                 self.cur_y = self.start_y
 *                 self.cur_x += self.stride
 */
    __pyx_t_1 = ((__pyx_v_self->cur_y > __pyx_v_self->stop_y) != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":466
 *             self.cur_y += self.stride
 *             if self.cur_y > self.stop_y:
 *                 self.cur_y = self.start_y             # <<<<<<<<<<<<<<
 *                 self.cur_x += self.stride
 *                 # If greater, next raises StopIteration.
 */
      __pyx_t_3 = __pyx_v_self->start_y;
      __pyx_v_self->cur_y = __pyx_t_3;

      /* "srctools/_math.pyx":467
 *             if self.cur_y > self.stop_y:
 *                 self.cur_y = self.start_y
 *                 self.cur_x += self.stride             # <<<<<<<<<<<<<<
 *                 # If greater, next raises StopIteration.
 * 
 */
      __pyx_v_self->cur_x = (__pyx_v_self->cur_x + __pyx_v_self->stride);

      /* "srctools/_math.pyx":465
 *             self.cur_z = self.start_z
 *             self.cur_y += self.stride
 *             if self.cur_y > self.stop_y:             # <<<<<<<<<<<<<<
 *                 self.cur_y = self.start_y
 *                 self.cur_x += self.stride
 */
    }

    /* "srctools/_math.pyx":462
 * 
 *         self.cur_z += self.stride
 *         if self.cur_z > self.stop_z:             # <<<<<<<<<<<<<<
 *             self.cur_z = self.start_z
 *             self.cur_y += self.stride
 */
  }

  /* "srctools/_math.pyx":470
 *                 # If greater, next raises StopIteration.
 * 
 *         return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __pyx_r = ((PyObject *)__pyx_v_vec);
  goto __pyx_L0;

  /* "srctools/_math.pyx":454
 *         return self
 * 
 *     def __next__(self) -> Vec:             # <<<<<<<<<<<<<<
 *         cdef Vec vec
 *         if self.cur_x > self.stop_x:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srctools._math.VecIterGrid.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":485
 *         vec_t end
 * 
 *     def __iter__(self) -> VecIterLine:             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_11VecIterLine_1__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_11VecIterLine_1__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_11VecIterLine___iter__(((struct __pyx_obj_8srctools_5_math_VecIterLine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_11VecIterLine___iter__(struct __pyx_obj_8srctools_5_math_VecIterLine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "srctools/_math.pyx":486
 * 
 *     def __iter__(self) -> VecIterLine:
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self) -> Vec:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "srctools/_math.pyx":485
 *         vec_t end
 * 
 *     def __iter__(self) -> VecIterLine:             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":488
 *         return self
 * 
 *     def __next__(self) -> Vec:             # <<<<<<<<<<<<<<
 *         cdef Vec vec
 *         if self.cur_off < 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_11VecIterLine_3__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_11VecIterLine_3__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_11VecIterLine_2__next__(((struct __pyx_obj_8srctools_5_math_VecIterLine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_11VecIterLine_2__next__(struct __pyx_obj_8srctools_5_math_VecIterLine *__pyx_v_self) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "srctools/_math.pyx":490
 *     def __next__(self) -> Vec:
 *         cdef Vec vec
 *         if self.cur_off < 0:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->cur_off < 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "srctools/_math.pyx":491
 *         cdef Vec vec
 *         if self.cur_off < 0:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *         if self.cur_off >= self.max:
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(0, 491, __pyx_L1_error)

    /* "srctools/_math.pyx":490
 *     def __next__(self) -> Vec:
 *         cdef Vec vec
 *         if self.cur_off < 0:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 * 
 */
  }

  /* "srctools/_math.pyx":493
 *             raise StopIteration
 * 
 *         if self.cur_off >= self.max:             # <<<<<<<<<<<<<<
 *             # Be exact here.
 *             vec = _vector(self.end.x, self.end.y, self.end.z)
 */
  __pyx_t_1 = ((__pyx_v_self->cur_off >= __pyx_v_self->max) != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":495
 *         if self.cur_off >= self.max:
 *             # Be exact here.
 *             vec = _vector(self.end.x, self.end.y, self.end.z)             # <<<<<<<<<<<<<<
 *             self.cur_off = -1
 *         else:
 */
    __pyx_t_2 = ((PyObject *)__pyx_f_8srctools_5_math__vector(__pyx_v_self->end.x, __pyx_v_self->end.y, __pyx_v_self->end.z)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "srctools/_math.pyx":496
 *             # Be exact here.
 *             vec = _vector(self.end.x, self.end.y, self.end.z)
 *             self.cur_off = -1             # <<<<<<<<<<<<<<
 *         else:
 *             vec =_vector(
 */
    __pyx_v_self->cur_off = -1L;

    /* "srctools/_math.pyx":493
 *             raise StopIteration
 * 
 *         if self.cur_off >= self.max:             # <<<<<<<<<<<<<<
 *             # Be exact here.
 *             vec = _vector(self.end.x, self.end.y, self.end.z)
 */
    goto __pyx_L4;
  }

  /* "srctools/_math.pyx":498
 *             self.cur_off = -1
 *         else:
 *             vec =_vector(             # <<<<<<<<<<<<<<
 *                 self.start.x + self.cur_off * self.diff.x,
 *                 self.start.y + self.cur_off * self.diff.y,
 */
  /*else*/ {

    /* "srctools/_math.pyx":501
 *                 self.start.x + self.cur_off * self.diff.x,
 *                 self.start.y + self.cur_off * self.diff.y,
 *                 self.start.z + self.cur_off * self.diff.z,             # <<<<<<<<<<<<<<
 *             )
 *             self.cur_off += self.stride
 */
    __pyx_t_2 = ((PyObject *)__pyx_f_8srctools_5_math__vector((__pyx_v_self->start.x + (__pyx_v_self->cur_off * __pyx_v_self->diff.x)), (__pyx_v_self->start.y + (__pyx_v_self->cur_off * __pyx_v_self->diff.y)), (__pyx_v_self->start.z + (__pyx_v_self->cur_off * __pyx_v_self->diff.z)))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "srctools/_math.pyx":503
 *                 self.start.z + self.cur_off * self.diff.z,
 *             )
 *             self.cur_off += self.stride             # <<<<<<<<<<<<<<
 * 
 *         return vec
 */
    __pyx_v_self->cur_off = (__pyx_v_self->cur_off + __pyx_v_self->stride);
  }
  __pyx_L4:;

  /* "srctools/_math.pyx":505
 *             self.cur_off += self.stride
 * 
 *         return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __pyx_r = ((PyObject *)__pyx_v_vec);
  goto __pyx_L0;

  /* "srctools/_math.pyx":488
 *         return self
 * 
 *     def __next__(self) -> Vec:             # <<<<<<<<<<<<<<
 *         cdef Vec vec
 *         if self.cur_off < 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srctools._math.VecIterLine.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":515
 *     cdef uint_fast8_t index
 * 
 *     def __cinit__(self, Angle ang not None):             # <<<<<<<<<<<<<<
 *         self.ang = ang
 *         self.index = 0
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_9AngleIter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8srctools_5_math_9AngleIter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ang,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ang)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 515, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_ang = ((struct __pyx_obj_8srctools_5_math_Angle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 515, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.AngleIter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ang), __pyx_ptype_8srctools_5_math_Angle, 0, "ang", 0))) __PYX_ERR(0, 515, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_9AngleIter___cinit__(((struct __pyx_obj_8srctools_5_math_AngleIter *)__pyx_v_self), __pyx_v_ang);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_9AngleIter___cinit__(struct __pyx_obj_8srctools_5_math_AngleIter *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "srctools/_math.pyx":516
 * 
 *     def __cinit__(self, Angle ang not None):
 *         self.ang = ang             # <<<<<<<<<<<<<<
 *         self.index = 0
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_ang));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_ang));
  __Pyx_GOTREF(__pyx_v_self->ang);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang));
  __pyx_v_self->ang = __pyx_v_ang;

  /* "srctools/_math.pyx":517
 *     def __cinit__(self, Angle ang not None):
 *         self.ang = ang
 *         self.index = 0             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self) -> AngleIter:
 */
  __pyx_v_self->index = 0;

  /* "srctools/_math.pyx":515
 *     cdef uint_fast8_t index
 * 
 *     def __cinit__(self, Angle ang not None):             # <<<<<<<<<<<<<<
 *         self.ang = ang
 *         self.index = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":519
 *         self.index = 0
 * 
 *     def __iter__(self) -> AngleIter:             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_9AngleIter_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_9AngleIter_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_9AngleIter_2__iter__(((struct __pyx_obj_8srctools_5_math_AngleIter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_9AngleIter_2__iter__(struct __pyx_obj_8srctools_5_math_AngleIter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "srctools/_math.pyx":520
 * 
 *     def __iter__(self) -> AngleIter:
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self) -> Angle:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "srctools/_math.pyx":519
 *         self.index = 0
 * 
 *     def __iter__(self) -> AngleIter:             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":522
 *         return self
 * 
 *     def __next__(self) -> Angle:             # <<<<<<<<<<<<<<
 *         if self.index == 3:
 *             raise StopIteration
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_9AngleIter_5__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_9AngleIter_5__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_9AngleIter_4__next__(((struct __pyx_obj_8srctools_5_math_AngleIter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_9AngleIter_4__next__(struct __pyx_obj_8srctools_5_math_AngleIter *__pyx_v_self) {
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "srctools/_math.pyx":523
 * 
 *     def __next__(self) -> Angle:
 *         if self.index == 3:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         self.index += 1
 */
  __pyx_t_1 = ((__pyx_v_self->index == 3) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "srctools/_math.pyx":524
 *     def __next__(self) -> Angle:
 *         if self.index == 3:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         self.index += 1
 *         if self.index == 1:
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(0, 524, __pyx_L1_error)

    /* "srctools/_math.pyx":523
 * 
 *     def __next__(self) -> Angle:
 *         if self.index == 3:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         self.index += 1
 */
  }

  /* "srctools/_math.pyx":525
 *         if self.index == 3:
 *             raise StopIteration
 *         self.index += 1             # <<<<<<<<<<<<<<
 *         if self.index == 1:
 *             return self.ang.val.x
 */
  __pyx_v_self->index = (__pyx_v_self->index + 1);

  /* "srctools/_math.pyx":526
 *             raise StopIteration
 *         self.index += 1
 *         if self.index == 1:             # <<<<<<<<<<<<<<
 *             return self.ang.val.x
 *         elif self.index == 2:
 */
  switch (__pyx_v_self->index) {
    case 1:

    /* "srctools/_math.pyx":527
 *         self.index += 1
 *         if self.index == 1:
 *             return self.ang.val.x             # <<<<<<<<<<<<<<
 *         elif self.index == 2:
 *             return self.ang.val.y
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->ang->val.x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":526
 *             raise StopIteration
 *         self.index += 1
 *         if self.index == 1:             # <<<<<<<<<<<<<<
 *             return self.ang.val.x
 *         elif self.index == 2:
 */
    break;
    case 2:

    /* "srctools/_math.pyx":529
 *             return self.ang.val.x
 *         elif self.index == 2:
 *             return self.ang.val.y             # <<<<<<<<<<<<<<
 *         elif self.index == 3:
 *             # Drop our reference.
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->ang->val.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":528
 *         if self.index == 1:
 *             return self.ang.val.x
 *         elif self.index == 2:             # <<<<<<<<<<<<<<
 *             return self.ang.val.y
 *         elif self.index == 3:
 */
    break;
    case 3:

    /* "srctools/_math.pyx":532
 *         elif self.index == 3:
 *             # Drop our reference.
 *             ret = self.ang.val.z             # <<<<<<<<<<<<<<
 *             self.ang = None
 *             return ret
 */
    __pyx_t_3 = __pyx_v_self->ang->val.z;
    __pyx_v_ret = __pyx_t_3;

    /* "srctools/_math.pyx":533
 *             # Drop our reference.
 *             ret = self.ang.val.z
 *             self.ang = None             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->ang);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->ang));
    __pyx_v_self->ang = ((struct __pyx_obj_8srctools_5_math_Angle *)Py_None);

    /* "srctools/_math.pyx":534
 *             ret = self.ang.val.z
 *             self.ang = None
 *             return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":530
 *         elif self.index == 2:
 *             return self.ang.val.y
 *         elif self.index == 3:             # <<<<<<<<<<<<<<
 *             # Drop our reference.
 *             ret = self.ang.val.z
 */
    break;
    default: break;
  }

  /* "srctools/_math.pyx":522
 *         return self
 * 
 *     def __next__(self) -> Angle:             # <<<<<<<<<<<<<<
 *         if self.index == 3:
 *             raise StopIteration
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srctools._math.AngleIter.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":543
 *     cdef Matrix mat
 *     cdef Vec vec
 *     def __cinit__(self, Vec vec not None):             # <<<<<<<<<<<<<<
 *         self.vec = vec
 *         self.mat = None
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_12VecTransform_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8srctools_5_math_12VecTransform_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vec,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 543, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 543, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.VecTransform.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vec), __pyx_ptype_8srctools_5_math_Vec, 0, "vec", 0))) __PYX_ERR(0, 543, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_12VecTransform___cinit__(((struct __pyx_obj_8srctools_5_math_VecTransform *)__pyx_v_self), __pyx_v_vec);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_12VecTransform___cinit__(struct __pyx_obj_8srctools_5_math_VecTransform *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "srctools/_math.pyx":544
 *     cdef Vec vec
 *     def __cinit__(self, Vec vec not None):
 *         self.vec = vec             # <<<<<<<<<<<<<<
 *         self.mat = None
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_vec));
  __Pyx_GOTREF(__pyx_v_self->vec);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->vec));
  __pyx_v_self->vec = __pyx_v_vec;

  /* "srctools/_math.pyx":545
 *     def __cinit__(self, Vec vec not None):
 *         self.vec = vec
 *         self.mat = None             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->mat);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mat));
  __pyx_v_self->mat = ((struct __pyx_obj_8srctools_5_math_Matrix *)Py_None);

  /* "srctools/_math.pyx":543
 *     cdef Matrix mat
 *     cdef Vec vec
 *     def __cinit__(self, Vec vec not None):             # <<<<<<<<<<<<<<
 *         self.vec = vec
 *         self.mat = None
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":547
 *         self.mat = None
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         self.mat = Matrix.__new__(Matrix)
 *         return self.mat
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_12VecTransform_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_12VecTransform_2__enter__[] = "VecTransform.__enter__(self)";
static PyObject *__pyx_pw_8srctools_5_math_12VecTransform_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_12VecTransform_2__enter__(((struct __pyx_obj_8srctools_5_math_VecTransform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_12VecTransform_2__enter__(struct __pyx_obj_8srctools_5_math_VecTransform *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__enter__", 0);

  /* "srctools/_math.pyx":548
 * 
 *     def __enter__(self):
 *         self.mat = Matrix.__new__(Matrix)             # <<<<<<<<<<<<<<
 *         return self.mat
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Matrix(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Matrix), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->mat);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mat));
  __pyx_v_self->mat = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":549
 *     def __enter__(self):
 *         self.mat = Matrix.__new__(Matrix)
 *         return self.mat             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mat));
  __pyx_r = ((PyObject *)__pyx_v_self->mat);
  goto __pyx_L0;

  /* "srctools/_math.pyx":547
 *         self.mat = None
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         self.mat = Matrix.__new__(Matrix)
 *         return self.mat
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.VecTransform.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":551
 *         return self.mat
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if (
 *             self.mat is not None and
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_12VecTransform_5__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_12VecTransform_4__exit__[] = "VecTransform.__exit__(self, exc_type, exc_val, exc_tb)";
static PyObject *__pyx_pw_8srctools_5_math_12VecTransform_5__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_exc_type = 0;
  PyObject *__pyx_v_exc_val = 0;
  PyObject *__pyx_v_exc_tb = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_type,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); __PYX_ERR(0, 551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); __PYX_ERR(0, 551, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) __PYX_ERR(0, 551, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc_type = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 551, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.VecTransform.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_12VecTransform_4__exit__(((struct __pyx_obj_8srctools_5_math_VecTransform *)__pyx_v_self), __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_12VecTransform_4__exit__(struct __pyx_obj_8srctools_5_math_VecTransform *__pyx_v_self, PyObject *__pyx_v_exc_type, PyObject *__pyx_v_exc_val, PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__exit__", 0);

  /* "srctools/_math.pyx":553
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         if (
 *             self.mat is not None and             # <<<<<<<<<<<<<<
 *             self.vec is not None and
 *             exc_type is None and
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_self->mat) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }

  /* "srctools/_math.pyx":554
 *         if (
 *             self.mat is not None and
 *             self.vec is not None and             # <<<<<<<<<<<<<<
 *             exc_type is None and
 *             exc_val is None and
 */
  __pyx_t_3 = (((PyObject *)__pyx_v_self->vec) != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "srctools/_math.pyx":555
 *             self.mat is not None and
 *             self.vec is not None and
 *             exc_type is None and             # <<<<<<<<<<<<<<
 *             exc_val is None and
 *             exc_tb is None
 */
  __pyx_t_2 = (__pyx_v_exc_type == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }

  /* "srctools/_math.pyx":556
 *             self.vec is not None and
 *             exc_type is None and
 *             exc_val is None and             # <<<<<<<<<<<<<<
 *             exc_tb is None
 *         ):
 */
  __pyx_t_3 = (__pyx_v_exc_val == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "srctools/_math.pyx":557
 *             exc_type is None and
 *             exc_val is None and
 *             exc_tb is None             # <<<<<<<<<<<<<<
 *         ):
 *             vec_rot(&self.vec.val, self.mat.mat)
 */
  __pyx_t_2 = (__pyx_v_exc_tb == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;

  /* "srctools/_math.pyx":552
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         if (             # <<<<<<<<<<<<<<
 *             self.mat is not None and
 *             self.vec is not None and
 */
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":559
 *             exc_tb is None
 *         ):
 *             vec_rot(&self.vec.val, self.mat.mat)             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __pyx_f_8srctools_5_math_vec_rot((&__pyx_v_self->vec->val), __pyx_v_self->mat->mat);

    /* "srctools/_math.pyx":552
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         if (             # <<<<<<<<<<<<<<
 *             self.mat is not None and
 *             self.vec is not None and
 */
  }

  /* "srctools/_math.pyx":560
 *         ):
 *             vec_rot(&self.vec.val, self.mat.mat)
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "srctools/_math.pyx":551
 *         return self.mat
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if (
 *             self.mat is not None and
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":569
 *     cdef Matrix mat
 *     cdef Angle ang
 *     def __cinit__(self, Angle ang not None):             # <<<<<<<<<<<<<<
 *         self.ang = ang
 *         self.mat = None
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_14AngleTransform_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8srctools_5_math_14AngleTransform_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ang,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ang)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 569, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_ang = ((struct __pyx_obj_8srctools_5_math_Angle *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 569, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.AngleTransform.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ang), __pyx_ptype_8srctools_5_math_Angle, 0, "ang", 0))) __PYX_ERR(0, 569, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_14AngleTransform___cinit__(((struct __pyx_obj_8srctools_5_math_AngleTransform *)__pyx_v_self), __pyx_v_ang);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_14AngleTransform___cinit__(struct __pyx_obj_8srctools_5_math_AngleTransform *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "srctools/_math.pyx":570
 *     cdef Angle ang
 *     def __cinit__(self, Angle ang not None):
 *         self.ang = ang             # <<<<<<<<<<<<<<
 *         self.mat = None
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_ang));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_ang));
  __Pyx_GOTREF(__pyx_v_self->ang);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ang));
  __pyx_v_self->ang = __pyx_v_ang;

  /* "srctools/_math.pyx":571
 *     def __cinit__(self, Angle ang not None):
 *         self.ang = ang
 *         self.mat = None             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->mat);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mat));
  __pyx_v_self->mat = ((struct __pyx_obj_8srctools_5_math_Matrix *)Py_None);

  /* "srctools/_math.pyx":569
 *     cdef Matrix mat
 *     cdef Angle ang
 *     def __cinit__(self, Angle ang not None):             # <<<<<<<<<<<<<<
 *         self.ang = ang
 *         self.mat = None
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":573
 *         self.mat = None
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         self.mat = Matrix.__new__(Matrix)
 *         _mat_from_angle(self.mat.mat, &self.ang.val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_14AngleTransform_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_14AngleTransform_2__enter__[] = "AngleTransform.__enter__(self)";
static PyObject *__pyx_pw_8srctools_5_math_14AngleTransform_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_14AngleTransform_2__enter__(((struct __pyx_obj_8srctools_5_math_AngleTransform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_14AngleTransform_2__enter__(struct __pyx_obj_8srctools_5_math_AngleTransform *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__enter__", 0);

  /* "srctools/_math.pyx":574
 * 
 *     def __enter__(self):
 *         self.mat = Matrix.__new__(Matrix)             # <<<<<<<<<<<<<<
 *         _mat_from_angle(self.mat.mat, &self.ang.val)
 *         return self.mat
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Matrix(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Matrix), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->mat);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mat));
  __pyx_v_self->mat = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":575
 *     def __enter__(self):
 *         self.mat = Matrix.__new__(Matrix)
 *         _mat_from_angle(self.mat.mat, &self.ang.val)             # <<<<<<<<<<<<<<
 *         return self.mat
 * 
 */
  __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_self->mat->mat, (&__pyx_v_self->ang->val));

  /* "srctools/_math.pyx":576
 *         self.mat = Matrix.__new__(Matrix)
 *         _mat_from_angle(self.mat.mat, &self.ang.val)
 *         return self.mat             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mat));
  __pyx_r = ((PyObject *)__pyx_v_self->mat);
  goto __pyx_L0;

  /* "srctools/_math.pyx":573
 *         self.mat = None
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         self.mat = Matrix.__new__(Matrix)
 *         _mat_from_angle(self.mat.mat, &self.ang.val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.AngleTransform.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":578
 *         return self.mat
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if (
 *             self.mat is not None and
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_14AngleTransform_5__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_14AngleTransform_4__exit__[] = "AngleTransform.__exit__(self, exc_type, exc_val, exc_tb)";
static PyObject *__pyx_pw_8srctools_5_math_14AngleTransform_5__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_exc_type = 0;
  PyObject *__pyx_v_exc_val = 0;
  PyObject *__pyx_v_exc_tb = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_type,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); __PYX_ERR(0, 578, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); __PYX_ERR(0, 578, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) __PYX_ERR(0, 578, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc_type = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 578, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.AngleTransform.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_14AngleTransform_4__exit__(((struct __pyx_obj_8srctools_5_math_AngleTransform *)__pyx_v_self), __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_14AngleTransform_4__exit__(struct __pyx_obj_8srctools_5_math_AngleTransform *__pyx_v_self, PyObject *__pyx_v_exc_type, PyObject *__pyx_v_exc_val, PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);

  /* "srctools/_math.pyx":580
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         if (
 *             self.mat is not None and             # <<<<<<<<<<<<<<
 *             self.vec is not None and
 *             exc_type is None and
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_self->mat) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }

  /* "srctools/_math.pyx":581
 *         if (
 *             self.mat is not None and
 *             self.vec is not None and             # <<<<<<<<<<<<<<
 *             exc_type is None and
 *             exc_val is None and
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_vec); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "srctools/_math.pyx":582
 *             self.mat is not None and
 *             self.vec is not None and
 *             exc_type is None and             # <<<<<<<<<<<<<<
 *             exc_val is None and
 *             exc_tb is None
 */
  __pyx_t_2 = (__pyx_v_exc_type == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }

  /* "srctools/_math.pyx":583
 *             self.vec is not None and
 *             exc_type is None and
 *             exc_val is None and             # <<<<<<<<<<<<<<
 *             exc_tb is None
 *         ):
 */
  __pyx_t_3 = (__pyx_v_exc_val == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "srctools/_math.pyx":584
 *             exc_type is None and
 *             exc_val is None and
 *             exc_tb is None             # <<<<<<<<<<<<<<
 *         ):
 *             _mat_to_angle(&self.ang.val, self.mat.mat)
 */
  __pyx_t_2 = (__pyx_v_exc_tb == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;

  /* "srctools/_math.pyx":579
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         if (             # <<<<<<<<<<<<<<
 *             self.mat is not None and
 *             self.vec is not None and
 */
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":586
 *             exc_tb is None
 *         ):
 *             _mat_to_angle(&self.ang.val, self.mat.mat)             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __pyx_f_8srctools_5_math__mat_to_angle((&__pyx_v_self->ang->val), __pyx_v_self->mat->mat);

    /* "srctools/_math.pyx":579
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         if (             # <<<<<<<<<<<<<<
 *             self.mat is not None and
 *             self.vec is not None and
 */
  }

  /* "srctools/_math.pyx":587
 *         ):
 *             _mat_to_angle(&self.ang.val, self.mat.mat)
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "srctools/_math.pyx":578
 *         return self.mat
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if (
 *             self.mat is not None and
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("srctools._math.AngleTransform.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":621
 * 
 *     @property
 *     def x(self):             # <<<<<<<<<<<<<<
 *         """The X axis of the vector."""
 *         return self.val.x
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_1x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_3Vec_1x_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_1x___get__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_1x___get__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "srctools/_math.pyx":623
 *     def x(self):
 *         """The X axis of the vector."""
 *         return self.val.x             # <<<<<<<<<<<<<<
 * 
 *     @x.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":621
 * 
 *     @property
 *     def x(self):             # <<<<<<<<<<<<<<
 *         """The X axis of the vector."""
 *         return self.val.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":626
 * 
 *     @x.setter
 *     def x(self, value):             # <<<<<<<<<<<<<<
 *         self.val.x = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_3Vec_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8srctools_5_math_3Vec_1x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_1x_2__set__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_3Vec_1x_2__set__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "srctools/_math.pyx":627
 *     @x.setter
 *     def x(self, value):
 *         self.val.x = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L1_error)
  __pyx_v_self->val.x = __pyx_t_1;

  /* "srctools/_math.pyx":626
 * 
 *     @x.setter
 *     def x(self, value):             # <<<<<<<<<<<<<<
 *         self.val.x = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("srctools._math.Vec.x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":630
 * 
 *     @property
 *     def y(self):             # <<<<<<<<<<<<<<
 *         """The Y axis of the vector."""
 *         return self.val.y
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_1y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_3Vec_1y_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_1y___get__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_1y___get__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "srctools/_math.pyx":632
 *     def y(self):
 *         """The Y axis of the vector."""
 *         return self.val.y             # <<<<<<<<<<<<<<
 * 
 *     @y.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":630
 * 
 *     @property
 *     def y(self):             # <<<<<<<<<<<<<<
 *         """The Y axis of the vector."""
 *         return self.val.y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":635
 * 
 *     @y.setter
 *     def y(self, value):             # <<<<<<<<<<<<<<
 *         self.val.y = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_3Vec_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8srctools_5_math_3Vec_1y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_1y_2__set__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_3Vec_1y_2__set__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "srctools/_math.pyx":636
 *     @y.setter
 *     def y(self, value):
 *         self.val.y = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_v_self->val.y = __pyx_t_1;

  /* "srctools/_math.pyx":635
 * 
 *     @y.setter
 *     def y(self, value):             # <<<<<<<<<<<<<<
 *         self.val.y = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("srctools._math.Vec.y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":639
 * 
 *     @property
 *     def z(self):             # <<<<<<<<<<<<<<
 *         """The Z axis of the vector."""
 *         return self.val.z
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_1z_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_3Vec_1z_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_1z___get__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_1z___get__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "srctools/_math.pyx":641
 *     def z(self):
 *         """The Z axis of the vector."""
 *         return self.val.z             # <<<<<<<<<<<<<<
 * 
 *     @z.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":639
 * 
 *     @property
 *     def z(self):             # <<<<<<<<<<<<<<
 *         """The Z axis of the vector."""
 *         return self.val.z
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":644
 * 
 *     @z.setter
 *     def z(self, value):             # <<<<<<<<<<<<<<
 *         self.val.z = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_3Vec_1z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8srctools_5_math_3Vec_1z_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_1z_2__set__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_3Vec_1z_2__set__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "srctools/_math.pyx":645
 *     @z.setter
 *     def z(self, value):
 *         self.val.z = value             # <<<<<<<<<<<<<<
 * 
 *     def __init__(
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L1_error)
  __pyx_v_self->val.z = __pyx_t_1;

  /* "srctools/_math.pyx":644
 * 
 *     @z.setter
 *     def z(self, value):             # <<<<<<<<<<<<<<
 *         self.val.z = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("srctools._math.Vec.z.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":647
 *         self.val.z = value
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *         self,
 *         x=0.0,
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_3Vec_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec___init__[] = "Create a Vector.\n\n        All values are converted to Floats automatically.\n        If no value is given, that axis will be set to 0.\n        An iterable can be passed in (as the x argument), which will be\n        used for x, y, and z.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec___init__;
#endif
static int __pyx_pw_8srctools_5_math_3Vec_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_z = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_float_0_0);
    values[1] = ((PyObject *)__pyx_float_0_0);
    values[2] = ((PyObject *)__pyx_float_0_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 647, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_z = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 647, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec___init__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_3Vec___init__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_z) {
  PyObject *__pyx_v_tup = 0;
  PyObject *__pyx_v_it = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "srctools/_math.pyx":661
 *         """
 *         cdef tuple tup
 *         if isinstance(x, float) or isinstance(x, int):             # <<<<<<<<<<<<<<
 *             self.val.x = x
 *             self.val.y = y
 */
  __pyx_t_2 = PyFloat_Check(__pyx_v_x); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyInt_Check(__pyx_v_x); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":662
 *         cdef tuple tup
 *         if isinstance(x, float) or isinstance(x, int):
 *             self.val.x = x             # <<<<<<<<<<<<<<
 *             self.val.y = y
 *             self.val.z = z
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 662, __pyx_L1_error)
    __pyx_v_self->val.x = __pyx_t_4;

    /* "srctools/_math.pyx":663
 *         if isinstance(x, float) or isinstance(x, int):
 *             self.val.x = x
 *             self.val.y = y             # <<<<<<<<<<<<<<
 *             self.val.z = z
 *         elif isinstance(x, Vec):
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 663, __pyx_L1_error)
    __pyx_v_self->val.y = __pyx_t_4;

    /* "srctools/_math.pyx":664
 *             self.val.x = x
 *             self.val.y = y
 *             self.val.z = z             # <<<<<<<<<<<<<<
 *         elif isinstance(x, Vec):
 *             self.val.x = (<Vec>x).val.x
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_z); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 664, __pyx_L1_error)
    __pyx_v_self->val.z = __pyx_t_4;

    /* "srctools/_math.pyx":661
 *         """
 *         cdef tuple tup
 *         if isinstance(x, float) or isinstance(x, int):             # <<<<<<<<<<<<<<
 *             self.val.x = x
 *             self.val.y = y
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":665
 *             self.val.y = y
 *             self.val.z = z
 *         elif isinstance(x, Vec):             # <<<<<<<<<<<<<<
 *             self.val.x = (<Vec>x).val.x
 *             self.val.y = (<Vec>x).val.y
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_x, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":666
 *             self.val.z = z
 *         elif isinstance(x, Vec):
 *             self.val.x = (<Vec>x).val.x             # <<<<<<<<<<<<<<
 *             self.val.y = (<Vec>x).val.y
 *             self.val.z = (<Vec>x).val.z
 */
    __pyx_t_4 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_x)->val.x;
    __pyx_v_self->val.x = __pyx_t_4;

    /* "srctools/_math.pyx":667
 *         elif isinstance(x, Vec):
 *             self.val.x = (<Vec>x).val.x
 *             self.val.y = (<Vec>x).val.y             # <<<<<<<<<<<<<<
 *             self.val.z = (<Vec>x).val.z
 *         elif isinstance(x, tuple):
 */
    __pyx_t_4 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_x)->val.y;
    __pyx_v_self->val.y = __pyx_t_4;

    /* "srctools/_math.pyx":668
 *             self.val.x = (<Vec>x).val.x
 *             self.val.y = (<Vec>x).val.y
 *             self.val.z = (<Vec>x).val.z             # <<<<<<<<<<<<<<
 *         elif isinstance(x, tuple):
 *             tup = <tuple>x
 */
    __pyx_t_4 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_x)->val.z;
    __pyx_v_self->val.z = __pyx_t_4;

    /* "srctools/_math.pyx":665
 *             self.val.y = y
 *             self.val.z = z
 *         elif isinstance(x, Vec):             # <<<<<<<<<<<<<<
 *             self.val.x = (<Vec>x).val.x
 *             self.val.y = (<Vec>x).val.y
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":669
 *             self.val.y = (<Vec>x).val.y
 *             self.val.z = (<Vec>x).val.z
 *         elif isinstance(x, tuple):             # <<<<<<<<<<<<<<
 *             tup = <tuple>x
 *             if len(tup) >= 1:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_x); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":670
 *             self.val.z = (<Vec>x).val.z
 *         elif isinstance(x, tuple):
 *             tup = <tuple>x             # <<<<<<<<<<<<<<
 *             if len(tup) >= 1:
 *                 self.val.x = tup[0]
 */
    __pyx_t_5 = __pyx_v_x;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_v_tup = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "srctools/_math.pyx":671
 *         elif isinstance(x, tuple):
 *             tup = <tuple>x
 *             if len(tup) >= 1:             # <<<<<<<<<<<<<<
 *                 self.val.x = tup[0]
 *             else:
 */
    if (unlikely(__pyx_v_tup == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 671, __pyx_L1_error)
    }
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_tup); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 671, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_6 >= 1) != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":672
 *             tup = <tuple>x
 *             if len(tup) >= 1:
 *                 self.val.x = tup[0]             # <<<<<<<<<<<<<<
 *             else:
 *                 self.val.x = 0
 */
      if (unlikely(__pyx_v_tup == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 672, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_tup, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_self->val.x = __pyx_t_4;

      /* "srctools/_math.pyx":671
 *         elif isinstance(x, tuple):
 *             tup = <tuple>x
 *             if len(tup) >= 1:             # <<<<<<<<<<<<<<
 *                 self.val.x = tup[0]
 *             else:
 */
      goto __pyx_L6;
    }

    /* "srctools/_math.pyx":674
 *                 self.val.x = tup[0]
 *             else:
 *                 self.val.x = 0             # <<<<<<<<<<<<<<
 * 
 *             if len(tup) >= 2:
 */
    /*else*/ {
      __pyx_v_self->val.x = 0.0;
    }
    __pyx_L6:;

    /* "srctools/_math.pyx":676
 *                 self.val.x = 0
 * 
 *             if len(tup) >= 2:             # <<<<<<<<<<<<<<
 *                 self.val.y = tup[1]
 *             else:
 */
    if (unlikely(__pyx_v_tup == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 676, __pyx_L1_error)
    }
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_tup); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 676, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_6 >= 2) != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":677
 * 
 *             if len(tup) >= 2:
 *                 self.val.y = tup[1]             # <<<<<<<<<<<<<<
 *             else:
 *                 self.val.y = y
 */
      if (unlikely(__pyx_v_tup == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 677, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_tup, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 677, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 677, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_self->val.y = __pyx_t_4;

      /* "srctools/_math.pyx":676
 *                 self.val.x = 0
 * 
 *             if len(tup) >= 2:             # <<<<<<<<<<<<<<
 *                 self.val.y = tup[1]
 *             else:
 */
      goto __pyx_L7;
    }

    /* "srctools/_math.pyx":679
 *                 self.val.y = tup[1]
 *             else:
 *                 self.val.y = y             # <<<<<<<<<<<<<<
 * 
 *             if len(tup) >= 3:
 */
    /*else*/ {
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L1_error)
      __pyx_v_self->val.y = __pyx_t_4;
    }
    __pyx_L7:;

    /* "srctools/_math.pyx":681
 *                 self.val.y = y
 * 
 *             if len(tup) >= 3:             # <<<<<<<<<<<<<<
 *                 self.val.z = tup[2]
 *             else:
 */
    if (unlikely(__pyx_v_tup == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 681, __pyx_L1_error)
    }
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_tup); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 681, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_6 >= 3) != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":682
 * 
 *             if len(tup) >= 3:
 *                 self.val.z = tup[2]             # <<<<<<<<<<<<<<
 *             else:
 *                 self.val.z = z
 */
      if (unlikely(__pyx_v_tup == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 682, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_tup, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 682, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_self->val.z = __pyx_t_4;

      /* "srctools/_math.pyx":681
 *                 self.val.y = y
 * 
 *             if len(tup) >= 3:             # <<<<<<<<<<<<<<
 *                 self.val.z = tup[2]
 *             else:
 */
      goto __pyx_L8;
    }

    /* "srctools/_math.pyx":684
 *                 self.val.z = tup[2]
 *             else:
 *                 self.val.z = z             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    /*else*/ {
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_z); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 684, __pyx_L1_error)
      __pyx_v_self->val.z = __pyx_t_4;
    }
    __pyx_L8:;

    /* "srctools/_math.pyx":669
 *             self.val.y = (<Vec>x).val.y
 *             self.val.z = (<Vec>x).val.z
 *         elif isinstance(x, tuple):             # <<<<<<<<<<<<<<
 *             tup = <tuple>x
 *             if len(tup) >= 1:
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":687
 * 
 *         else:
 *             it = iter(x)             # <<<<<<<<<<<<<<
 *             try:
 *                 self.val.x = next(it)
 */
  /*else*/ {
    __pyx_t_5 = PyObject_GetIter(__pyx_v_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_it = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "srctools/_math.pyx":688
 *         else:
 *             it = iter(x)
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.x = next(it)
 *             except StopIteration:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "srctools/_math.pyx":689
 *             it = iter(x)
 *             try:
 *                 self.val.x = next(it)             # <<<<<<<<<<<<<<
 *             except StopIteration:
 *                 self.val.x = 0
 */
        __pyx_t_5 = __Pyx_PyIter_Next(__pyx_v_it); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 689, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 689, __pyx_L9_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_self->val.x = __pyx_t_4;

        /* "srctools/_math.pyx":688
 *         else:
 *             it = iter(x)
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.x = next(it)
 *             except StopIteration:
 */
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L14_try_end;
      __pyx_L9_error:;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "srctools/_math.pyx":690
 *             try:
 *                 self.val.x = next(it)
 *             except StopIteration:             # <<<<<<<<<<<<<<
 *                 self.val.x = 0
 *                 self.val.y = y
 */
      __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
      if (__pyx_t_10) {
        __Pyx_AddTraceback("srctools._math.Vec.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(0, 690, __pyx_L11_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_12);

        /* "srctools/_math.pyx":691
 *                 self.val.x = next(it)
 *             except StopIteration:
 *                 self.val.x = 0             # <<<<<<<<<<<<<<
 *                 self.val.y = y
 *                 self.val.z = z
 */
        __pyx_v_self->val.x = 0.0;

        /* "srctools/_math.pyx":692
 *             except StopIteration:
 *                 self.val.x = 0
 *                 self.val.y = y             # <<<<<<<<<<<<<<
 *                 self.val.z = z
 *                 return
 */
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L11_except_error)
        __pyx_v_self->val.y = __pyx_t_4;

        /* "srctools/_math.pyx":693
 *                 self.val.x = 0
 *                 self.val.y = y
 *                 self.val.z = z             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_z); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L11_except_error)
        __pyx_v_self->val.z = __pyx_t_4;

        /* "srctools/_math.pyx":694
 *                 self.val.y = y
 *                 self.val.z = z
 *                 return             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
        __pyx_r = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L12_except_return;
      }
      goto __pyx_L11_except_error;
      __pyx_L11_except_error:;

      /* "srctools/_math.pyx":688
 *         else:
 *             it = iter(x)
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.x = next(it)
 *             except StopIteration:
 */
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L12_except_return:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
      __pyx_L14_try_end:;
    }

    /* "srctools/_math.pyx":696
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.y = next(it)
 *             except StopIteration:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "srctools/_math.pyx":697
 * 
 *             try:
 *                 self.val.y = next(it)             # <<<<<<<<<<<<<<
 *             except StopIteration:
 *                 self.val.y = y
 */
        __pyx_t_12 = __Pyx_PyIter_Next(__pyx_v_it); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 697, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 697, __pyx_L17_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_v_self->val.y = __pyx_t_4;

        /* "srctools/_math.pyx":696
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.y = next(it)
 *             except StopIteration:
 */
      }
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L22_try_end;
      __pyx_L17_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "srctools/_math.pyx":698
 *             try:
 *                 self.val.y = next(it)
 *             except StopIteration:             # <<<<<<<<<<<<<<
 *                 self.val.y = y
 *                 self.val.z = z
 */
      __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
      if (__pyx_t_10) {
        __Pyx_AddTraceback("srctools._math.Vec.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_11, &__pyx_t_5) < 0) __PYX_ERR(0, 698, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_5);

        /* "srctools/_math.pyx":699
 *                 self.val.y = next(it)
 *             except StopIteration:
 *                 self.val.y = y             # <<<<<<<<<<<<<<
 *                 self.val.z = z
 *                 return
 */
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 699, __pyx_L19_except_error)
        __pyx_v_self->val.y = __pyx_t_4;

        /* "srctools/_math.pyx":700
 *             except StopIteration:
 *                 self.val.y = y
 *                 self.val.z = z             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_z); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 700, __pyx_L19_except_error)
        __pyx_v_self->val.z = __pyx_t_4;

        /* "srctools/_math.pyx":701
 *                 self.val.y = y
 *                 self.val.z = z
 *                 return             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
        __pyx_r = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L20_except_return;
      }
      goto __pyx_L19_except_error;
      __pyx_L19_except_error:;

      /* "srctools/_math.pyx":696
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.y = next(it)
 *             except StopIteration:
 */
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L20_except_return:;
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L22_try_end:;
    }

    /* "srctools/_math.pyx":703
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.z = next(it)
 *             except StopIteration:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "srctools/_math.pyx":704
 * 
 *             try:
 *                 self.val.z = next(it)             # <<<<<<<<<<<<<<
 *             except StopIteration:
 *                 self.val.z = z
 */
        __pyx_t_5 = __Pyx_PyIter_Next(__pyx_v_it); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 704, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 704, __pyx_L25_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_self->val.z = __pyx_t_4;

        /* "srctools/_math.pyx":703
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.z = next(it)
 *             except StopIteration:
 */
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L30_try_end;
      __pyx_L25_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "srctools/_math.pyx":705
 *             try:
 *                 self.val.z = next(it)
 *             except StopIteration:             # <<<<<<<<<<<<<<
 *                 self.val.z = z
 * 
 */
      __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
      if (__pyx_t_10) {
        __Pyx_AddTraceback("srctools._math.Vec.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(0, 705, __pyx_L27_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_12);

        /* "srctools/_math.pyx":706
 *                 self.val.z = next(it)
 *             except StopIteration:
 *                 self.val.z = z             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_z); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L27_except_error)
        __pyx_v_self->val.z = __pyx_t_4;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L26_exception_handled;
      }
      goto __pyx_L27_except_error;
      __pyx_L27_except_error:;

      /* "srctools/_math.pyx":703
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.z = next(it)
 *             except StopIteration:
 */
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L26_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_L30_try_end:;
    }
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":647
 *         self.val.z = value
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *         self,
 *         x=0.0,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("srctools._math.Vec.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_it);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":708
 *                 self.val.z = z
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """Create a duplicate of this vector."""
 *         return _vector(self.val.x, self.val.y, self.val.z)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_3copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_2copy[] = "Vec.copy(self)\nCreate a duplicate of this vector.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_3copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_2copy(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_2copy(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "srctools/_math.pyx":710
 *     def copy(self):
 *         """Create a duplicate of this vector."""
 *         return _vector(self.val.x, self.val.y, self.val.z)             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8srctools_5_math__vector(__pyx_v_self->val.x, __pyx_v_self->val.y, __pyx_v_self->val.z)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":708
 *                 self.val.z = z
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """Create a duplicate of this vector."""
 *         return _vector(self.val.x, self.val.y, self.val.z)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":712
 *         return _vector(self.val.x, self.val.y, self.val.z)
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         """Create a duplicate of this vector."""
 *         return _vector(self.val.x, self.val.y, self.val.z)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_4__copy__[] = "Vec.__copy__(self)\nCreate a duplicate of this vector.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_4__copy__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_4__copy__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "srctools/_math.pyx":714
 *     def __copy__(self):
 *         """Create a duplicate of this vector."""
 *         return _vector(self.val.x, self.val.y, self.val.z)             # <<<<<<<<<<<<<<
 * 
 *     def __deepcopy__(self, memodict=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8srctools_5_math__vector(__pyx_v_self->val.x, __pyx_v_self->val.y, __pyx_v_self->val.z)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":712
 *         return _vector(self.val.x, self.val.y, self.val.z)
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         """Create a duplicate of this vector."""
 *         return _vector(self.val.x, self.val.y, self.val.z)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":716
 *         return _vector(self.val.x, self.val.y, self.val.z)
 * 
 *     def __deepcopy__(self, memodict=None):             # <<<<<<<<<<<<<<
 *         """Create a duplicate of this vector."""
 *         return _vector(self.val.x, self.val.y, self.val.z)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_7__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_6__deepcopy__[] = "Vec.__deepcopy__(self, memodict=None)\nCreate a duplicate of this vector.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_7__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_memodict = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_memodict,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_memodict);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__deepcopy__") < 0)) __PYX_ERR(0, 716, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_memodict = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__deepcopy__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 716, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_6__deepcopy__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), __pyx_v_memodict);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_6__deepcopy__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__deepcopy__", 0);

  /* "srctools/_math.pyx":718
 *     def __deepcopy__(self, memodict=None):
 *         """Create a duplicate of this vector."""
 *         return _vector(self.val.x, self.val.y, self.val.z)             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8srctools_5_math__vector(__pyx_v_self->val.x, __pyx_v_self->val.y, __pyx_v_self->val.z)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":716
 *         return _vector(self.val.x, self.val.y, self.val.z)
 * 
 *     def __deepcopy__(self, memodict=None):             # <<<<<<<<<<<<<<
 *         """Create a duplicate of this vector."""
 *         return _vector(self.val.x, self.val.y, self.val.z)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":720
 *         return _vector(self.val.x, self.val.y, self.val.z)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return unpickle_vec, (self.val.x, self.val.y, self.val.z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_9__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_8__reduce__[] = "Vec.__reduce__(self)";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_9__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_8__reduce__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_8__reduce__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "srctools/_math.pyx":721
 * 
 *     def __reduce__(self):
 *         return unpickle_vec, (self.val.x, self.val.y, self.val.z)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_8srctools_5_math_unpickle_vec);
  __Pyx_GIVEREF(__pyx_v_8srctools_5_math_unpickle_vec);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_8srctools_5_math_unpickle_vec);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":720
 *         return _vector(self.val.x, self.val.y, self.val.z)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return unpickle_vec, (self.val.x, self.val.y, self.val.z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("srctools._math.Vec.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":724
 * 
 *     @classmethod
 *     def from_str(cls, value, double x=0, double y=0, double z=0):             # <<<<<<<<<<<<<<
 *         """Convert a string in the form '(4 6 -4)' into a Vector.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_11from_str(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_10from_str[] = "Vec.from_str(type cls, value, double x=0, double y=0, double z=0)\nConvert a string in the form '(4 6 -4)' into a Vector.\n\n        If the string is unparsable, this uses the defaults (x,y,z).\n        The string can start with any of the (), {}, [], <> bracket\n        types, or none.\n\n        If the value is already a vector, a copy will be returned.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_11from_str(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_str (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_str") < 0)) __PYX_ERR(0, 724, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = values[0];
    if (values[1]) {
      __pyx_v_x = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 724, __pyx_L3_error)
    } else {
      __pyx_v_x = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_y = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 724, __pyx_L3_error)
    } else {
      __pyx_v_y = ((double)0.0);
    }
    if (values[3]) {
      __pyx_v_z = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 724, __pyx_L3_error)
    } else {
      __pyx_v_z = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_str", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 724, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.from_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_10from_str(((PyTypeObject*)__pyx_v_cls), __pyx_v_value, __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_10from_str(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_value, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_str", 0);

  /* "srctools/_math.pyx":733
 *         If the value is already a vector, a copy will be returned.
 *         """
 *         cdef Vec vec = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         _parse_vec_str(&vec.val, value, x, y, z)
 *         return vec
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":734
 *         """
 *         cdef Vec vec = Vec.__new__(Vec)
 *         _parse_vec_str(&vec.val, value, x, y, z)             # <<<<<<<<<<<<<<
 *         return vec
 * 
 */
  __pyx_t_2 = __pyx_f_8srctools_5_math__parse_vec_str((&__pyx_v_vec->val), __pyx_v_value, __pyx_v_x, __pyx_v_y, __pyx_v_z); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 734, __pyx_L1_error)

  /* "srctools/_math.pyx":735
 *         cdef Vec vec = Vec.__new__(Vec)
 *         _parse_vec_str(&vec.val, value, x, y, z)
 *         return vec             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __pyx_r = ((PyObject *)__pyx_v_vec);
  goto __pyx_L0;

  /* "srctools/_math.pyx":724
 * 
 *     @classmethod
 *     def from_str(cls, value, double x=0, double y=0, double z=0):             # <<<<<<<<<<<<<<
 *         """Convert a string in the form '(4 6 -4)' into a Vector.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.from_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":739
 *     @classmethod
 *     @cython.boundscheck(False)
 *     def with_axes(cls, *args) -> 'Vec':             # <<<<<<<<<<<<<<
 *         """Create a Vector, given a number of axes and corresponding values.
 * 
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pw_8srctools_5_math_3Vec_13with_axes(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_12with_axes[] = "Vec.with_axes(type cls, *args) -> u'Vec'\nCreate a Vector, given a number of axes and corresponding values.\n\n        This is a convenience for doing the following:\n            vec = Vec()\n            vec[axis1] = val1\n            vec[axis2] = val2\n            vec[axis3] = val3\n        The magnitudes can also be Vectors, in which case the matching\n        axis will be used from the vector.\n        ";
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pw_8srctools_5_math_3Vec_13with_axes(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("with_axes (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "with_axes", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_12with_axes(((PyTypeObject*)__pyx_v_cls), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pf_8srctools_5_math_3Vec_12with_axes(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_arg_count;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  Py_UCS4 __pyx_v_axis;
  unsigned char __pyx_v_i;
  PyObject *__pyx_v_axis_val = NULL;
  PyObject *__pyx_v_axis_obj = NULL;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  unsigned char __pyx_t_8;
  long __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  double __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("with_axes", 0);

  /* "srctools/_math.pyx":750
 *         axis will be used from the vector.
 *         """
 *         cdef Py_ssize_t arg_count = len(args)             # <<<<<<<<<<<<<<
 *         if arg_count not in (2, 4, 6):
 *             raise TypeError(
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 750, __pyx_L1_error)
  __pyx_v_arg_count = __pyx_t_1;

  /* "srctools/_math.pyx":751
 *         """
 *         cdef Py_ssize_t arg_count = len(args)
 *         if arg_count not in (2, 4, 6):             # <<<<<<<<<<<<<<
 *             raise TypeError(
 *                 f'Vec.with_axis() takes 2, 4 or 6 positional arguments '
 */
  switch (__pyx_v_arg_count) {
    case 2:
    case 4:
    case 6:
    __pyx_t_2 = 0;
    break;
    default:
    __pyx_t_2 = 1;
    break;
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "srctools/_math.pyx":753
 *         if arg_count not in (2, 4, 6):
 *             raise TypeError(
 *                 f'Vec.with_axis() takes 2, 4 or 6 positional arguments '             # <<<<<<<<<<<<<<
 *                 f'but {arg_count} were given'
 *             )
 */
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Vec_with_axis_takes_2_4_or_6_pos);
    __pyx_t_1 += 57;
    __Pyx_GIVEREF(__pyx_kp_u_Vec_with_axis_takes_2_4_or_6_pos);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Vec_with_axis_takes_2_4_or_6_pos);

    /* "srctools/_math.pyx":754
 *             raise TypeError(
 *                 f'Vec.with_axis() takes 2, 4 or 6 positional arguments '
 *                 f'but {arg_count} were given'             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_arg_count, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_were_given);
    __pyx_t_1 += 11;
    __Pyx_GIVEREF(__pyx_kp_u_were_given);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_were_given);

    /* "srctools/_math.pyx":753
 *         if arg_count not in (2, 4, 6):
 *             raise TypeError(
 *                 f'Vec.with_axis() takes 2, 4 or 6 positional arguments '             # <<<<<<<<<<<<<<
 *                 f'but {arg_count} were given'
 *             )
 */
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "srctools/_math.pyx":752
 *         cdef Py_ssize_t arg_count = len(args)
 *         if arg_count not in (2, 4, 6):
 *             raise TypeError(             # <<<<<<<<<<<<<<
 *                 f'Vec.with_axis() takes 2, 4 or 6 positional arguments '
 *                 f'but {arg_count} were given'
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 752, __pyx_L1_error)

    /* "srctools/_math.pyx":751
 *         """
 *         cdef Py_ssize_t arg_count = len(args)
 *         if arg_count not in (2, 4, 6):             # <<<<<<<<<<<<<<
 *             raise TypeError(
 *                 f'Vec.with_axis() takes 2, 4 or 6 positional arguments '
 */
  }

  /* "srctools/_math.pyx":757
 *             )
 * 
 *         cdef Vec vec = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         cdef Py_UCS4 axis
 *         cdef unsigned char i
 */
  __pyx_t_4 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "srctools/_math.pyx":760
 *         cdef Py_UCS4 axis
 *         cdef unsigned char i
 *         for i in range(0, arg_count, 2):             # <<<<<<<<<<<<<<
 *             axis_val = args[i+1]
 *             axis_obj = args[i]
 */
  __pyx_t_1 = __pyx_v_arg_count;
  __pyx_t_7 = __pyx_t_1;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=2) {
    __pyx_v_i = __pyx_t_8;

    /* "srctools/_math.pyx":761
 *         cdef unsigned char i
 *         for i in range(0, arg_count, 2):
 *             axis_val = args[i+1]             # <<<<<<<<<<<<<<
 *             axis_obj = args[i]
 *             if isinstance(axis_obj, str) and len(<str>axis_obj) == 1:
 */
    __pyx_t_9 = (__pyx_v_i + 1);
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, __pyx_t_9, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_axis_val, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "srctools/_math.pyx":762
 *         for i in range(0, arg_count, 2):
 *             axis_val = args[i+1]
 *             axis_obj = args[i]             # <<<<<<<<<<<<<<
 *             if isinstance(axis_obj, str) and len(<str>axis_obj) == 1:
 *                 axis = (<str>axis_obj)[0]
 */
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, __pyx_v_i);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_axis_obj, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "srctools/_math.pyx":763
 *             axis_val = args[i+1]
 *             axis_obj = args[i]
 *             if isinstance(axis_obj, str) and len(<str>axis_obj) == 1:             # <<<<<<<<<<<<<<
 *                 axis = (<str>axis_obj)[0]
 *             else:
 */
    __pyx_t_2 = PyUnicode_Check(__pyx_v_axis_obj); 
    __pyx_t_10 = (__pyx_t_2 != 0);
    if (__pyx_t_10) {
    } else {
      __pyx_t_3 = __pyx_t_10;
      goto __pyx_L7_bool_binop_done;
    }
    if (unlikely(__pyx_v_axis_obj == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 763, __pyx_L1_error)
    }
    __pyx_t_11 = __Pyx_PyUnicode_GET_LENGTH(((PyObject*)__pyx_v_axis_obj)); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 763, __pyx_L1_error)
    __pyx_t_10 = ((__pyx_t_11 == 1) != 0);
    __pyx_t_3 = __pyx_t_10;
    __pyx_L7_bool_binop_done:;
    if (likely(__pyx_t_3)) {

      /* "srctools/_math.pyx":764
 *             axis_obj = args[i]
 *             if isinstance(axis_obj, str) and len(<str>axis_obj) == 1:
 *                 axis = (<str>axis_obj)[0]             # <<<<<<<<<<<<<<
 *             else:
 *                 raise KeyError(f'Invalid axis {axis_obj!r}' '!')
 */
      __pyx_t_5 = __Pyx_GetItemInt_Unicode(__pyx_v_axis_obj, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_5 == (Py_UCS4)-1)) __PYX_ERR(0, 764, __pyx_L1_error)
      __pyx_v_axis = __pyx_t_5;

      /* "srctools/_math.pyx":763
 *             axis_val = args[i+1]
 *             axis_obj = args[i]
 *             if isinstance(axis_obj, str) and len(<str>axis_obj) == 1:             # <<<<<<<<<<<<<<
 *                 axis = (<str>axis_obj)[0]
 *             else:
 */
      goto __pyx_L6;
    }

    /* "srctools/_math.pyx":766
 *                 axis = (<str>axis_obj)[0]
 *             else:
 *                 raise KeyError(f'Invalid axis {axis_obj!r}' '!')             # <<<<<<<<<<<<<<
 *             if axis == 'x':
 *                 if isinstance(axis_val, Vec):
 */
    /*else*/ {
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = 0;
      __pyx_t_5 = 127;
      __Pyx_INCREF(__pyx_kp_u_Invalid_axis);
      __pyx_t_11 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_axis);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Invalid_axis);
      __pyx_t_6 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_axis_obj), __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
      __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__4);
      __pyx_t_11 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__4);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u__4);
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_11, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 766, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "srctools/_math.pyx":767
 *             else:
 *                 raise KeyError(f'Invalid axis {axis_obj!r}' '!')
 *             if axis == 'x':             # <<<<<<<<<<<<<<
 *                 if isinstance(axis_val, Vec):
 *                     vec.val.x = (<Vec>axis_val).val.x
 */
    switch (__pyx_v_axis) {
      case 0x78:

      /* "srctools/_math.pyx":768
 *                 raise KeyError(f'Invalid axis {axis_obj!r}' '!')
 *             if axis == 'x':
 *                 if isinstance(axis_val, Vec):             # <<<<<<<<<<<<<<
 *                     vec.val.x = (<Vec>axis_val).val.x
 *                 else:
 */
      __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_axis_val, __pyx_ptype_8srctools_5_math_Vec); 
      __pyx_t_10 = (__pyx_t_3 != 0);
      if (__pyx_t_10) {

        /* "srctools/_math.pyx":769
 *             if axis == 'x':
 *                 if isinstance(axis_val, Vec):
 *                     vec.val.x = (<Vec>axis_val).val.x             # <<<<<<<<<<<<<<
 *                 else:
 *                     vec.val.x = axis_val
 */
        __pyx_t_12 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_axis_val)->val.x;
        __pyx_v_vec->val.x = __pyx_t_12;

        /* "srctools/_math.pyx":768
 *                 raise KeyError(f'Invalid axis {axis_obj!r}' '!')
 *             if axis == 'x':
 *                 if isinstance(axis_val, Vec):             # <<<<<<<<<<<<<<
 *                     vec.val.x = (<Vec>axis_val).val.x
 *                 else:
 */
        goto __pyx_L9;
      }

      /* "srctools/_math.pyx":771
 *                     vec.val.x = (<Vec>axis_val).val.x
 *                 else:
 *                     vec.val.x = axis_val             # <<<<<<<<<<<<<<
 *             elif axis == 'y':
 *                 if isinstance(axis_val, Vec):
 */
      /*else*/ {
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_axis_val); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 771, __pyx_L1_error)
        __pyx_v_vec->val.x = __pyx_t_12;
      }
      __pyx_L9:;

      /* "srctools/_math.pyx":767
 *             else:
 *                 raise KeyError(f'Invalid axis {axis_obj!r}' '!')
 *             if axis == 'x':             # <<<<<<<<<<<<<<
 *                 if isinstance(axis_val, Vec):
 *                     vec.val.x = (<Vec>axis_val).val.x
 */
      break;
      case 0x79:

      /* "srctools/_math.pyx":773
 *                     vec.val.x = axis_val
 *             elif axis == 'y':
 *                 if isinstance(axis_val, Vec):             # <<<<<<<<<<<<<<
 *                     vec.val.y = (<Vec>axis_val).val.y
 *                 else:
 */
      __pyx_t_10 = __Pyx_TypeCheck(__pyx_v_axis_val, __pyx_ptype_8srctools_5_math_Vec); 
      __pyx_t_3 = (__pyx_t_10 != 0);
      if (__pyx_t_3) {

        /* "srctools/_math.pyx":774
 *             elif axis == 'y':
 *                 if isinstance(axis_val, Vec):
 *                     vec.val.y = (<Vec>axis_val).val.y             # <<<<<<<<<<<<<<
 *                 else:
 *                     vec.val.y = axis_val
 */
        __pyx_t_12 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_axis_val)->val.y;
        __pyx_v_vec->val.y = __pyx_t_12;

        /* "srctools/_math.pyx":773
 *                     vec.val.x = axis_val
 *             elif axis == 'y':
 *                 if isinstance(axis_val, Vec):             # <<<<<<<<<<<<<<
 *                     vec.val.y = (<Vec>axis_val).val.y
 *                 else:
 */
        goto __pyx_L10;
      }

      /* "srctools/_math.pyx":776
 *                     vec.val.y = (<Vec>axis_val).val.y
 *                 else:
 *                     vec.val.y = axis_val             # <<<<<<<<<<<<<<
 *             elif axis == 'z':
 *                 if isinstance(axis_val, Vec):
 */
      /*else*/ {
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_axis_val); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 776, __pyx_L1_error)
        __pyx_v_vec->val.y = __pyx_t_12;
      }
      __pyx_L10:;

      /* "srctools/_math.pyx":772
 *                 else:
 *                     vec.val.x = axis_val
 *             elif axis == 'y':             # <<<<<<<<<<<<<<
 *                 if isinstance(axis_val, Vec):
 *                     vec.val.y = (<Vec>axis_val).val.y
 */
      break;
      case 0x7A:

      /* "srctools/_math.pyx":778
 *                     vec.val.y = axis_val
 *             elif axis == 'z':
 *                 if isinstance(axis_val, Vec):             # <<<<<<<<<<<<<<
 *                     vec.val.z = (<Vec>axis_val).val.z
 *                 else:
 */
      __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_axis_val, __pyx_ptype_8srctools_5_math_Vec); 
      __pyx_t_10 = (__pyx_t_3 != 0);
      if (__pyx_t_10) {

        /* "srctools/_math.pyx":779
 *             elif axis == 'z':
 *                 if isinstance(axis_val, Vec):
 *                     vec.val.z = (<Vec>axis_val).val.z             # <<<<<<<<<<<<<<
 *                 else:
 *                     vec.val.z = axis_val
 */
        __pyx_t_12 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_axis_val)->val.z;
        __pyx_v_vec->val.z = __pyx_t_12;

        /* "srctools/_math.pyx":778
 *                     vec.val.y = axis_val
 *             elif axis == 'z':
 *                 if isinstance(axis_val, Vec):             # <<<<<<<<<<<<<<
 *                     vec.val.z = (<Vec>axis_val).val.z
 *                 else:
 */
        goto __pyx_L11;
      }

      /* "srctools/_math.pyx":781
 *                     vec.val.z = (<Vec>axis_val).val.z
 *                 else:
 *                     vec.val.z = axis_val             # <<<<<<<<<<<<<<
 *             else:
 *                 raise KeyError(f'Invalid axis {axis_obj!r}' '!')
 */
      /*else*/ {
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_axis_val); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 781, __pyx_L1_error)
        __pyx_v_vec->val.z = __pyx_t_12;
      }
      __pyx_L11:;

      /* "srctools/_math.pyx":777
 *                 else:
 *                     vec.val.y = axis_val
 *             elif axis == 'z':             # <<<<<<<<<<<<<<
 *                 if isinstance(axis_val, Vec):
 *                     vec.val.z = (<Vec>axis_val).val.z
 */
      break;
      default:

      /* "srctools/_math.pyx":783
 *                     vec.val.z = axis_val
 *             else:
 *                 raise KeyError(f'Invalid axis {axis_obj!r}' '!')             # <<<<<<<<<<<<<<
 * 
 *         return vec
 */
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = 0;
      __pyx_t_5 = 127;
      __Pyx_INCREF(__pyx_kp_u_Invalid_axis);
      __pyx_t_11 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_axis);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Invalid_axis);
      __pyx_t_6 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_axis_obj), __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
      __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__4);
      __pyx_t_11 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__4);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u__4);
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_11, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 783, __pyx_L1_error)
      break;
    }
  }

  /* "srctools/_math.pyx":785
 *                 raise KeyError(f'Invalid axis {axis_obj!r}' '!')
 * 
 *         return vec             # <<<<<<<<<<<<<<
 * 
 *     def rotate(
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "srctools/_math.pyx":739
 *     @classmethod
 *     @cython.boundscheck(False)
 *     def with_axes(cls, *args) -> 'Vec':             # <<<<<<<<<<<<<<
 *         """Create a Vector, given a number of axes and corresponding values.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("srctools._math.Vec.with_axes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XDECREF(__pyx_v_axis_val);
  __Pyx_XDECREF(__pyx_v_axis_obj);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":787
 *         return vec
 * 
 *     def rotate(             # <<<<<<<<<<<<<<
 *         self,
 *         double pitch: float=0.0,
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pw_8srctools_5_math_3Vec_15rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_14rotate[] = "Vec.rotate(self, double pitch: float = 0.0, double yaw: float = 0.0, double roll: float = 0.0, bool round_vals: bool = True) -> u'Vec'\nRotate a vector by a Source rotational angle.\n        Returns the vector, so you can use it in the form\n        val = Vec(0,1,0).rotate(p, y, r)\n\n        If round is True, all values will be rounded to 3 decimals\n        (since these calculations always have small inprecision.)\n\n        This is deprecated - use an Angle and the @ operator.\n        ";
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pw_8srctools_5_math_3Vec_15rotate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_pitch;
  double __pyx_v_yaw;
  double __pyx_v_roll;
  int __pyx_v_round_vals;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pitch,&__pyx_n_s_yaw,&__pyx_n_s_roll,&__pyx_n_s_round_vals,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pitch);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_yaw);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_roll);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_round_vals);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rotate") < 0)) __PYX_ERR(0, 787, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_pitch = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_pitch == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 789, __pyx_L3_error)
    } else {
      __pyx_v_pitch = ((double)0.0);
    }
    if (values[1]) {
      __pyx_v_yaw = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_yaw == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 790, __pyx_L3_error)
    } else {
      __pyx_v_yaw = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_roll = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_roll == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 791, __pyx_L3_error)
    } else {
      __pyx_v_roll = ((double)0.0);
    }
    if (values[3]) {
      __pyx_v_round_vals = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_round_vals == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 792, __pyx_L3_error)
    } else {

      /* "srctools/_math.pyx":792
 *         double yaw: float=0.0,
 *         double roll: float=0.0,
 *         bint round_vals: bool=True,             # <<<<<<<<<<<<<<
 *     ) -> 'Vec':
 *         """Rotate a vector by a Source rotational angle.
 */
      __pyx_v_round_vals = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rotate", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 787, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_14rotate(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), __pyx_v_pitch, __pyx_v_yaw, __pyx_v_roll, __pyx_v_round_vals);

  /* "srctools/_math.pyx":787
 *         return vec
 * 
 *     def rotate(             # <<<<<<<<<<<<<<
 *         self,
 *         double pitch: float=0.0,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pf_8srctools_5_math_3Vec_14rotate(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, double __pyx_v_pitch, double __pyx_v_yaw, double __pyx_v_roll, int __pyx_v_round_vals) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_angle;
  __pyx_t_8srctools_5_math_mat_t __pyx_v_matrix;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate", 0);

  /* "srctools/_math.pyx":806
 *         cdef mat_t matrix
 * 
 *         PyErr_WarnEx(DeprecationWarning, "Use vec @ Angle() instead.", 1)             # <<<<<<<<<<<<<<
 * 
 *         angle.x = pitch
 */
  __pyx_t_1 = PyErr_WarnEx(__pyx_builtin_DeprecationWarning, ((char *)"Use vec @ Angle() instead."), 1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 806, __pyx_L1_error)

  /* "srctools/_math.pyx":808
 *         PyErr_WarnEx(DeprecationWarning, "Use vec @ Angle() instead.", 1)
 * 
 *         angle.x = pitch             # <<<<<<<<<<<<<<
 *         angle.y = yaw
 *         angle.z = roll
 */
  __pyx_v_angle.x = __pyx_v_pitch;

  /* "srctools/_math.pyx":809
 * 
 *         angle.x = pitch
 *         angle.y = yaw             # <<<<<<<<<<<<<<
 *         angle.z = roll
 * 
 */
  __pyx_v_angle.y = __pyx_v_yaw;

  /* "srctools/_math.pyx":810
 *         angle.x = pitch
 *         angle.y = yaw
 *         angle.z = roll             # <<<<<<<<<<<<<<
 * 
 *         _mat_from_angle(matrix, &angle)
 */
  __pyx_v_angle.z = __pyx_v_roll;

  /* "srctools/_math.pyx":812
 *         angle.z = roll
 * 
 *         _mat_from_angle(matrix, &angle)             # <<<<<<<<<<<<<<
 *         vec_rot(&self.val, matrix)
 * 
 */
  __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_matrix, (&__pyx_v_angle));

  /* "srctools/_math.pyx":813
 * 
 *         _mat_from_angle(matrix, &angle)
 *         vec_rot(&self.val, matrix)             # <<<<<<<<<<<<<<
 * 
 *         if round_vals:
 */
  __pyx_f_8srctools_5_math_vec_rot((&__pyx_v_self->val), __pyx_v_matrix);

  /* "srctools/_math.pyx":815
 *         vec_rot(&self.val, matrix)
 * 
 *         if round_vals:             # <<<<<<<<<<<<<<
 *             self.val.x = round(self.val.x, ROUND_TO)
 *             self.val.y = round(self.val.y, ROUND_TO)
 */
  __pyx_t_2 = (__pyx_v_round_vals != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":816
 * 
 *         if round_vals:
 *             self.val.x = round(self.val.x, ROUND_TO)             # <<<<<<<<<<<<<<
 *             self.val.y = round(self.val.y, ROUND_TO)
 *             self.val.z = round(self.val.z, ROUND_TO)
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_6);
    __Pyx_GIVEREF(__pyx_int_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_6);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->val.x = __pyx_t_5;

    /* "srctools/_math.pyx":817
 *         if round_vals:
 *             self.val.x = round(self.val.x, ROUND_TO)
 *             self.val.y = round(self.val.y, ROUND_TO)             # <<<<<<<<<<<<<<
 *             self.val.z = round(self.val.z, ROUND_TO)
 * 
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_6);
    __Pyx_GIVEREF(__pyx_int_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_6);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->val.y = __pyx_t_5;

    /* "srctools/_math.pyx":818
 *             self.val.x = round(self.val.x, ROUND_TO)
 *             self.val.y = round(self.val.y, ROUND_TO)
 *             self.val.z = round(self.val.z, ROUND_TO)             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_6);
    __Pyx_GIVEREF(__pyx_int_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_6);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 818, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->val.z = __pyx_t_5;

    /* "srctools/_math.pyx":815
 *         vec_rot(&self.val, matrix)
 * 
 *         if round_vals:             # <<<<<<<<<<<<<<
 *             self.val.x = round(self.val.x, ROUND_TO)
 *             self.val.y = round(self.val.y, ROUND_TO)
 */
  }

  /* "srctools/_math.pyx":820
 *             self.val.z = round(self.val.z, ROUND_TO)
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def rotate_by_str(
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "srctools/_math.pyx":787
 *         return vec
 * 
 *     def rotate(             # <<<<<<<<<<<<<<
 *         self,
 *         double pitch: float=0.0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("srctools._math.Vec.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":822
 *         return self
 * 
 *     def rotate_by_str(             # <<<<<<<<<<<<<<
 *         self,
 *         ang,
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pw_8srctools_5_math_3Vec_17rotate_by_str(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_16rotate_by_str[] = "Vec.rotate_by_str(self, ang, double pitch=0.0, double yaw=0.0, double roll=0.0, bool round_vals=True) -> u'Vec'\nRotate a vector, using a string instead of a vector.\n\n        If the string cannot be parsed, use the passed in values instead.\n        This is deprecated - use Angle.from_str and the @ operator.\n        ";
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pw_8srctools_5_math_3Vec_17rotate_by_str(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ang = 0;
  double __pyx_v_pitch;
  double __pyx_v_yaw;
  double __pyx_v_roll;
  int __pyx_v_round_vals;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate_by_str (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ang,&__pyx_n_s_pitch,&__pyx_n_s_yaw,&__pyx_n_s_roll,&__pyx_n_s_round_vals,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ang)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pitch);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_yaw);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_roll);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_round_vals);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rotate_by_str") < 0)) __PYX_ERR(0, 822, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ang = values[0];
    if (values[1]) {
      __pyx_v_pitch = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_pitch == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 825, __pyx_L3_error)
    } else {
      __pyx_v_pitch = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_yaw = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_yaw == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 826, __pyx_L3_error)
    } else {
      __pyx_v_yaw = ((double)0.0);
    }
    if (values[3]) {
      __pyx_v_roll = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_roll == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 827, __pyx_L3_error)
    } else {
      __pyx_v_roll = ((double)0.0);
    }
    if (values[4]) {
      __pyx_v_round_vals = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_round_vals == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 828, __pyx_L3_error)
    } else {

      /* "srctools/_math.pyx":828
 *         double yaw=0.0,
 *         double roll=0.0,
 *         bint round_vals=True,             # <<<<<<<<<<<<<<
 *     ) -> 'Vec':
 *         """Rotate a vector, using a string instead of a vector.
 */
      __pyx_v_round_vals = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rotate_by_str", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 822, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.rotate_by_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_16rotate_by_str(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), __pyx_v_ang, __pyx_v_pitch, __pyx_v_yaw, __pyx_v_roll, __pyx_v_round_vals);

  /* "srctools/_math.pyx":822
 *         return self
 * 
 *     def rotate_by_str(             # <<<<<<<<<<<<<<
 *         self,
 *         ang,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pf_8srctools_5_math_3Vec_16rotate_by_str(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_ang, double __pyx_v_pitch, double __pyx_v_yaw, double __pyx_v_roll, int __pyx_v_round_vals) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_angle;
  __pyx_t_8srctools_5_math_mat_t __pyx_v_matrix;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate_by_str", 0);

  /* "srctools/_math.pyx":835
 *         This is deprecated - use Angle.from_str and the @ operator.
 *         """
 *         PyErr_WarnEx(DeprecationWarning, "Use vec @ Angle.from_str() instead.", 1)             # <<<<<<<<<<<<<<
 *         cdef vec_t angle
 *         cdef mat_t matrix
 */
  __pyx_t_1 = PyErr_WarnEx(__pyx_builtin_DeprecationWarning, ((char *)"Use vec @ Angle.from_str() instead."), 1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 835, __pyx_L1_error)

  /* "srctools/_math.pyx":839
 *         cdef mat_t matrix
 * 
 *         _parse_vec_str(&angle, ang, pitch, yaw, roll)             # <<<<<<<<<<<<<<
 *         _mat_from_angle(matrix, &angle)
 *         vec_rot(&self.val, matrix)
 */
  __pyx_t_1 = __pyx_f_8srctools_5_math__parse_vec_str((&__pyx_v_angle), __pyx_v_ang, __pyx_v_pitch, __pyx_v_yaw, __pyx_v_roll); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 839, __pyx_L1_error)

  /* "srctools/_math.pyx":840
 * 
 *         _parse_vec_str(&angle, ang, pitch, yaw, roll)
 *         _mat_from_angle(matrix, &angle)             # <<<<<<<<<<<<<<
 *         vec_rot(&self.val, matrix)
 * 
 */
  __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_matrix, (&__pyx_v_angle));

  /* "srctools/_math.pyx":841
 *         _parse_vec_str(&angle, ang, pitch, yaw, roll)
 *         _mat_from_angle(matrix, &angle)
 *         vec_rot(&self.val, matrix)             # <<<<<<<<<<<<<<
 * 
 *         if round_vals:
 */
  __pyx_f_8srctools_5_math_vec_rot((&__pyx_v_self->val), __pyx_v_matrix);

  /* "srctools/_math.pyx":843
 *         vec_rot(&self.val, matrix)
 * 
 *         if round_vals:             # <<<<<<<<<<<<<<
 *             self.val.x = round(self.val.x, ROUND_TO)
 *             self.val.y = round(self.val.y, ROUND_TO)
 */
  __pyx_t_2 = (__pyx_v_round_vals != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":844
 * 
 *         if round_vals:
 *             self.val.x = round(self.val.x, ROUND_TO)             # <<<<<<<<<<<<<<
 *             self.val.y = round(self.val.y, ROUND_TO)
 *             self.val.z = round(self.val.z, ROUND_TO)
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_6);
    __Pyx_GIVEREF(__pyx_int_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_6);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->val.x = __pyx_t_5;

    /* "srctools/_math.pyx":845
 *         if round_vals:
 *             self.val.x = round(self.val.x, ROUND_TO)
 *             self.val.y = round(self.val.y, ROUND_TO)             # <<<<<<<<<<<<<<
 *             self.val.z = round(self.val.z, ROUND_TO)
 * 
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_6);
    __Pyx_GIVEREF(__pyx_int_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_6);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->val.y = __pyx_t_5;

    /* "srctools/_math.pyx":846
 *             self.val.x = round(self.val.x, ROUND_TO)
 *             self.val.y = round(self.val.y, ROUND_TO)
 *             self.val.z = round(self.val.z, ROUND_TO)             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_6);
    __Pyx_GIVEREF(__pyx_int_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_6);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->val.z = __pyx_t_5;

    /* "srctools/_math.pyx":843
 *         vec_rot(&self.val, matrix)
 * 
 *         if round_vals:             # <<<<<<<<<<<<<<
 *             self.val.x = round(self.val.x, ROUND_TO)
 *             self.val.y = round(self.val.y, ROUND_TO)
 */
  }

  /* "srctools/_math.pyx":848
 *             self.val.z = round(self.val.z, ROUND_TO)
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "srctools/_math.pyx":822
 *         return self
 * 
 *     def rotate_by_str(             # <<<<<<<<<<<<<<
 *         self,
 *         ang,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("srctools._math.Vec.rotate_by_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":851
 * 
 *     @classmethod
 *     def bbox(cls, *points: Vec) -> 'Tuple[Vec, Vec]':             # <<<<<<<<<<<<<<
 *         """Compute the bounding box for a set of points.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_19bbox(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_18bbox[] = "Vec.bbox(type cls, *points: Vec) -> u'Tuple[Vec, Vec]'\nCompute the bounding box for a set of points.\n\n        Pass either several Vecs, or an iterable of Vecs.\n        Returns a (min, max) tuple.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_19bbox(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bbox (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "bbox", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_points = __pyx_args;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_18bbox(((PyTypeObject*)__pyx_v_cls), __pyx_v_points);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_18bbox(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_points) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_bbox_min = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_bbox_max = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_sing_vec = 0;
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_vec;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_points_iter = NULL;
  PyObject *__pyx_v_first = NULL;
  PyObject *__pyx_v_point = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_t_8srctools_5_math_vec_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  unsigned char __pyx_t_13;
  double __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bbox", 0);

  /* "srctools/_math.pyx":857
 *         Returns a (min, max) tuple.
 *         """
 *         cdef Vec bbox_min = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         cdef Vec bbox_max = Vec.__new__(Vec)
 *         cdef Vec sing_vec
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_bbox_min = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":858
 *         """
 *         cdef Vec bbox_min = Vec.__new__(Vec)
 *         cdef Vec bbox_max = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         cdef Vec sing_vec
 *         cdef vec_t vec
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_bbox_max = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":865
 *         # The error messages match those produced by min()/max().
 * 
 *         if len(points) == 1:             # <<<<<<<<<<<<<<
 *             if isinstance(points[0], Vec):
 *                 # Special case, don't iter over the vec, just copy.
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_points); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 865, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {

    /* "srctools/_math.pyx":866
 * 
 *         if len(points) == 1:
 *             if isinstance(points[0], Vec):             # <<<<<<<<<<<<<<
 *                 # Special case, don't iter over the vec, just copy.
 *                 sing_vec = <Vec>points[0]
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_points, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_8srctools_5_math_Vec); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {

      /* "srctools/_math.pyx":868
 *             if isinstance(points[0], Vec):
 *                 # Special case, don't iter over the vec, just copy.
 *                 sing_vec = <Vec>points[0]             # <<<<<<<<<<<<<<
 *                 bbox_min.val = sing_vec.val
 *                 bbox_max.val = sing_vec.val
 */
      __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_points, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 868, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __pyx_t_1;
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_sing_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_5);
      __pyx_t_5 = 0;

      /* "srctools/_math.pyx":869
 *                 # Special case, don't iter over the vec, just copy.
 *                 sing_vec = <Vec>points[0]
 *                 bbox_min.val = sing_vec.val             # <<<<<<<<<<<<<<
 *                 bbox_max.val = sing_vec.val
 *                 return bbox_min, bbox_max
 */
      __pyx_t_6 = __pyx_v_sing_vec->val;
      __pyx_v_bbox_min->val = __pyx_t_6;

      /* "srctools/_math.pyx":870
 *                 sing_vec = <Vec>points[0]
 *                 bbox_min.val = sing_vec.val
 *                 bbox_max.val = sing_vec.val             # <<<<<<<<<<<<<<
 *                 return bbox_min, bbox_max
 *             points_iter = iter(points[0])
 */
      __pyx_t_6 = __pyx_v_sing_vec->val;
      __pyx_v_bbox_max->val = __pyx_t_6;

      /* "srctools/_math.pyx":871
 *                 bbox_min.val = sing_vec.val
 *                 bbox_max.val = sing_vec.val
 *                 return bbox_min, bbox_max             # <<<<<<<<<<<<<<
 *             points_iter = iter(points[0])
 *             try:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 871, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(((PyObject *)__pyx_v_bbox_min));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_bbox_min));
      PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_bbox_min));
      __Pyx_INCREF(((PyObject *)__pyx_v_bbox_max));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_bbox_max));
      PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_bbox_max));
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "srctools/_math.pyx":866
 * 
 *         if len(points) == 1:
 *             if isinstance(points[0], Vec):             # <<<<<<<<<<<<<<
 *                 # Special case, don't iter over the vec, just copy.
 *                 sing_vec = <Vec>points[0]
 */
    }

    /* "srctools/_math.pyx":872
 *                 bbox_max.val = sing_vec.val
 *                 return bbox_min, bbox_max
 *             points_iter = iter(points[0])             # <<<<<<<<<<<<<<
 *             try:
 *                 first = next(points_iter)
 */
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_points, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_points_iter = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "srctools/_math.pyx":873
 *                 return bbox_min, bbox_max
 *             points_iter = iter(points[0])
 *             try:             # <<<<<<<<<<<<<<
 *                 first = next(points_iter)
 *             except StopIteration:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "srctools/_math.pyx":874
 *             points_iter = iter(points[0])
 *             try:
 *                 first = next(points_iter)             # <<<<<<<<<<<<<<
 *             except StopIteration:
 *                 raise ValueError('Empty iterator!') from None
 */
        __pyx_t_1 = __Pyx_PyIter_Next(__pyx_v_points_iter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 874, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_first = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "srctools/_math.pyx":873
 *                 return bbox_min, bbox_max
 *             points_iter = iter(points[0])
 *             try:             # <<<<<<<<<<<<<<
 *                 first = next(points_iter)
 *             except StopIteration:
 */
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L10_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "srctools/_math.pyx":875
 *             try:
 *                 first = next(points_iter)
 *             except StopIteration:             # <<<<<<<<<<<<<<
 *                 raise ValueError('Empty iterator!') from None
 * 
 */
      __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
      if (__pyx_t_10) {
        __Pyx_AddTraceback("srctools._math.Vec.bbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_5, &__pyx_t_11) < 0) __PYX_ERR(0, 875, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_11);

        /* "srctools/_math.pyx":876
 *                 first = next(points_iter)
 *             except StopIteration:
 *                 raise ValueError('Empty iterator!') from None             # <<<<<<<<<<<<<<
 * 
 *             conv_vec(&bbox_min.val, first, scalar=False)
 */
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 876, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_Raise(__pyx_t_12, 0, 0, Py_None);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __PYX_ERR(0, 876, __pyx_L7_except_error)
      }
      goto __pyx_L7_except_error;
      __pyx_L7_except_error:;

      /* "srctools/_math.pyx":873
 *                 return bbox_min, bbox_max
 *             points_iter = iter(points[0])
 *             try:             # <<<<<<<<<<<<<<
 *                 first = next(points_iter)
 *             except StopIteration:
 */
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L10_try_end:;
    }

    /* "srctools/_math.pyx":878
 *                 raise ValueError('Empty iterator!') from None
 * 
 *             conv_vec(&bbox_min.val, first, scalar=False)             # <<<<<<<<<<<<<<
 *             bbox_max.val = bbox_min.val
 * 
 */
    __pyx_t_13 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_bbox_min->val), __pyx_v_first, 0); if (unlikely(__pyx_t_13 == ((unsigned char)0))) __PYX_ERR(0, 878, __pyx_L1_error)

    /* "srctools/_math.pyx":879
 * 
 *             conv_vec(&bbox_min.val, first, scalar=False)
 *             bbox_max.val = bbox_min.val             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
    __pyx_t_6 = __pyx_v_bbox_min->val;
    __pyx_v_bbox_max->val = __pyx_t_6;

    /* "srctools/_math.pyx":881
 *             bbox_max.val = bbox_min.val
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 while True:
 *                     point = next(points_iter)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "srctools/_math.pyx":882
 * 
 *             try:
 *                 while True:             # <<<<<<<<<<<<<<
 *                     point = next(points_iter)
 *                     conv_vec(&vec, point, scalar=False)
 */
        while (1) {

          /* "srctools/_math.pyx":883
 *             try:
 *                 while True:
 *                     point = next(points_iter)             # <<<<<<<<<<<<<<
 *                     conv_vec(&vec, point, scalar=False)
 * 
 */
          __pyx_t_11 = __Pyx_PyIter_Next(__pyx_v_points_iter); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 883, __pyx_L13_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_XDECREF_SET(__pyx_v_point, __pyx_t_11);
          __pyx_t_11 = 0;

          /* "srctools/_math.pyx":884
 *                 while True:
 *                     point = next(points_iter)
 *                     conv_vec(&vec, point, scalar=False)             # <<<<<<<<<<<<<<
 * 
 *                     if bbox_max.val.x < vec.x:
 */
          __pyx_t_13 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec), __pyx_v_point, 0); if (unlikely(__pyx_t_13 == ((unsigned char)0))) __PYX_ERR(0, 884, __pyx_L13_error)

          /* "srctools/_math.pyx":886
 *                     conv_vec(&vec, point, scalar=False)
 * 
 *                     if bbox_max.val.x < vec.x:             # <<<<<<<<<<<<<<
 *                         bbox_max.val.x = vec.x
 * 
 */
          __pyx_t_4 = ((__pyx_v_bbox_max->val.x < __pyx_v_vec.x) != 0);
          if (__pyx_t_4) {

            /* "srctools/_math.pyx":887
 * 
 *                     if bbox_max.val.x < vec.x:
 *                         bbox_max.val.x = vec.x             # <<<<<<<<<<<<<<
 * 
 *                     if bbox_max.val.y < vec.y:
 */
            __pyx_t_14 = __pyx_v_vec.x;
            __pyx_v_bbox_max->val.x = __pyx_t_14;

            /* "srctools/_math.pyx":886
 *                     conv_vec(&vec, point, scalar=False)
 * 
 *                     if bbox_max.val.x < vec.x:             # <<<<<<<<<<<<<<
 *                         bbox_max.val.x = vec.x
 * 
 */
          }

          /* "srctools/_math.pyx":889
 *                         bbox_max.val.x = vec.x
 * 
 *                     if bbox_max.val.y < vec.y:             # <<<<<<<<<<<<<<
 *                         bbox_max.val.y = vec.y
 * 
 */
          __pyx_t_4 = ((__pyx_v_bbox_max->val.y < __pyx_v_vec.y) != 0);
          if (__pyx_t_4) {

            /* "srctools/_math.pyx":890
 * 
 *                     if bbox_max.val.y < vec.y:
 *                         bbox_max.val.y = vec.y             # <<<<<<<<<<<<<<
 * 
 *                     if bbox_max.val.z < vec.z:
 */
            __pyx_t_14 = __pyx_v_vec.y;
            __pyx_v_bbox_max->val.y = __pyx_t_14;

            /* "srctools/_math.pyx":889
 *                         bbox_max.val.x = vec.x
 * 
 *                     if bbox_max.val.y < vec.y:             # <<<<<<<<<<<<<<
 *                         bbox_max.val.y = vec.y
 * 
 */
          }

          /* "srctools/_math.pyx":892
 *                         bbox_max.val.y = vec.y
 * 
 *                     if bbox_max.val.z < vec.z:             # <<<<<<<<<<<<<<
 *                         bbox_max.val.z = vec.z
 * 
 */
          __pyx_t_4 = ((__pyx_v_bbox_max->val.z < __pyx_v_vec.z) != 0);
          if (__pyx_t_4) {

            /* "srctools/_math.pyx":893
 * 
 *                     if bbox_max.val.z < vec.z:
 *                         bbox_max.val.z = vec.z             # <<<<<<<<<<<<<<
 * 
 *                     if bbox_min.val.x > vec.x:
 */
            __pyx_t_14 = __pyx_v_vec.z;
            __pyx_v_bbox_max->val.z = __pyx_t_14;

            /* "srctools/_math.pyx":892
 *                         bbox_max.val.y = vec.y
 * 
 *                     if bbox_max.val.z < vec.z:             # <<<<<<<<<<<<<<
 *                         bbox_max.val.z = vec.z
 * 
 */
          }

          /* "srctools/_math.pyx":895
 *                         bbox_max.val.z = vec.z
 * 
 *                     if bbox_min.val.x > vec.x:             # <<<<<<<<<<<<<<
 *                         bbox_min.val.x = vec.x
 * 
 */
          __pyx_t_4 = ((__pyx_v_bbox_min->val.x > __pyx_v_vec.x) != 0);
          if (__pyx_t_4) {

            /* "srctools/_math.pyx":896
 * 
 *                     if bbox_min.val.x > vec.x:
 *                         bbox_min.val.x = vec.x             # <<<<<<<<<<<<<<
 * 
 *                     if bbox_min.val.y > vec.y:
 */
            __pyx_t_14 = __pyx_v_vec.x;
            __pyx_v_bbox_min->val.x = __pyx_t_14;

            /* "srctools/_math.pyx":895
 *                         bbox_max.val.z = vec.z
 * 
 *                     if bbox_min.val.x > vec.x:             # <<<<<<<<<<<<<<
 *                         bbox_min.val.x = vec.x
 * 
 */
          }

          /* "srctools/_math.pyx":898
 *                         bbox_min.val.x = vec.x
 * 
 *                     if bbox_min.val.y > vec.y:             # <<<<<<<<<<<<<<
 *                         bbox_min.val.y = vec.y
 * 
 */
          __pyx_t_4 = ((__pyx_v_bbox_min->val.y > __pyx_v_vec.y) != 0);
          if (__pyx_t_4) {

            /* "srctools/_math.pyx":899
 * 
 *                     if bbox_min.val.y > vec.y:
 *                         bbox_min.val.y = vec.y             # <<<<<<<<<<<<<<
 * 
 *                     if bbox_min.val.z > vec.z:
 */
            __pyx_t_14 = __pyx_v_vec.y;
            __pyx_v_bbox_min->val.y = __pyx_t_14;

            /* "srctools/_math.pyx":898
 *                         bbox_min.val.x = vec.x
 * 
 *                     if bbox_min.val.y > vec.y:             # <<<<<<<<<<<<<<
 *                         bbox_min.val.y = vec.y
 * 
 */
          }

          /* "srctools/_math.pyx":901
 *                         bbox_min.val.y = vec.y
 * 
 *                     if bbox_min.val.z > vec.z:             # <<<<<<<<<<<<<<
 *                         bbox_min.val.z = vec.z
 *             except StopIteration:
 */
          __pyx_t_4 = ((__pyx_v_bbox_min->val.z > __pyx_v_vec.z) != 0);
          if (__pyx_t_4) {

            /* "srctools/_math.pyx":902
 * 
 *                     if bbox_min.val.z > vec.z:
 *                         bbox_min.val.z = vec.z             # <<<<<<<<<<<<<<
 *             except StopIteration:
 *                 pass
 */
            __pyx_t_14 = __pyx_v_vec.z;
            __pyx_v_bbox_min->val.z = __pyx_t_14;

            /* "srctools/_math.pyx":901
 *                         bbox_min.val.y = vec.y
 * 
 *                     if bbox_min.val.z > vec.z:             # <<<<<<<<<<<<<<
 *                         bbox_min.val.z = vec.z
 *             except StopIteration:
 */
          }
        }

        /* "srctools/_math.pyx":881
 *             bbox_max.val = bbox_min.val
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 while True:
 *                     point = next(points_iter)
 */
      }
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L18_try_end;
      __pyx_L13_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "srctools/_math.pyx":903
 *                     if bbox_min.val.z > vec.z:
 *                         bbox_min.val.z = vec.z
 *             except StopIteration:             # <<<<<<<<<<<<<<
 *                 pass
 *         elif len(points) == 0:
 */
      __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
      if (__pyx_t_10) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L14_exception_handled;
      }
      goto __pyx_L15_except_error;
      __pyx_L15_except_error:;

      /* "srctools/_math.pyx":881
 *             bbox_max.val = bbox_min.val
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 while True:
 *                     point = next(points_iter)
 */
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L14_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      __pyx_L18_try_end:;
    }

    /* "srctools/_math.pyx":865
 *         # The error messages match those produced by min()/max().
 * 
 *         if len(points) == 1:             # <<<<<<<<<<<<<<
 *             if isinstance(points[0], Vec):
 *                 # Special case, don't iter over the vec, just copy.
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":905
 *             except StopIteration:
 *                 pass
 *         elif len(points) == 0:             # <<<<<<<<<<<<<<
 *             raise TypeError(
 *                 'Vec.bbox() expected at '
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_points); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 905, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_2 == 0) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "srctools/_math.pyx":906
 *                 pass
 *         elif len(points) == 0:
 *             raise TypeError(             # <<<<<<<<<<<<<<
 *                 'Vec.bbox() expected at '
 *                 'least 1 argument, got 0.'
 */
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 906, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_Raise(__pyx_t_11, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __PYX_ERR(0, 906, __pyx_L1_error)

    /* "srctools/_math.pyx":905
 *             except StopIteration:
 *                 pass
 *         elif len(points) == 0:             # <<<<<<<<<<<<<<
 *             raise TypeError(
 *                 'Vec.bbox() expected at '
 */
  }

  /* "srctools/_math.pyx":912
 *         else:
 *             # Tuple-specific.
 *             conv_vec(&bbox_min.val, points[0], scalar=False)             # <<<<<<<<<<<<<<
 *             bbox_max.val = bbox_min.val
 * 
 */
  /*else*/ {
    __pyx_t_11 = __Pyx_GetItemInt_Tuple(__pyx_v_points, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_13 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_bbox_min->val), __pyx_t_11, 0); if (unlikely(__pyx_t_13 == ((unsigned char)0))) __PYX_ERR(0, 912, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "srctools/_math.pyx":913
 *             # Tuple-specific.
 *             conv_vec(&bbox_min.val, points[0], scalar=False)
 *             bbox_max.val = bbox_min.val             # <<<<<<<<<<<<<<
 * 
 *             for i in range(1, len(points)):
 */
    __pyx_t_6 = __pyx_v_bbox_min->val;
    __pyx_v_bbox_max->val = __pyx_t_6;

    /* "srctools/_math.pyx":915
 *             bbox_max.val = bbox_min.val
 * 
 *             for i in range(1, len(points)):             # <<<<<<<<<<<<<<
 *                 point = points[i]
 *                 conv_vec(&vec, point, scalar=False)
 */
    __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_points); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 915, __pyx_L1_error)
    __pyx_t_15 = __pyx_t_2;
    for (__pyx_t_16 = 1; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_i = __pyx_t_16;

      /* "srctools/_math.pyx":916
 * 
 *             for i in range(1, len(points)):
 *                 point = points[i]             # <<<<<<<<<<<<<<
 *                 conv_vec(&vec, point, scalar=False)
 * 
 */
      __pyx_t_11 = __Pyx_GetItemInt_Tuple(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 916, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_XDECREF_SET(__pyx_v_point, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "srctools/_math.pyx":917
 *             for i in range(1, len(points)):
 *                 point = points[i]
 *                 conv_vec(&vec, point, scalar=False)             # <<<<<<<<<<<<<<
 * 
 *                 if bbox_max.val.x < vec.x:
 */
      __pyx_t_13 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec), __pyx_v_point, 0); if (unlikely(__pyx_t_13 == ((unsigned char)0))) __PYX_ERR(0, 917, __pyx_L1_error)

      /* "srctools/_math.pyx":919
 *                 conv_vec(&vec, point, scalar=False)
 * 
 *                 if bbox_max.val.x < vec.x:             # <<<<<<<<<<<<<<
 *                     bbox_max.val.x = vec.x
 * 
 */
      __pyx_t_4 = ((__pyx_v_bbox_max->val.x < __pyx_v_vec.x) != 0);
      if (__pyx_t_4) {

        /* "srctools/_math.pyx":920
 * 
 *                 if bbox_max.val.x < vec.x:
 *                     bbox_max.val.x = vec.x             # <<<<<<<<<<<<<<
 * 
 *                 if bbox_max.val.y < vec.y:
 */
        __pyx_t_14 = __pyx_v_vec.x;
        __pyx_v_bbox_max->val.x = __pyx_t_14;

        /* "srctools/_math.pyx":919
 *                 conv_vec(&vec, point, scalar=False)
 * 
 *                 if bbox_max.val.x < vec.x:             # <<<<<<<<<<<<<<
 *                     bbox_max.val.x = vec.x
 * 
 */
      }

      /* "srctools/_math.pyx":922
 *                     bbox_max.val.x = vec.x
 * 
 *                 if bbox_max.val.y < vec.y:             # <<<<<<<<<<<<<<
 *                     bbox_max.val.y = vec.y
 * 
 */
      __pyx_t_4 = ((__pyx_v_bbox_max->val.y < __pyx_v_vec.y) != 0);
      if (__pyx_t_4) {

        /* "srctools/_math.pyx":923
 * 
 *                 if bbox_max.val.y < vec.y:
 *                     bbox_max.val.y = vec.y             # <<<<<<<<<<<<<<
 * 
 *                 if bbox_max.val.z < vec.z:
 */
        __pyx_t_14 = __pyx_v_vec.y;
        __pyx_v_bbox_max->val.y = __pyx_t_14;

        /* "srctools/_math.pyx":922
 *                     bbox_max.val.x = vec.x
 * 
 *                 if bbox_max.val.y < vec.y:             # <<<<<<<<<<<<<<
 *                     bbox_max.val.y = vec.y
 * 
 */
      }

      /* "srctools/_math.pyx":925
 *                     bbox_max.val.y = vec.y
 * 
 *                 if bbox_max.val.z < vec.z:             # <<<<<<<<<<<<<<
 *                     bbox_max.val.z = vec.z
 * 
 */
      __pyx_t_4 = ((__pyx_v_bbox_max->val.z < __pyx_v_vec.z) != 0);
      if (__pyx_t_4) {

        /* "srctools/_math.pyx":926
 * 
 *                 if bbox_max.val.z < vec.z:
 *                     bbox_max.val.z = vec.z             # <<<<<<<<<<<<<<
 * 
 *                 if bbox_min.val.x > vec.x:
 */
        __pyx_t_14 = __pyx_v_vec.z;
        __pyx_v_bbox_max->val.z = __pyx_t_14;

        /* "srctools/_math.pyx":925
 *                     bbox_max.val.y = vec.y
 * 
 *                 if bbox_max.val.z < vec.z:             # <<<<<<<<<<<<<<
 *                     bbox_max.val.z = vec.z
 * 
 */
      }

      /* "srctools/_math.pyx":928
 *                     bbox_max.val.z = vec.z
 * 
 *                 if bbox_min.val.x > vec.x:             # <<<<<<<<<<<<<<
 *                     bbox_min.val.x = vec.x
 * 
 */
      __pyx_t_4 = ((__pyx_v_bbox_min->val.x > __pyx_v_vec.x) != 0);
      if (__pyx_t_4) {

        /* "srctools/_math.pyx":929
 * 
 *                 if bbox_min.val.x > vec.x:
 *                     bbox_min.val.x = vec.x             # <<<<<<<<<<<<<<
 * 
 *                 if bbox_min.val.y > vec.y:
 */
        __pyx_t_14 = __pyx_v_vec.x;
        __pyx_v_bbox_min->val.x = __pyx_t_14;

        /* "srctools/_math.pyx":928
 *                     bbox_max.val.z = vec.z
 * 
 *                 if bbox_min.val.x > vec.x:             # <<<<<<<<<<<<<<
 *                     bbox_min.val.x = vec.x
 * 
 */
      }

      /* "srctools/_math.pyx":931
 *                     bbox_min.val.x = vec.x
 * 
 *                 if bbox_min.val.y > vec.y:             # <<<<<<<<<<<<<<
 *                     bbox_min.val.y = vec.y
 * 
 */
      __pyx_t_4 = ((__pyx_v_bbox_min->val.y > __pyx_v_vec.y) != 0);
      if (__pyx_t_4) {

        /* "srctools/_math.pyx":932
 * 
 *                 if bbox_min.val.y > vec.y:
 *                     bbox_min.val.y = vec.y             # <<<<<<<<<<<<<<
 * 
 *                 if bbox_min.val.z > vec.z:
 */
        __pyx_t_14 = __pyx_v_vec.y;
        __pyx_v_bbox_min->val.y = __pyx_t_14;

        /* "srctools/_math.pyx":931
 *                     bbox_min.val.x = vec.x
 * 
 *                 if bbox_min.val.y > vec.y:             # <<<<<<<<<<<<<<
 *                     bbox_min.val.y = vec.y
 * 
 */
      }

      /* "srctools/_math.pyx":934
 *                     bbox_min.val.y = vec.y
 * 
 *                 if bbox_min.val.z > vec.z:             # <<<<<<<<<<<<<<
 *                     bbox_min.val.z = vec.z
 * 
 */
      __pyx_t_4 = ((__pyx_v_bbox_min->val.z > __pyx_v_vec.z) != 0);
      if (__pyx_t_4) {

        /* "srctools/_math.pyx":935
 * 
 *                 if bbox_min.val.z > vec.z:
 *                     bbox_min.val.z = vec.z             # <<<<<<<<<<<<<<
 * 
 *         return bbox_min, bbox_max
 */
        __pyx_t_14 = __pyx_v_vec.z;
        __pyx_v_bbox_min->val.z = __pyx_t_14;

        /* "srctools/_math.pyx":934
 *                     bbox_min.val.y = vec.y
 * 
 *                 if bbox_min.val.z > vec.z:             # <<<<<<<<<<<<<<
 *                     bbox_min.val.z = vec.z
 * 
 */
      }
    }
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":937
 *                     bbox_min.val.z = vec.z
 * 
 *         return bbox_min, bbox_max             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(((PyObject *)__pyx_v_bbox_min));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_bbox_min));
  PyTuple_SET_ITEM(__pyx_t_11, 0, ((PyObject *)__pyx_v_bbox_min));
  __Pyx_INCREF(((PyObject *)__pyx_v_bbox_max));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_bbox_max));
  PyTuple_SET_ITEM(__pyx_t_11, 1, ((PyObject *)__pyx_v_bbox_max));
  __pyx_r = __pyx_t_11;
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":851
 * 
 *     @classmethod
 *     def bbox(cls, *points: Vec) -> 'Tuple[Vec, Vec]':             # <<<<<<<<<<<<<<
 *         """Compute the bounding box for a set of points.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("srctools._math.Vec.bbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bbox_min);
  __Pyx_XDECREF((PyObject *)__pyx_v_bbox_max);
  __Pyx_XDECREF((PyObject *)__pyx_v_sing_vec);
  __Pyx_XDECREF(__pyx_v_points_iter);
  __Pyx_XDECREF(__pyx_v_first);
  __Pyx_XDECREF(__pyx_v_point);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":941
 * 
 *     @classmethod
 *     def iter_grid(             # <<<<<<<<<<<<<<
 *         cls,
 *         min_pos,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_21iter_grid(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_20iter_grid[] = "Vec.iter_grid(type cls, min_pos, max_pos, stride=1)\nLoop over points in a bounding box. All coordinates should be integers.\n\n        Both borders will be included.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_21iter_grid(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_min_pos = 0;
  PyObject *__pyx_v_max_pos = 0;
  PyObject *__pyx_v_stride = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_grid (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_min_pos,&__pyx_n_s_max_pos,&__pyx_n_s_stride,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_pos)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("iter_grid", 0, 2, 3, 1); __PYX_ERR(0, 941, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "iter_grid") < 0)) __PYX_ERR(0, 941, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_min_pos = values[0];
    __pyx_v_max_pos = values[1];
    __pyx_v_stride = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("iter_grid", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 941, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.iter_grid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_20iter_grid(((PyTypeObject*)__pyx_v_cls), __pyx_v_min_pos, __pyx_v_max_pos, __pyx_v_stride);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_20iter_grid(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_min_pos, PyObject *__pyx_v_max_pos, PyObject *__pyx_v_stride) {
  struct __pyx_obj_8srctools_5_math_VecIterGrid *__pyx_v_it = 0;
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_mins;
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_maxs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned char __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  long __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_grid", 0);

  /* "srctools/_math.pyx":951
 *         Both borders will be included.
 *         """
 *         cdef VecIterGrid it = VecIterGrid.__new__(VecIterGrid)             # <<<<<<<<<<<<<<
 *         cdef vec_t mins
 *         cdef vec_t maxs
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_VecIterGrid(((PyTypeObject *)__pyx_ptype_8srctools_5_math_VecIterGrid), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_it = ((struct __pyx_obj_8srctools_5_math_VecIterGrid *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":954
 *         cdef vec_t mins
 *         cdef vec_t maxs
 *         conv_vec(&mins, min_pos, scalar=True)             # <<<<<<<<<<<<<<
 *         conv_vec(&maxs, max_pos, scalar=True)
 * 
 */
  __pyx_t_2 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_mins), __pyx_v_min_pos, 1); if (unlikely(__pyx_t_2 == ((unsigned char)0))) __PYX_ERR(0, 954, __pyx_L1_error)

  /* "srctools/_math.pyx":955
 *         cdef vec_t maxs
 *         conv_vec(&mins, min_pos, scalar=True)
 *         conv_vec(&maxs, max_pos, scalar=True)             # <<<<<<<<<<<<<<
 * 
 *         if maxs.x < mins.x or maxs.y < mins.y or maxs.z < mins.z:
 */
  __pyx_t_2 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_maxs), __pyx_v_max_pos, 1); if (unlikely(__pyx_t_2 == ((unsigned char)0))) __PYX_ERR(0, 955, __pyx_L1_error)

  /* "srctools/_math.pyx":957
 *         conv_vec(&maxs, max_pos, scalar=True)
 * 
 *         if maxs.x < mins.x or maxs.y < mins.y or maxs.z < mins.z:             # <<<<<<<<<<<<<<
 *             return EMPTY_ITER
 * 
 */
  __pyx_t_4 = ((__pyx_v_maxs.x < __pyx_v_mins.x) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_maxs.y < __pyx_v_mins.y) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_maxs.z < __pyx_v_mins.z) != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "srctools/_math.pyx":958
 * 
 *         if maxs.x < mins.x or maxs.y < mins.y or maxs.z < mins.z:
 *             return EMPTY_ITER             # <<<<<<<<<<<<<<
 * 
 *         it.cur_x = it.start_x = int(mins.x)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_8srctools_5_math_EMPTY_ITER);
    __pyx_r = __pyx_v_8srctools_5_math_EMPTY_ITER;
    goto __pyx_L0;

    /* "srctools/_math.pyx":957
 *         conv_vec(&maxs, max_pos, scalar=True)
 * 
 *         if maxs.x < mins.x or maxs.y < mins.y or maxs.z < mins.z:             # <<<<<<<<<<<<<<
 *             return EMPTY_ITER
 * 
 */
  }

  /* "srctools/_math.pyx":960
 *             return EMPTY_ITER
 * 
 *         it.cur_x = it.start_x = int(mins.x)             # <<<<<<<<<<<<<<
 *         it.cur_y = it.start_y = int(mins.y)
 *         it.cur_z = it.start_z = int(mins.z)
 */
  __pyx_v_it->cur_x = ((long)__pyx_v_mins.x);
  __pyx_v_it->start_x = ((long)__pyx_v_mins.x);

  /* "srctools/_math.pyx":961
 * 
 *         it.cur_x = it.start_x = int(mins.x)
 *         it.cur_y = it.start_y = int(mins.y)             # <<<<<<<<<<<<<<
 *         it.cur_z = it.start_z = int(mins.z)
 * 
 */
  __pyx_v_it->cur_y = ((long)__pyx_v_mins.y);
  __pyx_v_it->start_y = ((long)__pyx_v_mins.y);

  /* "srctools/_math.pyx":962
 *         it.cur_x = it.start_x = int(mins.x)
 *         it.cur_y = it.start_y = int(mins.y)
 *         it.cur_z = it.start_z = int(mins.z)             # <<<<<<<<<<<<<<
 * 
 *         it.stop_x = int(maxs.x)
 */
  __pyx_v_it->cur_z = ((long)__pyx_v_mins.z);
  __pyx_v_it->start_z = ((long)__pyx_v_mins.z);

  /* "srctools/_math.pyx":964
 *         it.cur_z = it.start_z = int(mins.z)
 * 
 *         it.stop_x = int(maxs.x)             # <<<<<<<<<<<<<<
 *         it.stop_y = int(maxs.y)
 *         it.stop_z = int(maxs.z)
 */
  __pyx_v_it->stop_x = ((long)__pyx_v_maxs.x);

  /* "srctools/_math.pyx":965
 * 
 *         it.stop_x = int(maxs.x)
 *         it.stop_y = int(maxs.y)             # <<<<<<<<<<<<<<
 *         it.stop_z = int(maxs.z)
 * 
 */
  __pyx_v_it->stop_y = ((long)__pyx_v_maxs.y);

  /* "srctools/_math.pyx":966
 *         it.stop_x = int(maxs.x)
 *         it.stop_y = int(maxs.y)
 *         it.stop_z = int(maxs.z)             # <<<<<<<<<<<<<<
 * 
 *         it.stride = stride
 */
  __pyx_v_it->stop_z = ((long)__pyx_v_maxs.z);

  /* "srctools/_math.pyx":968
 *         it.stop_z = int(maxs.z)
 * 
 *         it.stride = stride             # <<<<<<<<<<<<<<
 * 
 *         return it
 */
  __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_v_stride); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L1_error)
  __pyx_v_it->stride = __pyx_t_5;

  /* "srctools/_math.pyx":970
 *         it.stride = stride
 * 
 *         return it             # <<<<<<<<<<<<<<
 * 
 *     def iter_line(self, end: 'Vec', stride: int=1):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_it));
  __pyx_r = ((PyObject *)__pyx_v_it);
  goto __pyx_L0;

  /* "srctools/_math.pyx":941
 * 
 *     @classmethod
 *     def iter_grid(             # <<<<<<<<<<<<<<
 *         cls,
 *         min_pos,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.iter_grid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_it);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":972
 *         return it
 * 
 *     def iter_line(self, end: 'Vec', stride: int=1):             # <<<<<<<<<<<<<<
 *         """Yield points between this point and 'end' (including both endpoints).
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_23iter_line(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_22iter_line[] = "Vec.iter_line(self, Vec end: u'Vec', stride: int = 1)\nYield points between this point and 'end' (including both endpoints).\n\n        Stride specifies the distance between each point.\n        If the distance is less than the stride, only end-points will be yielded.\n        If they are the same, that point will be yielded.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_23iter_line(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_end = 0;
  PyObject *__pyx_v_stride = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_line (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_end,&__pyx_n_s_stride,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "iter_line") < 0)) __PYX_ERR(0, 972, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_end = ((struct __pyx_obj_8srctools_5_math_Vec *)values[0]);
    __pyx_v_stride = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("iter_line", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 972, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.iter_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_end), __pyx_ptype_8srctools_5_math_Vec, 1, "end", 0))) __PYX_ERR(0, 972, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_22iter_line(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), __pyx_v_end, __pyx_v_stride);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_22iter_line(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_end, PyObject *__pyx_v_stride) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_offset;
  double __pyx_v_length;
  struct __pyx_obj_8srctools_5_math_VecIterLine *__pyx_v_it = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_t_8srctools_5_math_vec_t __pyx_t_2;
  long __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_line", 0);

  /* "srctools/_math.pyx":982
 *         cdef double length
 *         cdef double pos
 *         cdef VecIterLine it = VecIterLine.__new__(VecIterLine)             # <<<<<<<<<<<<<<
 *         offset.x = end.val.x - self.val.x
 *         offset.y = end.val.y - self.val.y
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_VecIterLine(((PyTypeObject *)__pyx_ptype_8srctools_5_math_VecIterLine), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 982, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_it = ((struct __pyx_obj_8srctools_5_math_VecIterLine *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":983
 *         cdef double pos
 *         cdef VecIterLine it = VecIterLine.__new__(VecIterLine)
 *         offset.x = end.val.x - self.val.x             # <<<<<<<<<<<<<<
 *         offset.y = end.val.y - self.val.y
 *         offset.z = end.val.z - self.val.z
 */
  __pyx_v_offset.x = (__pyx_v_end->val.x - __pyx_v_self->val.x);

  /* "srctools/_math.pyx":984
 *         cdef VecIterLine it = VecIterLine.__new__(VecIterLine)
 *         offset.x = end.val.x - self.val.x
 *         offset.y = end.val.y - self.val.y             # <<<<<<<<<<<<<<
 *         offset.z = end.val.z - self.val.z
 * 
 */
  __pyx_v_offset.y = (__pyx_v_end->val.y - __pyx_v_self->val.y);

  /* "srctools/_math.pyx":985
 *         offset.x = end.val.x - self.val.x
 *         offset.y = end.val.y - self.val.y
 *         offset.z = end.val.z - self.val.z             # <<<<<<<<<<<<<<
 * 
 *         length = _vec_mag(&offset)
 */
  __pyx_v_offset.z = (__pyx_v_end->val.z - __pyx_v_self->val.z);

  /* "srctools/_math.pyx":987
 *         offset.z = end.val.z - self.val.z
 * 
 *         length = _vec_mag(&offset)             # <<<<<<<<<<<<<<
 *         _vec_normalise(&it.diff, &offset)
 * 
 */
  __pyx_v_length = __pyx_f_8srctools_5_math__vec_mag((&__pyx_v_offset));

  /* "srctools/_math.pyx":988
 * 
 *         length = _vec_mag(&offset)
 *         _vec_normalise(&it.diff, &offset)             # <<<<<<<<<<<<<<
 * 
 *         it.start = self.val
 */
  __pyx_f_8srctools_5_math__vec_normalise((&__pyx_v_it->diff), (&__pyx_v_offset));

  /* "srctools/_math.pyx":990
 *         _vec_normalise(&it.diff, &offset)
 * 
 *         it.start = self.val             # <<<<<<<<<<<<<<
 *         it.end = end.val
 *         it.cur_off = 0
 */
  __pyx_t_2 = __pyx_v_self->val;
  __pyx_v_it->start = __pyx_t_2;

  /* "srctools/_math.pyx":991
 * 
 *         it.start = self.val
 *         it.end = end.val             # <<<<<<<<<<<<<<
 *         it.cur_off = 0
 *         it.max = int(length)
 */
  __pyx_t_2 = __pyx_v_end->val;
  __pyx_v_it->end = __pyx_t_2;

  /* "srctools/_math.pyx":992
 *         it.start = self.val
 *         it.end = end.val
 *         it.cur_off = 0             # <<<<<<<<<<<<<<
 *         it.max = int(length)
 *         it.stride = int(stride)
 */
  __pyx_v_it->cur_off = 0;

  /* "srctools/_math.pyx":993
 *         it.end = end.val
 *         it.cur_off = 0
 *         it.max = int(length)             # <<<<<<<<<<<<<<
 *         it.stride = int(stride)
 * 
 */
  __pyx_v_it->max = ((long)__pyx_v_length);

  /* "srctools/_math.pyx":994
 *         it.cur_off = 0
 *         it.max = int(length)
 *         it.stride = int(stride)             # <<<<<<<<<<<<<<
 * 
 *         return it
 */
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_v_stride); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_3 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_it->stride = __pyx_t_3;

  /* "srctools/_math.pyx":996
 *         it.stride = int(stride)
 * 
 *         return it             # <<<<<<<<<<<<<<
 * 
 *     def axis(self) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_it));
  __pyx_r = ((PyObject *)__pyx_v_it);
  goto __pyx_L0;

  /* "srctools/_math.pyx":972
 *         return it
 * 
 *     def iter_line(self, end: 'Vec', stride: int=1):             # <<<<<<<<<<<<<<
 *         """Yield points between this point and 'end' (including both endpoints).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.iter_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_it);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":998
 *         return it
 * 
 *     def axis(self) -> str:             # <<<<<<<<<<<<<<
 *         """For a normal vector, return the axis it is on."""
 *         cdef bint x, y, z
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_25axis(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_24axis[] = "Vec.axis(self) -> str\nFor a normal vector, return the axis it is on.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_25axis(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("axis (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_24axis(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_24axis(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_z;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("axis", 0);

  /* "srctools/_math.pyx":1002
 *         cdef bint x, y, z
 *         # Treat extremely close to zero as zero.
 *         x = abs(self.val.x) > TOL             # <<<<<<<<<<<<<<
 *         y = abs(self.val.y) > TOL
 *         z = abs(self.val.z) > TOL
 */
  __pyx_v_x = (fabs(__pyx_v_self->val.x) > 1e-06);

  /* "srctools/_math.pyx":1003
 *         # Treat extremely close to zero as zero.
 *         x = abs(self.val.x) > TOL
 *         y = abs(self.val.y) > TOL             # <<<<<<<<<<<<<<
 *         z = abs(self.val.z) > TOL
 *         if x and not y and not z:
 */
  __pyx_v_y = (fabs(__pyx_v_self->val.y) > 1e-06);

  /* "srctools/_math.pyx":1004
 *         x = abs(self.val.x) > TOL
 *         y = abs(self.val.y) > TOL
 *         z = abs(self.val.z) > TOL             # <<<<<<<<<<<<<<
 *         if x and not y and not z:
 *             return 'x'
 */
  __pyx_v_z = (fabs(__pyx_v_self->val.z) > 1e-06);

  /* "srctools/_math.pyx":1005
 *         y = abs(self.val.y) > TOL
 *         z = abs(self.val.z) > TOL
 *         if x and not y and not z:             # <<<<<<<<<<<<<<
 *             return 'x'
 *         if not x and y and not z:
 */
  __pyx_t_2 = (__pyx_v_x != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_y != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_z != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":1006
 *         z = abs(self.val.z) > TOL
 *         if x and not y and not z:
 *             return 'x'             # <<<<<<<<<<<<<<
 *         if not x and y and not z:
 *             return 'y'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_x);
    __pyx_r = __pyx_n_u_x;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1005
 *         y = abs(self.val.y) > TOL
 *         z = abs(self.val.z) > TOL
 *         if x and not y and not z:             # <<<<<<<<<<<<<<
 *             return 'x'
 *         if not x and y and not z:
 */
  }

  /* "srctools/_math.pyx":1007
 *         if x and not y and not z:
 *             return 'x'
 *         if not x and y and not z:             # <<<<<<<<<<<<<<
 *             return 'y'
 *         if not x and not y and z:
 */
  __pyx_t_2 = ((!(__pyx_v_x != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_y != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_z != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":1008
 *             return 'x'
 *         if not x and y and not z:
 *             return 'y'             # <<<<<<<<<<<<<<
 *         if not x and not y and z:
 *             return 'z'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_y);
    __pyx_r = __pyx_n_u_y;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1007
 *         if x and not y and not z:
 *             return 'x'
 *         if not x and y and not z:             # <<<<<<<<<<<<<<
 *             return 'y'
 *         if not x and not y and z:
 */
  }

  /* "srctools/_math.pyx":1009
 *         if not x and y and not z:
 *             return 'y'
 *         if not x and not y and z:             # <<<<<<<<<<<<<<
 *             return 'z'
 *         raise ValueError(
 */
  __pyx_t_2 = ((!(__pyx_v_x != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_y != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_z != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":1010
 *             return 'y'
 *         if not x and not y and z:
 *             return 'z'             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             f'({self.val.x:g}, {self.val.y:g}, {self.val.z:g}) is '
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_z);
    __pyx_r = __pyx_n_u_z;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1009
 *         if not x and y and not z:
 *             return 'y'
 *         if not x and not y and z:             # <<<<<<<<<<<<<<
 *             return 'z'
 *         raise ValueError(
 */
  }

  /* "srctools/_math.pyx":1012
 *             return 'z'
 *         raise ValueError(
 *             f'({self.val.x:g}, {self.val.y:g}, {self.val.z:g}) is '             # <<<<<<<<<<<<<<
 *             'not an on-axis vector!'
 *         )
 */
  __pyx_t_3 = PyTuple_New(7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __Pyx_INCREF(__pyx_kp_u__7);
  __pyx_t_4 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__7);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u__7);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_Format(__pyx_t_6, __pyx_n_u_g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_INCREF(__pyx_kp_u__8);
  __pyx_t_4 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__8);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__8);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_Format(__pyx_t_7, __pyx_n_u_g); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_kp_u__8);
  __pyx_t_4 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__8);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u__8);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_Format(__pyx_t_6, __pyx_n_u_g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_INCREF(__pyx_kp_u_is_not_an_on_axis_vector);
  __pyx_t_4 += 27;
  __Pyx_GIVEREF(__pyx_kp_u_is_not_an_on_axis_vector);
  PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_kp_u_is_not_an_on_axis_vector);
  __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_3, 7, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "srctools/_math.pyx":1011
 *         if not x and not y and z:
 *             return 'z'
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             f'({self.val.x:g}, {self.val.y:g}, {self.val.z:g}) is '
 *             'not an on-axis vector!'
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 1011, __pyx_L1_error)

  /* "srctools/_math.pyx":998
 *         return it
 * 
 *     def axis(self) -> str:             # <<<<<<<<<<<<<<
 *         """For a normal vector, return the axis it is on."""
 *         cdef bint x, y, z
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("srctools._math.Vec.axis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1017
 * 
 *     @cython.boundscheck(False)
 *     def other_axes(self, object axis) -> 'Tuple[float, float]':             # <<<<<<<<<<<<<<
 *         """Get the values for the other two axes."""
 *         cdef char axis_chr
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_27other_axes(PyObject *__pyx_v_self, PyObject *__pyx_v_axis); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_26other_axes[] = "Vec.other_axes(self, axis) -> u'Tuple[float, float]'\nGet the values for the other two axes.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_27other_axes(PyObject *__pyx_v_self, PyObject *__pyx_v_axis) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("other_axes (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_26other_axes(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_axis));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_26other_axes(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_axis) {
  char __pyx_v_axis_chr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("other_axes", 0);

  /* "srctools/_math.pyx":1020
 *         """Get the values for the other two axes."""
 *         cdef char axis_chr
 *         if isinstance(axis, str) and len(<str>axis) == 1:             # <<<<<<<<<<<<<<
 *             axis_chr = (<str>axis)[0]
 *         else:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_axis); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  if (unlikely(__pyx_v_axis == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1020, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyUnicode_GET_LENGTH(((PyObject*)__pyx_v_axis)); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1020, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_4 == 1) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "srctools/_math.pyx":1021
 *         cdef char axis_chr
 *         if isinstance(axis, str) and len(<str>axis) == 1:
 *             axis_chr = (<str>axis)[0]             # <<<<<<<<<<<<<<
 *         else:
 *             raise KeyError(f'Invalid axis {axis!r}' '!')
 */
    __pyx_t_5 = __Pyx_GetItemInt_Unicode(__pyx_v_axis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_5 == (Py_UCS4)-1)) __PYX_ERR(0, 1021, __pyx_L1_error)
    __pyx_v_axis_chr = __pyx_t_5;

    /* "srctools/_math.pyx":1020
 *         """Get the values for the other two axes."""
 *         cdef char axis_chr
 *         if isinstance(axis, str) and len(<str>axis) == 1:             # <<<<<<<<<<<<<<
 *             axis_chr = (<str>axis)[0]
 *         else:
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1023
 *             axis_chr = (<str>axis)[0]
 *         else:
 *             raise KeyError(f'Invalid axis {axis!r}' '!')             # <<<<<<<<<<<<<<
 *         if axis_chr == b'x':
 *             return self.val.y, self.val.z
 */
  /*else*/ {
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1023, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_axis);
    __pyx_t_4 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_axis);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Invalid_axis);
    __pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_axis), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1023, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__4);
    __pyx_t_4 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__4);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u__4);
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_6, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1023, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1023, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1023, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":1024
 *         else:
 *             raise KeyError(f'Invalid axis {axis!r}' '!')
 *         if axis_chr == b'x':             # <<<<<<<<<<<<<<
 *             return self.val.y, self.val.z
 *         elif axis_chr == b'y':
 */
  switch (__pyx_v_axis_chr) {
    case 'x':

    /* "srctools/_math.pyx":1025
 *             raise KeyError(f'Invalid axis {axis!r}' '!')
 *         if axis_chr == b'x':
 *             return self.val.y, self.val.z             # <<<<<<<<<<<<<<
 *         elif axis_chr == b'y':
 *             return self.val.x, self.val.z
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1024
 *         else:
 *             raise KeyError(f'Invalid axis {axis!r}' '!')
 *         if axis_chr == b'x':             # <<<<<<<<<<<<<<
 *             return self.val.y, self.val.z
 *         elif axis_chr == b'y':
 */
    break;
    case 'y':

    /* "srctools/_math.pyx":1027
 *             return self.val.y, self.val.z
 *         elif axis_chr == b'y':
 *             return self.val.x, self.val.z             # <<<<<<<<<<<<<<
 *         elif axis_chr == b'z':
 *             return self.val.x, self.val.y
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
    __pyx_t_8 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1026
 *         if axis_chr == b'x':
 *             return self.val.y, self.val.z
 *         elif axis_chr == b'y':             # <<<<<<<<<<<<<<
 *             return self.val.x, self.val.z
 *         elif axis_chr == b'z':
 */
    break;
    case 'z':

    /* "srctools/_math.pyx":1029
 *             return self.val.x, self.val.z
 *         elif axis_chr == b'z':
 *             return self.val.x, self.val.y             # <<<<<<<<<<<<<<
 *         else:
 *             raise KeyError(f'Invalid axis {axis!r}' '!')
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1028
 *         elif axis_chr == b'y':
 *             return self.val.x, self.val.z
 *         elif axis_chr == b'z':             # <<<<<<<<<<<<<<
 *             return self.val.x, self.val.y
 *         else:
 */
    break;
    default:

    /* "srctools/_math.pyx":1031
 *             return self.val.x, self.val.y
 *         else:
 *             raise KeyError(f'Invalid axis {axis!r}' '!')             # <<<<<<<<<<<<<<
 * 
 *     def in_bbox(self, a, b):
 */
    __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_axis);
    __pyx_t_4 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_axis);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_Invalid_axis);
    __pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_axis), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__4);
    __pyx_t_4 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__4);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u__4);
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_8, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(0, 1031, __pyx_L1_error)
    break;
  }

  /* "srctools/_math.pyx":1017
 * 
 *     @cython.boundscheck(False)
 *     def other_axes(self, object axis) -> 'Tuple[float, float]':             # <<<<<<<<<<<<<<
 *         """Get the values for the other two axes."""
 *         cdef char axis_chr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srctools._math.Vec.other_axes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1033
 *             raise KeyError(f'Invalid axis {axis!r}' '!')
 * 
 *     def in_bbox(self, a, b):             # <<<<<<<<<<<<<<
 *         """Check if this point is inside the specified bounding box."""
 *         cdef vec_t avec, bvec
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_29in_bbox(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_28in_bbox[] = "Vec.in_bbox(self, a, b)\nCheck if this point is inside the specified bounding box.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_29in_bbox(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("in_bbox (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("in_bbox", 1, 2, 2, 1); __PYX_ERR(0, 1033, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "in_bbox") < 0)) __PYX_ERR(0, 1033, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("in_bbox", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1033, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.in_bbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_28in_bbox(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_28in_bbox(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_avec;
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_bvec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned char __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("in_bbox", 0);

  /* "srctools/_math.pyx":1036
 *         """Check if this point is inside the specified bounding box."""
 *         cdef vec_t avec, bvec
 *         conv_vec(&avec, a, scalar=False)             # <<<<<<<<<<<<<<
 *         conv_vec(&bvec, b, scalar=False)
 *         if avec.x > bvec.x:
 */
  __pyx_t_1 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_avec), __pyx_v_a, 0); if (unlikely(__pyx_t_1 == ((unsigned char)0))) __PYX_ERR(0, 1036, __pyx_L1_error)

  /* "srctools/_math.pyx":1037
 *         cdef vec_t avec, bvec
 *         conv_vec(&avec, a, scalar=False)
 *         conv_vec(&bvec, b, scalar=False)             # <<<<<<<<<<<<<<
 *         if avec.x > bvec.x:
 *             avec.x, bvec.x = bvec.x, avec.x
 */
  __pyx_t_1 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_bvec), __pyx_v_b, 0); if (unlikely(__pyx_t_1 == ((unsigned char)0))) __PYX_ERR(0, 1037, __pyx_L1_error)

  /* "srctools/_math.pyx":1038
 *         conv_vec(&avec, a, scalar=False)
 *         conv_vec(&bvec, b, scalar=False)
 *         if avec.x > bvec.x:             # <<<<<<<<<<<<<<
 *             avec.x, bvec.x = bvec.x, avec.x
 *         if avec.y > bvec.y:
 */
  __pyx_t_2 = ((__pyx_v_avec.x > __pyx_v_bvec.x) != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1039
 *         conv_vec(&bvec, b, scalar=False)
 *         if avec.x > bvec.x:
 *             avec.x, bvec.x = bvec.x, avec.x             # <<<<<<<<<<<<<<
 *         if avec.y > bvec.y:
 *             avec.y, bvec.y = bvec.y, avec.y
 */
    __pyx_t_3 = __pyx_v_bvec.x;
    __pyx_t_4 = __pyx_v_avec.x;
    __pyx_v_avec.x = __pyx_t_3;
    __pyx_v_bvec.x = __pyx_t_4;

    /* "srctools/_math.pyx":1038
 *         conv_vec(&avec, a, scalar=False)
 *         conv_vec(&bvec, b, scalar=False)
 *         if avec.x > bvec.x:             # <<<<<<<<<<<<<<
 *             avec.x, bvec.x = bvec.x, avec.x
 *         if avec.y > bvec.y:
 */
  }

  /* "srctools/_math.pyx":1040
 *         if avec.x > bvec.x:
 *             avec.x, bvec.x = bvec.x, avec.x
 *         if avec.y > bvec.y:             # <<<<<<<<<<<<<<
 *             avec.y, bvec.y = bvec.y, avec.y
 *         if avec.z > bvec.z:
 */
  __pyx_t_2 = ((__pyx_v_avec.y > __pyx_v_bvec.y) != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1041
 *             avec.x, bvec.x = bvec.x, avec.x
 *         if avec.y > bvec.y:
 *             avec.y, bvec.y = bvec.y, avec.y             # <<<<<<<<<<<<<<
 *         if avec.z > bvec.z:
 *             avec.z, bvec.z = bvec.z, avec.z
 */
    __pyx_t_4 = __pyx_v_bvec.y;
    __pyx_t_3 = __pyx_v_avec.y;
    __pyx_v_avec.y = __pyx_t_4;
    __pyx_v_bvec.y = __pyx_t_3;

    /* "srctools/_math.pyx":1040
 *         if avec.x > bvec.x:
 *             avec.x, bvec.x = bvec.x, avec.x
 *         if avec.y > bvec.y:             # <<<<<<<<<<<<<<
 *             avec.y, bvec.y = bvec.y, avec.y
 *         if avec.z > bvec.z:
 */
  }

  /* "srctools/_math.pyx":1042
 *         if avec.y > bvec.y:
 *             avec.y, bvec.y = bvec.y, avec.y
 *         if avec.z > bvec.z:             # <<<<<<<<<<<<<<
 *             avec.z, bvec.z = bvec.z, avec.z
 * 
 */
  __pyx_t_2 = ((__pyx_v_avec.z > __pyx_v_bvec.z) != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1043
 *             avec.y, bvec.y = bvec.y, avec.y
 *         if avec.z > bvec.z:
 *             avec.z, bvec.z = bvec.z, avec.z             # <<<<<<<<<<<<<<
 * 
 *         return (
 */
    __pyx_t_3 = __pyx_v_bvec.z;
    __pyx_t_4 = __pyx_v_avec.z;
    __pyx_v_avec.z = __pyx_t_3;
    __pyx_v_bvec.z = __pyx_t_4;

    /* "srctools/_math.pyx":1042
 *         if avec.y > bvec.y:
 *             avec.y, bvec.y = bvec.y, avec.y
 *         if avec.z > bvec.z:             # <<<<<<<<<<<<<<
 *             avec.z, bvec.z = bvec.z, avec.z
 * 
 */
  }

  /* "srctools/_math.pyx":1045
 *             avec.z, bvec.z = bvec.z, avec.z
 * 
 *         return (             # <<<<<<<<<<<<<<
 *             avec.x <= self.val.x <= bvec.x and
 *             avec.y <= self.val.y <= bvec.y and
 */
  __Pyx_XDECREF(__pyx_r);

  /* "srctools/_math.pyx":1046
 * 
 *         return (
 *             avec.x <= self.val.x <= bvec.x and             # <<<<<<<<<<<<<<
 *             avec.y <= self.val.y <= bvec.y and
 *             avec.z <= self.val.z <= bvec.z
 */
  __pyx_t_2 = (__pyx_v_avec.x <= __pyx_v_self->val.x);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v_self->val.x <= __pyx_v_bvec.x);
  }
  if (__pyx_t_2) {
  } else {
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L6_bool_binop_done;
  }

  /* "srctools/_math.pyx":1047
 *         return (
 *             avec.x <= self.val.x <= bvec.x and
 *             avec.y <= self.val.y <= bvec.y and             # <<<<<<<<<<<<<<
 *             avec.z <= self.val.z <= bvec.z
 *         )
 */
  __pyx_t_2 = (__pyx_v_avec.y <= __pyx_v_self->val.y);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v_self->val.y <= __pyx_v_bvec.y);
  }
  if (__pyx_t_2) {
  } else {
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1047, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L6_bool_binop_done;
  }

  /* "srctools/_math.pyx":1048
 *             avec.x <= self.val.x <= bvec.x and
 *             avec.y <= self.val.y <= bvec.y and
 *             avec.z <= self.val.z <= bvec.z             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_2 = (__pyx_v_avec.z <= __pyx_v_self->val.z);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v_self->val.z <= __pyx_v_bvec.z);
  }
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_L6_bool_binop_done:;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1033
 *             raise KeyError(f'Invalid axis {axis!r}' '!')
 * 
 *     def in_bbox(self, a, b):             # <<<<<<<<<<<<<<
 *         """Check if this point is inside the specified bounding box."""
 *         cdef vec_t avec, bvec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("srctools._math.Vec.in_bbox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1052
 * 
 *     @staticmethod
 *     def bbox_intersect(min1: Vec, max1: Vec, min2: Vec, max2: Vec) -> bool:             # <<<<<<<<<<<<<<
 *         """Check if the (min1, max1) bbox intersects the (min2, max2) bbox."""
 *         return not (
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_31bbox_intersect(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_30bbox_intersect[] = "Vec.bbox_intersect(Vec min1: Vec, Vec max1: Vec, Vec min2: Vec, Vec max2: Vec) -> bool\nCheck if the (min1, max1) bbox intersects the (min2, max2) bbox.";
static PyMethodDef __pyx_mdef_8srctools_5_math_3Vec_31bbox_intersect = {"bbox_intersect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_31bbox_intersect, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_30bbox_intersect};
static PyObject *__pyx_pw_8srctools_5_math_3Vec_31bbox_intersect(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_min1 = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_max1 = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_min2 = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_max2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bbox_intersect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_min1,&__pyx_n_s_max1,&__pyx_n_s_min2,&__pyx_n_s_max2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bbox_intersect", 1, 4, 4, 1); __PYX_ERR(0, 1052, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bbox_intersect", 1, 4, 4, 2); __PYX_ERR(0, 1052, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bbox_intersect", 1, 4, 4, 3); __PYX_ERR(0, 1052, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bbox_intersect") < 0)) __PYX_ERR(0, 1052, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_min1 = ((struct __pyx_obj_8srctools_5_math_Vec *)values[0]);
    __pyx_v_max1 = ((struct __pyx_obj_8srctools_5_math_Vec *)values[1]);
    __pyx_v_min2 = ((struct __pyx_obj_8srctools_5_math_Vec *)values[2]);
    __pyx_v_max2 = ((struct __pyx_obj_8srctools_5_math_Vec *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bbox_intersect", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1052, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.bbox_intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_min1), __pyx_ptype_8srctools_5_math_Vec, 1, "min1", 0))) __PYX_ERR(0, 1052, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_max1), __pyx_ptype_8srctools_5_math_Vec, 1, "max1", 0))) __PYX_ERR(0, 1052, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_min2), __pyx_ptype_8srctools_5_math_Vec, 1, "min2", 0))) __PYX_ERR(0, 1052, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_max2), __pyx_ptype_8srctools_5_math_Vec, 1, "max2", 0))) __PYX_ERR(0, 1052, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_30bbox_intersect(__pyx_v_min1, __pyx_v_max1, __pyx_v_min2, __pyx_v_max2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_30bbox_intersect(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_min1, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_max1, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_min2, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_max2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bbox_intersect", 0);

  /* "srctools/_math.pyx":1054
 *     def bbox_intersect(min1: Vec, max1: Vec, min2: Vec, max2: Vec) -> bool:
 *         """Check if the (min1, max1) bbox intersects the (min2, max2) bbox."""
 *         return not (             # <<<<<<<<<<<<<<
 *             max1.val.x < min2.val.x or max2.val.x < min1.val.x or
 *             max1.val.y < min2.val.y or max2.val.y < min1.val.y or
 */
  __Pyx_XDECREF(__pyx_r);

  /* "srctools/_math.pyx":1055
 *         """Check if the (min1, max1) bbox intersects the (min2, max2) bbox."""
 *         return not (
 *             max1.val.x < min2.val.x or max2.val.x < min1.val.x or             # <<<<<<<<<<<<<<
 *             max1.val.y < min2.val.y or max2.val.y < min1.val.y or
 *             max1.val.z < min2.val.z or max2.val.z < min1.val.z
 */
  __pyx_t_2 = ((__pyx_v_max1->val.x < __pyx_v_min2->val.x) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_max2->val.x < __pyx_v_min1->val.x) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }

  /* "srctools/_math.pyx":1056
 *         return not (
 *             max1.val.x < min2.val.x or max2.val.x < min1.val.x or
 *             max1.val.y < min2.val.y or max2.val.y < min1.val.y or             # <<<<<<<<<<<<<<
 *             max1.val.z < min2.val.z or max2.val.z < min1.val.z
 *         )
 */
  __pyx_t_2 = ((__pyx_v_max1->val.y < __pyx_v_min2->val.y) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_max2->val.y < __pyx_v_min1->val.y) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }

  /* "srctools/_math.pyx":1057
 *             max1.val.x < min2.val.x or max2.val.x < min1.val.x or
 *             max1.val.y < min2.val.y or max2.val.y < min1.val.y or
 *             max1.val.z < min2.val.z or max2.val.z < min1.val.z             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_2 = ((__pyx_v_max1->val.z < __pyx_v_min2->val.z) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_max2->val.z < __pyx_v_min1->val.z) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;

  /* "srctools/_math.pyx":1054
 *     def bbox_intersect(min1: Vec, max1: Vec, min2: Vec, max2: Vec) -> bool:
 *         """Check if the (min1, max1) bbox intersects the (min2, max2) bbox."""
 *         return not (             # <<<<<<<<<<<<<<
 *             max1.val.x < min2.val.x or max2.val.x < min1.val.x or
 *             max1.val.y < min2.val.y or max2.val.y < min1.val.y or
 */
  __pyx_t_3 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1052
 * 
 *     @staticmethod
 *     def bbox_intersect(min1: Vec, max1: Vec, min2: Vec, max2: Vec) -> bool:             # <<<<<<<<<<<<<<
 *         """Check if the (min1, max1) bbox intersects the (min2, max2) bbox."""
 *         return not (
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("srctools._math.Vec.bbox_intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1060
 *         )
 * 
 *     def as_tuple(self) -> 'Tuple[float, float, float]':             # <<<<<<<<<<<<<<
 *         """Return the Vector as a tuple."""
 *         # Use tuple.__new__(cls, iterable) instead of calling the
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_33as_tuple(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_32as_tuple[] = "Vec.as_tuple(self) -> u'Tuple[float, float, float]'\nReturn the Vector as a tuple.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_33as_tuple(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_tuple (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_32as_tuple(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_32as_tuple(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_tuple", 0);

  /* "srctools/_math.pyx":1064
 *         # Use tuple.__new__(cls, iterable) instead of calling the
 *         # Python __new__.
 *         return _make_tuple(self.val.x, self.val.y, self.val.z)             # <<<<<<<<<<<<<<
 * 
 *     def to_angle(self, double roll: float=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8srctools_5_math__make_tuple(__pyx_v_self->val.x, __pyx_v_self->val.y, __pyx_v_self->val.z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1060
 *         )
 * 
 *     def as_tuple(self) -> 'Tuple[float, float, float]':             # <<<<<<<<<<<<<<
 *         """Return the Vector as a tuple."""
 *         # Use tuple.__new__(cls, iterable) instead of calling the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.as_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1066
 *         return _make_tuple(self.val.x, self.val.y, self.val.z)
 * 
 *     def to_angle(self, double roll: float=0):             # <<<<<<<<<<<<<<
 *         """Convert a normal to a Source Engine angle.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_35to_angle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_34to_angle[] = "Vec.to_angle(self, double roll: float = 0)\nConvert a normal to a Source Engine angle.\n\n        A +x axis vector will result in a 0, 0, 0 angle. The roll is not\n        affected by the direction of the normal.\n\n        The inverse of this is `Vec(x=1).rotate(pitch, yaw, roll)`.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_35to_angle(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_roll;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_angle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_roll,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_roll);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "to_angle") < 0)) __PYX_ERR(0, 1066, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_roll = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_roll == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L3_error)
    } else {
      __pyx_v_roll = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to_angle", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1066, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.to_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_34to_angle(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), __pyx_v_roll);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_34to_angle(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, double __pyx_v_roll) {
  double __pyx_v_horiz_dist;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_angle", 0);

  /* "srctools/_math.pyx":1075
 *         """
 *         # Pitch is applied first, so we need to reconstruct the x-value.
 *         cdef double horiz_dist = math.sqrt(self.val.x ** 2 + self.val.y ** 2)             # <<<<<<<<<<<<<<
 * 
 *         return _angle(
 */
  __pyx_v_horiz_dist = sqrt((pow(__pyx_v_self->val.x, 2.0) + pow(__pyx_v_self->val.y, 2.0)));

  /* "srctools/_math.pyx":1077
 *         cdef double horiz_dist = math.sqrt(self.val.x ** 2 + self.val.y ** 2)
 * 
 *         return _angle(             # <<<<<<<<<<<<<<
 *             norm_ang(rad_2_deg * math.atan2(-self.val.z, horiz_dist)),
 *             norm_ang(math.atan2(self.val.y, self.val.x) * rad_2_deg),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "srctools/_math.pyx":1080
 *             norm_ang(rad_2_deg * math.atan2(-self.val.z, horiz_dist)),
 *             norm_ang(math.atan2(self.val.y, self.val.x) * rad_2_deg),
 *             norm_ang(roll),             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8srctools_5_math__angle(__pyx_f_8srctools_5_math_norm_ang((57.29577951308232 * atan2((-__pyx_v_self->val.z), __pyx_v_horiz_dist))), __pyx_f_8srctools_5_math_norm_ang((atan2(__pyx_v_self->val.y, __pyx_v_self->val.x) * 57.29577951308232)), __pyx_f_8srctools_5_math_norm_ang(__pyx_v_roll))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1066
 *         return _make_tuple(self.val.x, self.val.y, self.val.z)
 * 
 *     def to_angle(self, double roll: float=0):             # <<<<<<<<<<<<<<
 *         """Convert a normal to a Source Engine angle.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.to_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1083
 *         )
 * 
 *     def to_angle_roll(self, z_norm: 'Vec', stride: int=...) -> 'Angle':             # <<<<<<<<<<<<<<
 *         """Produce a Source Engine angle with roll.
 * 
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pw_8srctools_5_math_3Vec_37to_angle_roll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_36to_angle_roll[] = "Vec.to_angle_roll(self, Vec z_norm: u'Vec', stride: int = ...) -> u'Angle'\nProduce a Source Engine angle with roll.\n\n        The z_normal should point in +z, and must be at right angles to this\n        vector.\n        This is deprecated, use Matrix.from_basis().to_angle().\n        Stride is no longer used.\n        ";
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pw_8srctools_5_math_3Vec_37to_angle_roll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_z_norm = 0;
  CYTHON_UNUSED PyObject *__pyx_v_stride = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_angle_roll (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_z_norm,&__pyx_n_s_stride,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_Ellipsis);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z_norm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stride);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "to_angle_roll") < 0)) __PYX_ERR(0, 1083, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_z_norm = ((struct __pyx_obj_8srctools_5_math_Vec *)values[0]);
    __pyx_v_stride = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to_angle_roll", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1083, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.to_angle_roll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_z_norm), __pyx_ptype_8srctools_5_math_Vec, 1, "z_norm", 0))) __PYX_ERR(0, 1083, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_36to_angle_roll(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), __pyx_v_z_norm, __pyx_v_stride);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pf_8srctools_5_math_3Vec_36to_angle_roll(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_z_norm, CYTHON_UNUSED PyObject *__pyx_v_stride) {
  __pyx_t_8srctools_5_math_mat_t __pyx_v_mat;
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang = 0;
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_angle_roll", 0);

  /* "srctools/_math.pyx":1093
 *         cdef mat_t mat
 *         cdef Angle ang
 *         PyErr_WarnEx(DeprecationWarning, 'Use Matrix.from_basis().to_angle()', 1)             # <<<<<<<<<<<<<<
 *         ang = Angle.__new__(Angle)
 * 
 */
  __pyx_t_1 = PyErr_WarnEx(__pyx_builtin_DeprecationWarning, ((char *)"Use Matrix.from_basis().to_angle()"), 1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1093, __pyx_L1_error)

  /* "srctools/_math.pyx":1094
 *         cdef Angle ang
 *         PyErr_WarnEx(DeprecationWarning, 'Use Matrix.from_basis().to_angle()', 1)
 *         ang = Angle.__new__(Angle)             # <<<<<<<<<<<<<<
 * 
 *         _mat_from_basis(mat, x=self, z=z_norm, y=None)
 */
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Angle(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Angle), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_v_ang = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "srctools/_math.pyx":1096
 *         ang = Angle.__new__(Angle)
 * 
 *         _mat_from_basis(mat, x=self, z=z_norm, y=None)             # <<<<<<<<<<<<<<
 *         _mat_to_angle(&ang.val, mat)
 *         return ang
 */
  __pyx_t_3 = __pyx_f_8srctools_5_math__mat_from_basis(__pyx_v_mat, __pyx_v_self, ((struct __pyx_obj_8srctools_5_math_Vec *)Py_None), __pyx_v_z_norm); if (unlikely(__pyx_t_3 == ((int)1))) __PYX_ERR(0, 1096, __pyx_L1_error)

  /* "srctools/_math.pyx":1097
 * 
 *         _mat_from_basis(mat, x=self, z=z_norm, y=None)
 *         _mat_to_angle(&ang.val, mat)             # <<<<<<<<<<<<<<
 *         return ang
 * 
 */
  __pyx_f_8srctools_5_math__mat_to_angle((&__pyx_v_ang->val), __pyx_v_mat);

  /* "srctools/_math.pyx":1098
 *         _mat_from_basis(mat, x=self, z=z_norm, y=None)
 *         _mat_to_angle(&ang.val, mat)
 *         return ang             # <<<<<<<<<<<<<<
 * 
 *     def rotation_around(self, double rot: float=90) -> 'Vec':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_ang));
  __pyx_r = __pyx_v_ang;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1083
 *         )
 * 
 *     def to_angle_roll(self, z_norm: 'Vec', stride: int=...) -> 'Angle':             # <<<<<<<<<<<<<<
 *         """Produce a Source Engine angle with roll.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srctools._math.Vec.to_angle_roll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ang);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1100
 *         return ang
 * 
 *     def rotation_around(self, double rot: float=90) -> 'Vec':             # <<<<<<<<<<<<<<
 *         """For an axis-aligned normal, return the angles which rotate around it.
 * 
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pw_8srctools_5_math_3Vec_39rotation_around(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_38rotation_around[] = "Vec.rotation_around(self, double rot: float = 90) -> u'Vec'\nFor an axis-aligned normal, return the angles which rotate around it.\n\n        This is deprecated, use Matrix.axis_angle().to_angle() which works\n        for any orientation and has a consistent direction.\n        ";
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pw_8srctools_5_math_3Vec_39rotation_around(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_rot;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotation_around (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rot,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rot);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rotation_around") < 0)) __PYX_ERR(0, 1100, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_rot = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_rot == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1100, __pyx_L3_error)
    } else {
      __pyx_v_rot = ((double)90.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rotation_around", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1100, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.rotation_around", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_38rotation_around(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), __pyx_v_rot);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pf_8srctools_5_math_3Vec_38rotation_around(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, double __pyx_v_rot) {
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotation_around", 0);

  /* "srctools/_math.pyx":1106
 *         for any orientation and has a consistent direction.
 *         """
 *         cdef Angle ang = Angle.__new__(Angle)             # <<<<<<<<<<<<<<
 *         ang.val.x = ang.val.y = ang.val.z = 0.0
 *         PyErr_WarnEx(DeprecationWarning, 'Use Matrix.axis_angle().to_angle()', 1)
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Angle(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Angle), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ang = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1107
 *         """
 *         cdef Angle ang = Angle.__new__(Angle)
 *         ang.val.x = ang.val.y = ang.val.z = 0.0             # <<<<<<<<<<<<<<
 *         PyErr_WarnEx(DeprecationWarning, 'Use Matrix.axis_angle().to_angle()', 1)
 * 
 */
  __pyx_v_ang->val.x = 0.0;
  __pyx_v_ang->val.y = 0.0;
  __pyx_v_ang->val.z = 0.0;

  /* "srctools/_math.pyx":1108
 *         cdef Angle ang = Angle.__new__(Angle)
 *         ang.val.x = ang.val.y = ang.val.z = 0.0
 *         PyErr_WarnEx(DeprecationWarning, 'Use Matrix.axis_angle().to_angle()', 1)             # <<<<<<<<<<<<<<
 * 
 *         if self.val.x != 0 and self.val.y == 0 and self.val.z == 0:
 */
  __pyx_t_2 = PyErr_WarnEx(__pyx_builtin_DeprecationWarning, ((char *)"Use Matrix.axis_angle().to_angle()"), 1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 1108, __pyx_L1_error)

  /* "srctools/_math.pyx":1110
 *         PyErr_WarnEx(DeprecationWarning, 'Use Matrix.axis_angle().to_angle()', 1)
 * 
 *         if self.val.x != 0 and self.val.y == 0 and self.val.z == 0:             # <<<<<<<<<<<<<<
 *             ang.val.z = norm_ang(math.copysign(rot, self.val.x))
 *         elif self.val.x == 0 and self.val.y != 0 and self.val.z == 0:
 */
  __pyx_t_4 = ((__pyx_v_self->val.x != 0.0) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_self->val.y == 0.0) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_self->val.z == 0.0) != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "srctools/_math.pyx":1111
 * 
 *         if self.val.x != 0 and self.val.y == 0 and self.val.z == 0:
 *             ang.val.z = norm_ang(math.copysign(rot, self.val.x))             # <<<<<<<<<<<<<<
 *         elif self.val.x == 0 and self.val.y != 0 and self.val.z == 0:
 *             ang.val.x = norm_ang(math.copysign(rot, self.val.y))
 */
    __pyx_v_ang->val.z = __pyx_f_8srctools_5_math_norm_ang(copysign(__pyx_v_rot, __pyx_v_self->val.x));

    /* "srctools/_math.pyx":1110
 *         PyErr_WarnEx(DeprecationWarning, 'Use Matrix.axis_angle().to_angle()', 1)
 * 
 *         if self.val.x != 0 and self.val.y == 0 and self.val.z == 0:             # <<<<<<<<<<<<<<
 *             ang.val.z = norm_ang(math.copysign(rot, self.val.x))
 *         elif self.val.x == 0 and self.val.y != 0 and self.val.z == 0:
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1112
 *         if self.val.x != 0 and self.val.y == 0 and self.val.z == 0:
 *             ang.val.z = norm_ang(math.copysign(rot, self.val.x))
 *         elif self.val.x == 0 and self.val.y != 0 and self.val.z == 0:             # <<<<<<<<<<<<<<
 *             ang.val.x = norm_ang(math.copysign(rot, self.val.y))
 *         elif self.val.x == 0 and self.val.y == 0 and self.val.z != 0:
 */
  __pyx_t_4 = ((__pyx_v_self->val.x == 0.0) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_self->val.y != 0.0) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_self->val.z == 0.0) != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_3) {

    /* "srctools/_math.pyx":1113
 *             ang.val.z = norm_ang(math.copysign(rot, self.val.x))
 *         elif self.val.x == 0 and self.val.y != 0 and self.val.z == 0:
 *             ang.val.x = norm_ang(math.copysign(rot, self.val.y))             # <<<<<<<<<<<<<<
 *         elif self.val.x == 0 and self.val.y == 0 and self.val.z != 0:
 *             ang.val.y = norm_ang(math.copysign(rot, self.val.z))
 */
    __pyx_v_ang->val.x = __pyx_f_8srctools_5_math_norm_ang(copysign(__pyx_v_rot, __pyx_v_self->val.y));

    /* "srctools/_math.pyx":1112
 *         if self.val.x != 0 and self.val.y == 0 and self.val.z == 0:
 *             ang.val.z = norm_ang(math.copysign(rot, self.val.x))
 *         elif self.val.x == 0 and self.val.y != 0 and self.val.z == 0:             # <<<<<<<<<<<<<<
 *             ang.val.x = norm_ang(math.copysign(rot, self.val.y))
 *         elif self.val.x == 0 and self.val.y == 0 and self.val.z != 0:
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1114
 *         elif self.val.x == 0 and self.val.y != 0 and self.val.z == 0:
 *             ang.val.x = norm_ang(math.copysign(rot, self.val.y))
 *         elif self.val.x == 0 and self.val.y == 0 and self.val.z != 0:             # <<<<<<<<<<<<<<
 *             ang.val.y = norm_ang(math.copysign(rot, self.val.z))
 *         else:
 */
  __pyx_t_4 = ((__pyx_v_self->val.x == 0.0) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_self->val.y == 0.0) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_self->val.z != 0.0) != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L10_bool_binop_done:;
  if (likely(__pyx_t_3)) {

    /* "srctools/_math.pyx":1115
 *             ang.val.x = norm_ang(math.copysign(rot, self.val.y))
 *         elif self.val.x == 0 and self.val.y == 0 and self.val.z != 0:
 *             ang.val.y = norm_ang(math.copysign(rot, self.val.z))             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(
 */
    __pyx_v_ang->val.y = __pyx_f_8srctools_5_math_norm_ang(copysign(__pyx_v_rot, __pyx_v_self->val.z));

    /* "srctools/_math.pyx":1114
 *         elif self.val.x == 0 and self.val.y != 0 and self.val.z == 0:
 *             ang.val.x = norm_ang(math.copysign(rot, self.val.y))
 *         elif self.val.x == 0 and self.val.y == 0 and self.val.z != 0:             # <<<<<<<<<<<<<<
 *             ang.val.y = norm_ang(math.copysign(rot, self.val.z))
 *         else:
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1117
 *             ang.val.y = norm_ang(math.copysign(rot, self.val.z))
 *         else:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 f'({self.val.x}, {self.val.y}, {self.val.z}) is '
 *                 'not an on-axis vector!'
 */
  /*else*/ {

    /* "srctools/_math.pyx":1118
 *         else:
 *             raise ValueError(
 *                 f'({self.val.x}, {self.val.y}, {self.val.z}) is '             # <<<<<<<<<<<<<<
 *                 'not an on-axis vector!'
 *             )
 */
    __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_6 = 127;
    __Pyx_INCREF(__pyx_kp_u__7);
    __pyx_t_5 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__7);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u__7);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u__8);
    __pyx_t_5 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__8);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__8);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__8);
    __pyx_t_5 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__8);
    PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__8);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_not_an_on_axis_vector);
    __pyx_t_5 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_is_not_an_on_axis_vector);
    PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_is_not_an_on_axis_vector);
    __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "srctools/_math.pyx":1117
 *             ang.val.y = norm_ang(math.copysign(rot, self.val.z))
 *         else:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 f'({self.val.x}, {self.val.y}, {self.val.z}) is '
 *                 'not an on-axis vector!'
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1117, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":1121
 *                 'not an on-axis vector!'
 *             )
 *         return ang             # <<<<<<<<<<<<<<
 * 
 *     def __abs__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  if (!(likely(((((PyObject *)__pyx_v_ang)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_ang), __pyx_ptype_8srctools_5_math_Vec))))) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_INCREF(((PyObject *)__pyx_v_ang));
  __pyx_r = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_ang);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1100
 *         return ang
 * 
 *     def rotation_around(self, double rot: float=90) -> 'Vec':             # <<<<<<<<<<<<<<
 *         """For an axis-aligned normal, return the angles which rotate around it.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srctools._math.Vec.rotation_around", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ang);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1123
 *         return ang
 * 
 *     def __abs__(self):             # <<<<<<<<<<<<<<
 *         """Performing abs() on a Vec takes the absolute value of all axes."""
 *         return _vector(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_41__abs__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_40__abs__[] = "Performing abs() on a Vec takes the absolute value of all axes.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_40__abs__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_41__abs__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__abs__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_40__abs__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_40__abs__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__abs__", 0);

  /* "srctools/_math.pyx":1125
 *     def __abs__(self):
 *         """Performing abs() on a Vec takes the absolute value of all axes."""
 *         return _vector(             # <<<<<<<<<<<<<<
 *             abs(self.val.x),
 *             abs(self.val.y),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "srctools/_math.pyx":1128
 *             abs(self.val.x),
 *             abs(self.val.y),
 *             abs(self.val.z),             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8srctools_5_math__vector(fabs(__pyx_v_self->val.x), fabs(__pyx_v_self->val.y), fabs(__pyx_v_self->val.z))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1123
 *         return ang
 * 
 *     def __abs__(self):             # <<<<<<<<<<<<<<
 *         """Performing abs() on a Vec takes the absolute value of all axes."""
 *         return _vector(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.__abs__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1131
 *         )
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         """The inverted form of a Vector has inverted axes."""
 *         return _vector(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_43__neg__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_42__neg__[] = "The inverted form of a Vector has inverted axes.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_42__neg__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_43__neg__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_42__neg__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_42__neg__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__neg__", 0);

  /* "srctools/_math.pyx":1133
 *     def __neg__(self):
 *         """The inverted form of a Vector has inverted axes."""
 *         return _vector(             # <<<<<<<<<<<<<<
 *             -self.val.x,
 *             -self.val.y,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "srctools/_math.pyx":1136
 *             -self.val.x,
 *             -self.val.y,
 *             -self.val.z,             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8srctools_5_math__vector((-__pyx_v_self->val.x), (-__pyx_v_self->val.y), (-__pyx_v_self->val.z))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1131
 *         )
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         """The inverted form of a Vector has inverted axes."""
 *         return _vector(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.__neg__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1139
 *         )
 * 
 *     def __pos__(self):             # <<<<<<<<<<<<<<
 *         """+ on a Vector simply copies it."""
 *         return _vector(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_45__pos__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_44__pos__[] = "+ on a Vector simply copies it.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_44__pos__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_45__pos__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pos__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_44__pos__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_44__pos__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pos__", 0);

  /* "srctools/_math.pyx":1141
 *     def __pos__(self):
 *         """+ on a Vector simply copies it."""
 *         return _vector(             # <<<<<<<<<<<<<<
 *             self.val.x,
 *             self.val.y,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "srctools/_math.pyx":1144
 *             self.val.x,
 *             self.val.y,
 *             self.val.z,             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8srctools_5_math__vector(__pyx_v_self->val.x, __pyx_v_self->val.y, __pyx_v_self->val.z)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1139
 *         )
 * 
 *     def __pos__(self):             # <<<<<<<<<<<<<<
 *         """+ on a Vector simply copies it."""
 *         return _vector(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.__pos__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1147
 *         )
 * 
 *     def __contains__(self, val) -> bool:             # <<<<<<<<<<<<<<
 *         """Check to see if an axis is set to the given value."""
 *         cdef double val_d
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_3Vec_47__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_46__contains__[] = "Check to see if an axis is set to the given value.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_46__contains__;
#endif
static int __pyx_pw_8srctools_5_math_3Vec_47__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_46__contains__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_3Vec_46__contains__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_val) {
  double __pyx_v_val_d;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "srctools/_math.pyx":1150
 *         """Check to see if an axis is set to the given value."""
 *         cdef double val_d
 *         try:             # <<<<<<<<<<<<<<
 *             val_d = val
 *         except (TypeError, ValueError): # Non-floats should return False!
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "srctools/_math.pyx":1151
 *         cdef double val_d
 *         try:
 *             val_d = val             # <<<<<<<<<<<<<<
 *         except (TypeError, ValueError): # Non-floats should return False!
 *             return False
 */
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_val); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1151, __pyx_L3_error)
      __pyx_v_val_d = __pyx_t_4;

      /* "srctools/_math.pyx":1150
 *         """Check to see if an axis is set to the given value."""
 *         cdef double val_d
 *         try:             # <<<<<<<<<<<<<<
 *             val_d = val
 *         except (TypeError, ValueError): # Non-floats should return False!
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "srctools/_math.pyx":1152
 *         try:
 *             val_d = val
 *         except (TypeError, ValueError): # Non-floats should return False!             # <<<<<<<<<<<<<<
 *             return False
 *         if val_d == self.val.x:
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("srctools._math.Vec.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 1152, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "srctools/_math.pyx":1153
 *             val_d = val
 *         except (TypeError, ValueError): # Non-floats should return False!
 *             return False             # <<<<<<<<<<<<<<
 *         if val_d == self.val.x:
 *             return True
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "srctools/_math.pyx":1150
 *         """Check to see if an axis is set to the given value."""
 *         cdef double val_d
 *         try:             # <<<<<<<<<<<<<<
 *             val_d = val
 *         except (TypeError, ValueError): # Non-floats should return False!
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "srctools/_math.pyx":1154
 *         except (TypeError, ValueError): # Non-floats should return False!
 *             return False
 *         if val_d == self.val.x:             # <<<<<<<<<<<<<<
 *             return True
 *         if val_d == self.val.y:
 */
  __pyx_t_9 = ((__pyx_v_val_d == __pyx_v_self->val.x) != 0);
  if (__pyx_t_9) {

    /* "srctools/_math.pyx":1155
 *             return False
 *         if val_d == self.val.x:
 *             return True             # <<<<<<<<<<<<<<
 *         if val_d == self.val.y:
 *             return True
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1154
 *         except (TypeError, ValueError): # Non-floats should return False!
 *             return False
 *         if val_d == self.val.x:             # <<<<<<<<<<<<<<
 *             return True
 *         if val_d == self.val.y:
 */
  }

  /* "srctools/_math.pyx":1156
 *         if val_d == self.val.x:
 *             return True
 *         if val_d == self.val.y:             # <<<<<<<<<<<<<<
 *             return True
 *         if val_d == self.val.z:
 */
  __pyx_t_9 = ((__pyx_v_val_d == __pyx_v_self->val.y) != 0);
  if (__pyx_t_9) {

    /* "srctools/_math.pyx":1157
 *             return True
 *         if val_d == self.val.y:
 *             return True             # <<<<<<<<<<<<<<
 *         if val_d == self.val.z:
 *             return True
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1156
 *         if val_d == self.val.x:
 *             return True
 *         if val_d == self.val.y:             # <<<<<<<<<<<<<<
 *             return True
 *         if val_d == self.val.z:
 */
  }

  /* "srctools/_math.pyx":1158
 *         if val_d == self.val.y:
 *             return True
 *         if val_d == self.val.z:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  __pyx_t_9 = ((__pyx_v_val_d == __pyx_v_self->val.z) != 0);
  if (__pyx_t_9) {

    /* "srctools/_math.pyx":1159
 *             return True
 *         if val_d == self.val.z:
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1158
 *         if val_d == self.val.y:
 *             return True
 *         if val_d == self.val.z:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  }

  /* "srctools/_math.pyx":1160
 *         if val_d == self.val.z:
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Non-in-place operators. Arg 1 may not be a Vec.
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1147
 *         )
 * 
 *     def __contains__(self, val) -> bool:             # <<<<<<<<<<<<<<
 *         """Check to see if an axis is set to the given value."""
 *         cdef double val_d
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srctools._math.Vec.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1164
 *     # Non-in-place operators. Arg 1 may not be a Vec.
 * 
 *     def __add__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """+ operation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_49__add__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_48__add__[] = "+ operation.\n\n        This additionally works on scalars (adds to all axes).\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_48__add__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_49__add__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_48__add__(((PyObject *)__pyx_v_obj_a), ((PyObject *)__pyx_v_obj_b));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_48__add__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_vec_a;
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_vec_b;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned char __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "srctools/_math.pyx":1171
 *         cdef vec_t vec_a, vec_b
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_a, obj_a, scalar=True)
 *             conv_vec(&vec_b, obj_b, scalar=True)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "srctools/_math.pyx":1172
 * 
 *         try:
 *             conv_vec(&vec_a, obj_a, scalar=True)             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_b, obj_b, scalar=True)
 *         except (TypeError, ValueError):
 */
      __pyx_t_4 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec_a), __pyx_v_obj_a, 1); if (unlikely(__pyx_t_4 == ((unsigned char)0))) __PYX_ERR(0, 1172, __pyx_L3_error)

      /* "srctools/_math.pyx":1173
 *         try:
 *             conv_vec(&vec_a, obj_a, scalar=True)
 *             conv_vec(&vec_b, obj_b, scalar=True)             # <<<<<<<<<<<<<<
 *         except (TypeError, ValueError):
 *             return NotImplemented
 */
      __pyx_t_4 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec_b), __pyx_v_obj_b, 1); if (unlikely(__pyx_t_4 == ((unsigned char)0))) __PYX_ERR(0, 1173, __pyx_L3_error)

      /* "srctools/_math.pyx":1171
 *         cdef vec_t vec_a, vec_b
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_a, obj_a, scalar=True)
 *             conv_vec(&vec_b, obj_b, scalar=True)
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "srctools/_math.pyx":1174
 *             conv_vec(&vec_a, obj_a, scalar=True)
 *             conv_vec(&vec_b, obj_b, scalar=True)
 *         except (TypeError, ValueError):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 * 
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("srctools._math.Vec.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 1174, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "srctools/_math.pyx":1175
 *             conv_vec(&vec_b, obj_b, scalar=True)
 *         except (TypeError, ValueError):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *         cdef Vec result = Vec.__new__(Vec)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_builtin_NotImplemented);
      __pyx_r = __pyx_builtin_NotImplemented;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "srctools/_math.pyx":1171
 *         cdef vec_t vec_a, vec_b
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_a, obj_a, scalar=True)
 *             conv_vec(&vec_b, obj_b, scalar=True)
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "srctools/_math.pyx":1177
 *             return NotImplemented
 * 
 *         cdef Vec result = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         result.val.x = vec_a.x + vec_b.x
 *         result.val.y = vec_a.y + vec_b.y
 */
  __pyx_t_8 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_8));
  __pyx_v_result = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "srctools/_math.pyx":1178
 * 
 *         cdef Vec result = Vec.__new__(Vec)
 *         result.val.x = vec_a.x + vec_b.x             # <<<<<<<<<<<<<<
 *         result.val.y = vec_a.y + vec_b.y
 *         result.val.z = vec_a.z + vec_b.z
 */
  __pyx_v_result->val.x = (__pyx_v_vec_a.x + __pyx_v_vec_b.x);

  /* "srctools/_math.pyx":1179
 *         cdef Vec result = Vec.__new__(Vec)
 *         result.val.x = vec_a.x + vec_b.x
 *         result.val.y = vec_a.y + vec_b.y             # <<<<<<<<<<<<<<
 *         result.val.z = vec_a.z + vec_b.z
 *         return result
 */
  __pyx_v_result->val.y = (__pyx_v_vec_a.y + __pyx_v_vec_b.y);

  /* "srctools/_math.pyx":1180
 *         result.val.x = vec_a.x + vec_b.x
 *         result.val.y = vec_a.y + vec_b.y
 *         result.val.z = vec_a.z + vec_b.z             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_v_result->val.z = (__pyx_v_vec_a.z + __pyx_v_vec_b.z);

  /* "srctools/_math.pyx":1181
 *         result.val.y = vec_a.y + vec_b.y
 *         result.val.z = vec_a.z + vec_b.z
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(obj_a, obj_b):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1164
 *     # Non-in-place operators. Arg 1 may not be a Vec.
 * 
 *     def __add__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """+ operation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srctools._math.Vec.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1183
 *         return result
 * 
 *     def __sub__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """- operation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_51__sub__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_50__sub__[] = "- operation.\n\n        This additionally works on scalars (adds to all axes).\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_50__sub__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_51__sub__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_50__sub__(((PyObject *)__pyx_v_obj_a), ((PyObject *)__pyx_v_obj_b));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_50__sub__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_vec_a;
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_vec_b;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned char __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "srctools/_math.pyx":1190
 *         cdef vec_t vec_a, vec_b
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_a, obj_a, scalar=True)
 *             conv_vec(&vec_b, obj_b, scalar=True)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "srctools/_math.pyx":1191
 * 
 *         try:
 *             conv_vec(&vec_a, obj_a, scalar=True)             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_b, obj_b, scalar=True)
 *         except (TypeError, ValueError):
 */
      __pyx_t_4 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec_a), __pyx_v_obj_a, 1); if (unlikely(__pyx_t_4 == ((unsigned char)0))) __PYX_ERR(0, 1191, __pyx_L3_error)

      /* "srctools/_math.pyx":1192
 *         try:
 *             conv_vec(&vec_a, obj_a, scalar=True)
 *             conv_vec(&vec_b, obj_b, scalar=True)             # <<<<<<<<<<<<<<
 *         except (TypeError, ValueError):
 *             return NotImplemented
 */
      __pyx_t_4 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec_b), __pyx_v_obj_b, 1); if (unlikely(__pyx_t_4 == ((unsigned char)0))) __PYX_ERR(0, 1192, __pyx_L3_error)

      /* "srctools/_math.pyx":1190
 *         cdef vec_t vec_a, vec_b
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_a, obj_a, scalar=True)
 *             conv_vec(&vec_b, obj_b, scalar=True)
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "srctools/_math.pyx":1193
 *             conv_vec(&vec_a, obj_a, scalar=True)
 *             conv_vec(&vec_b, obj_b, scalar=True)
 *         except (TypeError, ValueError):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 * 
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("srctools._math.Vec.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 1193, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "srctools/_math.pyx":1194
 *             conv_vec(&vec_b, obj_b, scalar=True)
 *         except (TypeError, ValueError):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *         cdef Vec result = Vec.__new__(Vec)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_builtin_NotImplemented);
      __pyx_r = __pyx_builtin_NotImplemented;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "srctools/_math.pyx":1190
 *         cdef vec_t vec_a, vec_b
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_a, obj_a, scalar=True)
 *             conv_vec(&vec_b, obj_b, scalar=True)
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "srctools/_math.pyx":1196
 *             return NotImplemented
 * 
 *         cdef Vec result = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         result.val.x = vec_a.x - vec_b.x
 *         result.val.y = vec_a.y - vec_b.y
 */
  __pyx_t_8 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_8));
  __pyx_v_result = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "srctools/_math.pyx":1197
 * 
 *         cdef Vec result = Vec.__new__(Vec)
 *         result.val.x = vec_a.x - vec_b.x             # <<<<<<<<<<<<<<
 *         result.val.y = vec_a.y - vec_b.y
 *         result.val.z = vec_a.z - vec_b.z
 */
  __pyx_v_result->val.x = (__pyx_v_vec_a.x - __pyx_v_vec_b.x);

  /* "srctools/_math.pyx":1198
 *         cdef Vec result = Vec.__new__(Vec)
 *         result.val.x = vec_a.x - vec_b.x
 *         result.val.y = vec_a.y - vec_b.y             # <<<<<<<<<<<<<<
 *         result.val.z = vec_a.z - vec_b.z
 *         return result
 */
  __pyx_v_result->val.y = (__pyx_v_vec_a.y - __pyx_v_vec_b.y);

  /* "srctools/_math.pyx":1199
 *         result.val.x = vec_a.x - vec_b.x
 *         result.val.y = vec_a.y - vec_b.y
 *         result.val.z = vec_a.z - vec_b.z             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_v_result->val.z = (__pyx_v_vec_a.z - __pyx_v_vec_b.z);

  /* "srctools/_math.pyx":1200
 *         result.val.y = vec_a.y - vec_b.y
 *         result.val.z = vec_a.z - vec_b.z
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(obj_a, obj_b):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1183
 *         return result
 * 
 *     def __sub__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """- operation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srctools._math.Vec.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1202
 *         return result
 * 
 *     def __mul__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """Vector * scalar operation."""
 *         cdef Vec vec = Vec.__new__(Vec)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_53__mul__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_52__mul__[] = "Vector * scalar operation.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_52__mul__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_53__mul__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_52__mul__(((PyObject *)__pyx_v_obj_a), ((PyObject *)__pyx_v_obj_b));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_52__mul__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  double __pyx_v_scalar;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  unsigned char __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "srctools/_math.pyx":1204
 *     def __mul__(obj_a, obj_b):
 *         """Vector * scalar operation."""
 *         cdef Vec vec = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         cdef double scalar
 *         # Vector * Vector is disallowed.
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1204, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1207
 *         cdef double scalar
 *         # Vector * Vector is disallowed.
 *         if isinstance(obj_a, (int, float)):             # <<<<<<<<<<<<<<
 *             # scalar * vector
 *             scalar = obj_a
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_obj_a); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_obj_a); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "srctools/_math.pyx":1209
 *         if isinstance(obj_a, (int, float)):
 *             # scalar * vector
 *             scalar = obj_a             # <<<<<<<<<<<<<<
 *             conv_vec(&vec.val, obj_b, scalar=False)
 *             vec.val.x = scalar * vec.val.x
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_obj_a); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1209, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_5;

    /* "srctools/_math.pyx":1210
 *             # scalar * vector
 *             scalar = obj_a
 *             conv_vec(&vec.val, obj_b, scalar=False)             # <<<<<<<<<<<<<<
 *             vec.val.x = scalar * vec.val.x
 *             vec.val.y = scalar * vec.val.y
 */
    __pyx_t_6 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec->val), __pyx_v_obj_b, 0); if (unlikely(__pyx_t_6 == ((unsigned char)0))) __PYX_ERR(0, 1210, __pyx_L1_error)

    /* "srctools/_math.pyx":1211
 *             scalar = obj_a
 *             conv_vec(&vec.val, obj_b, scalar=False)
 *             vec.val.x = scalar * vec.val.x             # <<<<<<<<<<<<<<
 *             vec.val.y = scalar * vec.val.y
 *             vec.val.z = scalar * vec.val.z
 */
    __pyx_v_vec->val.x = (__pyx_v_scalar * __pyx_v_vec->val.x);

    /* "srctools/_math.pyx":1212
 *             conv_vec(&vec.val, obj_b, scalar=False)
 *             vec.val.x = scalar * vec.val.x
 *             vec.val.y = scalar * vec.val.y             # <<<<<<<<<<<<<<
 *             vec.val.z = scalar * vec.val.z
 *         elif isinstance(obj_b, (int, float)):
 */
    __pyx_v_vec->val.y = (__pyx_v_scalar * __pyx_v_vec->val.y);

    /* "srctools/_math.pyx":1213
 *             vec.val.x = scalar * vec.val.x
 *             vec.val.y = scalar * vec.val.y
 *             vec.val.z = scalar * vec.val.z             # <<<<<<<<<<<<<<
 *         elif isinstance(obj_b, (int, float)):
 *             # vector * scalar.
 */
    __pyx_v_vec->val.z = (__pyx_v_scalar * __pyx_v_vec->val.z);

    /* "srctools/_math.pyx":1207
 *         cdef double scalar
 *         # Vector * Vector is disallowed.
 *         if isinstance(obj_a, (int, float)):             # <<<<<<<<<<<<<<
 *             # scalar * vector
 *             scalar = obj_a
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1214
 *             vec.val.y = scalar * vec.val.y
 *             vec.val.z = scalar * vec.val.z
 *         elif isinstance(obj_b, (int, float)):             # <<<<<<<<<<<<<<
 *             # vector * scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_obj_b); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_obj_b); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_3 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1216
 *         elif isinstance(obj_b, (int, float)):
 *             # vector * scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)             # <<<<<<<<<<<<<<
 *             scalar = obj_b
 *             vec.val.x = vec.val.x * scalar
 */
    __pyx_t_6 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec->val), __pyx_v_obj_a, 0); if (unlikely(__pyx_t_6 == ((unsigned char)0))) __PYX_ERR(0, 1216, __pyx_L1_error)

    /* "srctools/_math.pyx":1217
 *             # vector * scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)
 *             scalar = obj_b             # <<<<<<<<<<<<<<
 *             vec.val.x = vec.val.x * scalar
 *             vec.val.y = vec.val.y * scalar
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_obj_b); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1217, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_5;

    /* "srctools/_math.pyx":1218
 *             conv_vec(&vec.val, obj_a, scalar=False)
 *             scalar = obj_b
 *             vec.val.x = vec.val.x * scalar             # <<<<<<<<<<<<<<
 *             vec.val.y = vec.val.y * scalar
 *             vec.val.z = vec.val.z * scalar
 */
    __pyx_v_vec->val.x = (__pyx_v_vec->val.x * __pyx_v_scalar);

    /* "srctools/_math.pyx":1219
 *             scalar = obj_b
 *             vec.val.x = vec.val.x * scalar
 *             vec.val.y = vec.val.y * scalar             # <<<<<<<<<<<<<<
 *             vec.val.z = vec.val.z * scalar
 * 
 */
    __pyx_v_vec->val.y = (__pyx_v_vec->val.y * __pyx_v_scalar);

    /* "srctools/_math.pyx":1220
 *             vec.val.x = vec.val.x * scalar
 *             vec.val.y = vec.val.y * scalar
 *             vec.val.z = vec.val.z * scalar             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 */
    __pyx_v_vec->val.z = (__pyx_v_vec->val.z * __pyx_v_scalar);

    /* "srctools/_math.pyx":1214
 *             vec.val.y = scalar * vec.val.y
 *             vec.val.z = scalar * vec.val.z
 *         elif isinstance(obj_b, (int, float)):             # <<<<<<<<<<<<<<
 *             # vector * scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1222
 *             vec.val.z = vec.val.z * scalar
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError('Cannot multiply 2 Vectors.')
 *         else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_obj_a, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_obj_b, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L8_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "srctools/_math.pyx":1223
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 *             raise TypeError('Cannot multiply 2 Vectors.')             # <<<<<<<<<<<<<<
 *         else:
 *             # Both vector-like or vector * something else.
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1223, __pyx_L1_error)

    /* "srctools/_math.pyx":1222
 *             vec.val.z = vec.val.z * scalar
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError('Cannot multiply 2 Vectors.')
 *         else:
 */
  }

  /* "srctools/_math.pyx":1226
 *         else:
 *             # Both vector-like or vector * something else.
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         return vec
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":1227
 *             # Both vector-like or vector * something else.
 *             return NotImplemented
 *         return vec             # <<<<<<<<<<<<<<
 * 
 *     def __truediv__(obj_a, obj_b):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __pyx_r = ((PyObject *)__pyx_v_vec);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1202
 *         return result
 * 
 *     def __mul__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """Vector * scalar operation."""
 *         cdef Vec vec = Vec.__new__(Vec)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1229
 *         return vec
 * 
 *     def __truediv__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """Vector / scalar operation."""
 *         cdef Vec vec = Vec.__new__(Vec)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_55__truediv__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_54__truediv__[] = "Vector / scalar operation.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_54__truediv__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_55__truediv__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_54__truediv__(((PyObject *)__pyx_v_obj_a), ((PyObject *)__pyx_v_obj_b));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_54__truediv__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  double __pyx_v_scalar;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  unsigned char __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__truediv__", 0);

  /* "srctools/_math.pyx":1231
 *     def __truediv__(obj_a, obj_b):
 *         """Vector / scalar operation."""
 *         cdef Vec vec = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         cdef double scalar
 *         # Vector / Vector is disallowed.
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1231, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1234
 *         cdef double scalar
 *         # Vector / Vector is disallowed.
 *         if isinstance(obj_a, (int, float)):             # <<<<<<<<<<<<<<
 *             # scalar / vector
 *             scalar = obj_a
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_obj_a); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_obj_a); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "srctools/_math.pyx":1236
 *         if isinstance(obj_a, (int, float)):
 *             # scalar / vector
 *             scalar = obj_a             # <<<<<<<<<<<<<<
 *             conv_vec(&vec.val, obj_b, scalar=False)
 *             vec.val.x = scalar / vec.val.x
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_obj_a); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1236, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_5;

    /* "srctools/_math.pyx":1237
 *             # scalar / vector
 *             scalar = obj_a
 *             conv_vec(&vec.val, obj_b, scalar=False)             # <<<<<<<<<<<<<<
 *             vec.val.x = scalar / vec.val.x
 *             vec.val.y = scalar / vec.val.y
 */
    __pyx_t_6 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec->val), __pyx_v_obj_b, 0); if (unlikely(__pyx_t_6 == ((unsigned char)0))) __PYX_ERR(0, 1237, __pyx_L1_error)

    /* "srctools/_math.pyx":1238
 *             scalar = obj_a
 *             conv_vec(&vec.val, obj_b, scalar=False)
 *             vec.val.x = scalar / vec.val.x             # <<<<<<<<<<<<<<
 *             vec.val.y = scalar / vec.val.y
 *             vec.val.z = scalar / vec.val.z
 */
    if (unlikely(__pyx_v_vec->val.x == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1238, __pyx_L1_error)
    }
    __pyx_v_vec->val.x = (__pyx_v_scalar / __pyx_v_vec->val.x);

    /* "srctools/_math.pyx":1239
 *             conv_vec(&vec.val, obj_b, scalar=False)
 *             vec.val.x = scalar / vec.val.x
 *             vec.val.y = scalar / vec.val.y             # <<<<<<<<<<<<<<
 *             vec.val.z = scalar / vec.val.z
 *         elif isinstance(obj_b, (int, float)):
 */
    if (unlikely(__pyx_v_vec->val.y == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1239, __pyx_L1_error)
    }
    __pyx_v_vec->val.y = (__pyx_v_scalar / __pyx_v_vec->val.y);

    /* "srctools/_math.pyx":1240
 *             vec.val.x = scalar / vec.val.x
 *             vec.val.y = scalar / vec.val.y
 *             vec.val.z = scalar / vec.val.z             # <<<<<<<<<<<<<<
 *         elif isinstance(obj_b, (int, float)):
 *             # vector / scalar.
 */
    if (unlikely(__pyx_v_vec->val.z == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1240, __pyx_L1_error)
    }
    __pyx_v_vec->val.z = (__pyx_v_scalar / __pyx_v_vec->val.z);

    /* "srctools/_math.pyx":1234
 *         cdef double scalar
 *         # Vector / Vector is disallowed.
 *         if isinstance(obj_a, (int, float)):             # <<<<<<<<<<<<<<
 *             # scalar / vector
 *             scalar = obj_a
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1241
 *             vec.val.y = scalar / vec.val.y
 *             vec.val.z = scalar / vec.val.z
 *         elif isinstance(obj_b, (int, float)):             # <<<<<<<<<<<<<<
 *             # vector / scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_obj_b); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_obj_b); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_3 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1243
 *         elif isinstance(obj_b, (int, float)):
 *             # vector / scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)             # <<<<<<<<<<<<<<
 *             scalar = obj_b
 *             vec.val.x = vec.val.x / scalar
 */
    __pyx_t_6 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec->val), __pyx_v_obj_a, 0); if (unlikely(__pyx_t_6 == ((unsigned char)0))) __PYX_ERR(0, 1243, __pyx_L1_error)

    /* "srctools/_math.pyx":1244
 *             # vector / scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)
 *             scalar = obj_b             # <<<<<<<<<<<<<<
 *             vec.val.x = vec.val.x / scalar
 *             vec.val.y = vec.val.y / scalar
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_obj_b); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1244, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_5;

    /* "srctools/_math.pyx":1245
 *             conv_vec(&vec.val, obj_a, scalar=False)
 *             scalar = obj_b
 *             vec.val.x = vec.val.x / scalar             # <<<<<<<<<<<<<<
 *             vec.val.y = vec.val.y / scalar
 *             vec.val.z = vec.val.z / scalar
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1245, __pyx_L1_error)
    }
    __pyx_v_vec->val.x = (__pyx_v_vec->val.x / __pyx_v_scalar);

    /* "srctools/_math.pyx":1246
 *             scalar = obj_b
 *             vec.val.x = vec.val.x / scalar
 *             vec.val.y = vec.val.y / scalar             # <<<<<<<<<<<<<<
 *             vec.val.z = vec.val.z / scalar
 * 
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1246, __pyx_L1_error)
    }
    __pyx_v_vec->val.y = (__pyx_v_vec->val.y / __pyx_v_scalar);

    /* "srctools/_math.pyx":1247
 *             vec.val.x = vec.val.x / scalar
 *             vec.val.y = vec.val.y / scalar
 *             vec.val.z = vec.val.z / scalar             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1247, __pyx_L1_error)
    }
    __pyx_v_vec->val.z = (__pyx_v_vec->val.z / __pyx_v_scalar);

    /* "srctools/_math.pyx":1241
 *             vec.val.y = scalar / vec.val.y
 *             vec.val.z = scalar / vec.val.z
 *         elif isinstance(obj_b, (int, float)):             # <<<<<<<<<<<<<<
 *             # vector / scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1249
 *             vec.val.z = vec.val.z / scalar
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError('Cannot divide 2 Vectors.')
 *         else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_obj_a, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_obj_b, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L8_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "srctools/_math.pyx":1250
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 *             raise TypeError('Cannot divide 2 Vectors.')             # <<<<<<<<<<<<<<
 *         else:
 *             # Both vector-like or vector * something else.
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1250, __pyx_L1_error)

    /* "srctools/_math.pyx":1249
 *             vec.val.z = vec.val.z / scalar
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError('Cannot divide 2 Vectors.')
 *         else:
 */
  }

  /* "srctools/_math.pyx":1253
 *         else:
 *             # Both vector-like or vector * something else.
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         return vec
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":1254
 *             # Both vector-like or vector * something else.
 *             return NotImplemented
 *         return vec             # <<<<<<<<<<<<<<
 * 
 *     def __floordiv__(obj_a, obj_b):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __pyx_r = ((PyObject *)__pyx_v_vec);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1229
 *         return vec
 * 
 *     def __truediv__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """Vector / scalar operation."""
 *         cdef Vec vec = Vec.__new__(Vec)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1256
 *         return vec
 * 
 *     def __floordiv__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """Vector // scalar operation."""
 *         cdef Vec vec = Vec.__new__(Vec)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_57__floordiv__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_56__floordiv__[] = "Vector // scalar operation.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_56__floordiv__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_57__floordiv__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__floordiv__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_56__floordiv__(((PyObject *)__pyx_v_obj_a), ((PyObject *)__pyx_v_obj_b));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_56__floordiv__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  double __pyx_v_scalar;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  unsigned char __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__floordiv__", 0);

  /* "srctools/_math.pyx":1258
 *     def __floordiv__(obj_a, obj_b):
 *         """Vector // scalar operation."""
 *         cdef Vec vec = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         cdef double scalar
 *         # Vector // Vector is disallowed.
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1261
 *         cdef double scalar
 *         # Vector // Vector is disallowed.
 *         if isinstance(obj_a, (int, float)):             # <<<<<<<<<<<<<<
 *             # scalar // vector
 *             scalar = obj_a
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_obj_a); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_obj_a); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "srctools/_math.pyx":1263
 *         if isinstance(obj_a, (int, float)):
 *             # scalar // vector
 *             scalar = obj_a             # <<<<<<<<<<<<<<
 *             conv_vec(&vec.val, obj_b, scalar=False)
 *             vec.val.x = scalar // vec.val.x
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_obj_a); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1263, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_5;

    /* "srctools/_math.pyx":1264
 *             # scalar // vector
 *             scalar = obj_a
 *             conv_vec(&vec.val, obj_b, scalar=False)             # <<<<<<<<<<<<<<
 *             vec.val.x = scalar // vec.val.x
 *             vec.val.y = scalar // vec.val.y
 */
    __pyx_t_6 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec->val), __pyx_v_obj_b, 0); if (unlikely(__pyx_t_6 == ((unsigned char)0))) __PYX_ERR(0, 1264, __pyx_L1_error)

    /* "srctools/_math.pyx":1265
 *             scalar = obj_a
 *             conv_vec(&vec.val, obj_b, scalar=False)
 *             vec.val.x = scalar // vec.val.x             # <<<<<<<<<<<<<<
 *             vec.val.y = scalar // vec.val.y
 *             vec.val.z = scalar // vec.val.z
 */
    if (unlikely(__pyx_v_vec->val.x == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1265, __pyx_L1_error)
    }
    __pyx_v_vec->val.x = floor(__pyx_v_scalar / __pyx_v_vec->val.x);

    /* "srctools/_math.pyx":1266
 *             conv_vec(&vec.val, obj_b, scalar=False)
 *             vec.val.x = scalar // vec.val.x
 *             vec.val.y = scalar // vec.val.y             # <<<<<<<<<<<<<<
 *             vec.val.z = scalar // vec.val.z
 *         elif isinstance(obj_b, (int, float)):
 */
    if (unlikely(__pyx_v_vec->val.y == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1266, __pyx_L1_error)
    }
    __pyx_v_vec->val.y = floor(__pyx_v_scalar / __pyx_v_vec->val.y);

    /* "srctools/_math.pyx":1267
 *             vec.val.x = scalar // vec.val.x
 *             vec.val.y = scalar // vec.val.y
 *             vec.val.z = scalar // vec.val.z             # <<<<<<<<<<<<<<
 *         elif isinstance(obj_b, (int, float)):
 *             # vector // scalar.
 */
    if (unlikely(__pyx_v_vec->val.z == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1267, __pyx_L1_error)
    }
    __pyx_v_vec->val.z = floor(__pyx_v_scalar / __pyx_v_vec->val.z);

    /* "srctools/_math.pyx":1261
 *         cdef double scalar
 *         # Vector // Vector is disallowed.
 *         if isinstance(obj_a, (int, float)):             # <<<<<<<<<<<<<<
 *             # scalar // vector
 *             scalar = obj_a
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1268
 *             vec.val.y = scalar // vec.val.y
 *             vec.val.z = scalar // vec.val.z
 *         elif isinstance(obj_b, (int, float)):             # <<<<<<<<<<<<<<
 *             # vector // scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_obj_b); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_obj_b); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_3 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1270
 *         elif isinstance(obj_b, (int, float)):
 *             # vector // scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)             # <<<<<<<<<<<<<<
 *             scalar = obj_b
 *             vec.val.x = vec.val.x // scalar
 */
    __pyx_t_6 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec->val), __pyx_v_obj_a, 0); if (unlikely(__pyx_t_6 == ((unsigned char)0))) __PYX_ERR(0, 1270, __pyx_L1_error)

    /* "srctools/_math.pyx":1271
 *             # vector // scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)
 *             scalar = obj_b             # <<<<<<<<<<<<<<
 *             vec.val.x = vec.val.x // scalar
 *             vec.val.y = vec.val.y // scalar
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_obj_b); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1271, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_5;

    /* "srctools/_math.pyx":1272
 *             conv_vec(&vec.val, obj_a, scalar=False)
 *             scalar = obj_b
 *             vec.val.x = vec.val.x // scalar             # <<<<<<<<<<<<<<
 *             vec.val.y = vec.val.y // scalar
 *             vec.val.z = vec.val.z // scalar
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1272, __pyx_L1_error)
    }
    __pyx_v_vec->val.x = floor(__pyx_v_vec->val.x / __pyx_v_scalar);

    /* "srctools/_math.pyx":1273
 *             scalar = obj_b
 *             vec.val.x = vec.val.x // scalar
 *             vec.val.y = vec.val.y // scalar             # <<<<<<<<<<<<<<
 *             vec.val.z = vec.val.z // scalar
 * 
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1273, __pyx_L1_error)
    }
    __pyx_v_vec->val.y = floor(__pyx_v_vec->val.y / __pyx_v_scalar);

    /* "srctools/_math.pyx":1274
 *             vec.val.x = vec.val.x // scalar
 *             vec.val.y = vec.val.y // scalar
 *             vec.val.z = vec.val.z // scalar             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1274, __pyx_L1_error)
    }
    __pyx_v_vec->val.z = floor(__pyx_v_vec->val.z / __pyx_v_scalar);

    /* "srctools/_math.pyx":1268
 *             vec.val.y = scalar // vec.val.y
 *             vec.val.z = scalar // vec.val.z
 *         elif isinstance(obj_b, (int, float)):             # <<<<<<<<<<<<<<
 *             # vector // scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1276
 *             vec.val.z = vec.val.z // scalar
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError('Cannot floor-divide 2 Vectors.')
 *         else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_obj_a, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_obj_b, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L8_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "srctools/_math.pyx":1277
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 *             raise TypeError('Cannot floor-divide 2 Vectors.')             # <<<<<<<<<<<<<<
 *         else:
 *             # Both vector-like or vector * something else.
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1277, __pyx_L1_error)

    /* "srctools/_math.pyx":1276
 *             vec.val.z = vec.val.z // scalar
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError('Cannot floor-divide 2 Vectors.')
 *         else:
 */
  }

  /* "srctools/_math.pyx":1280
 *         else:
 *             # Both vector-like or vector * something else.
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         return vec
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":1281
 *             # Both vector-like or vector * something else.
 *             return NotImplemented
 *         return vec             # <<<<<<<<<<<<<<
 * 
 *     def __mod__(obj_a, obj_b):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __pyx_r = ((PyObject *)__pyx_v_vec);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1256
 *         return vec
 * 
 *     def __floordiv__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """Vector // scalar operation."""
 *         cdef Vec vec = Vec.__new__(Vec)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.__floordiv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1283
 *         return vec
 * 
 *     def __mod__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """Vector % scalar operation."""
 *         cdef Vec vec = Vec.__new__(Vec)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_59__mod__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_58__mod__[] = "Vector % scalar operation.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_58__mod__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_59__mod__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mod__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_58__mod__(((PyObject *)__pyx_v_obj_a), ((PyObject *)__pyx_v_obj_b));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_58__mod__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  double __pyx_v_scalar;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  unsigned char __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mod__", 0);

  /* "srctools/_math.pyx":1285
 *     def __mod__(obj_a, obj_b):
 *         """Vector % scalar operation."""
 *         cdef Vec vec = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         cdef double scalar
 *         # Vector % Vector is disallowed.
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1288
 *         cdef double scalar
 *         # Vector % Vector is disallowed.
 *         if isinstance(obj_a, (int, float)):             # <<<<<<<<<<<<<<
 *             # scalar % vector
 *             scalar = obj_a
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_obj_a); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_obj_a); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "srctools/_math.pyx":1290
 *         if isinstance(obj_a, (int, float)):
 *             # scalar % vector
 *             scalar = obj_a             # <<<<<<<<<<<<<<
 *             conv_vec(&vec.val, obj_b, scalar=False)
 *             vec.val.x = scalar % vec.val.x
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_obj_a); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1290, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_5;

    /* "srctools/_math.pyx":1291
 *             # scalar % vector
 *             scalar = obj_a
 *             conv_vec(&vec.val, obj_b, scalar=False)             # <<<<<<<<<<<<<<
 *             vec.val.x = scalar % vec.val.x
 *             vec.val.y = scalar % vec.val.y
 */
    __pyx_t_6 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec->val), __pyx_v_obj_b, 0); if (unlikely(__pyx_t_6 == ((unsigned char)0))) __PYX_ERR(0, 1291, __pyx_L1_error)

    /* "srctools/_math.pyx":1292
 *             scalar = obj_a
 *             conv_vec(&vec.val, obj_b, scalar=False)
 *             vec.val.x = scalar % vec.val.x             # <<<<<<<<<<<<<<
 *             vec.val.y = scalar % vec.val.y
 *             vec.val.z = scalar % vec.val.z
 */
    if (unlikely(__pyx_v_vec->val.x == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1292, __pyx_L1_error)
    }
    __pyx_v_vec->val.x = __Pyx_mod_double(__pyx_v_scalar, __pyx_v_vec->val.x);

    /* "srctools/_math.pyx":1293
 *             conv_vec(&vec.val, obj_b, scalar=False)
 *             vec.val.x = scalar % vec.val.x
 *             vec.val.y = scalar % vec.val.y             # <<<<<<<<<<<<<<
 *             vec.val.z = scalar % vec.val.z
 *         elif isinstance(obj_b, (int, float)):
 */
    if (unlikely(__pyx_v_vec->val.y == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1293, __pyx_L1_error)
    }
    __pyx_v_vec->val.y = __Pyx_mod_double(__pyx_v_scalar, __pyx_v_vec->val.y);

    /* "srctools/_math.pyx":1294
 *             vec.val.x = scalar % vec.val.x
 *             vec.val.y = scalar % vec.val.y
 *             vec.val.z = scalar % vec.val.z             # <<<<<<<<<<<<<<
 *         elif isinstance(obj_b, (int, float)):
 *             # vector % scalar.
 */
    if (unlikely(__pyx_v_vec->val.z == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1294, __pyx_L1_error)
    }
    __pyx_v_vec->val.z = __Pyx_mod_double(__pyx_v_scalar, __pyx_v_vec->val.z);

    /* "srctools/_math.pyx":1288
 *         cdef double scalar
 *         # Vector % Vector is disallowed.
 *         if isinstance(obj_a, (int, float)):             # <<<<<<<<<<<<<<
 *             # scalar % vector
 *             scalar = obj_a
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1295
 *             vec.val.y = scalar % vec.val.y
 *             vec.val.z = scalar % vec.val.z
 *         elif isinstance(obj_b, (int, float)):             # <<<<<<<<<<<<<<
 *             # vector % scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_obj_b); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_obj_b); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_3 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1297
 *         elif isinstance(obj_b, (int, float)):
 *             # vector % scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)             # <<<<<<<<<<<<<<
 *             scalar = obj_b
 *             vec.val.x = vec.val.x % scalar
 */
    __pyx_t_6 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec->val), __pyx_v_obj_a, 0); if (unlikely(__pyx_t_6 == ((unsigned char)0))) __PYX_ERR(0, 1297, __pyx_L1_error)

    /* "srctools/_math.pyx":1298
 *             # vector % scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)
 *             scalar = obj_b             # <<<<<<<<<<<<<<
 *             vec.val.x = vec.val.x % scalar
 *             vec.val.y = vec.val.y % scalar
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_obj_b); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1298, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_5;

    /* "srctools/_math.pyx":1299
 *             conv_vec(&vec.val, obj_a, scalar=False)
 *             scalar = obj_b
 *             vec.val.x = vec.val.x % scalar             # <<<<<<<<<<<<<<
 *             vec.val.y = vec.val.y % scalar
 *             vec.val.z = vec.val.z % scalar
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1299, __pyx_L1_error)
    }
    __pyx_v_vec->val.x = __Pyx_mod_double(__pyx_v_vec->val.x, __pyx_v_scalar);

    /* "srctools/_math.pyx":1300
 *             scalar = obj_b
 *             vec.val.x = vec.val.x % scalar
 *             vec.val.y = vec.val.y % scalar             # <<<<<<<<<<<<<<
 *             vec.val.z = vec.val.z % scalar
 * 
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1300, __pyx_L1_error)
    }
    __pyx_v_vec->val.y = __Pyx_mod_double(__pyx_v_vec->val.y, __pyx_v_scalar);

    /* "srctools/_math.pyx":1301
 *             vec.val.x = vec.val.x % scalar
 *             vec.val.y = vec.val.y % scalar
 *             vec.val.z = vec.val.z % scalar             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1301, __pyx_L1_error)
    }
    __pyx_v_vec->val.z = __Pyx_mod_double(__pyx_v_vec->val.z, __pyx_v_scalar);

    /* "srctools/_math.pyx":1295
 *             vec.val.y = scalar % vec.val.y
 *             vec.val.z = scalar % vec.val.z
 *         elif isinstance(obj_b, (int, float)):             # <<<<<<<<<<<<<<
 *             # vector % scalar.
 *             conv_vec(&vec.val, obj_a, scalar=False)
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1303
 *             vec.val.z = vec.val.z % scalar
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError('Cannot modulus 2 Vectors.')
 *         else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_obj_a, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_obj_b, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L8_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "srctools/_math.pyx":1304
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 *             raise TypeError('Cannot modulus 2 Vectors.')             # <<<<<<<<<<<<<<
 *         else:
 *             # Both vector-like or vector * something else.
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1304, __pyx_L1_error)

    /* "srctools/_math.pyx":1303
 *             vec.val.z = vec.val.z % scalar
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError('Cannot modulus 2 Vectors.')
 *         else:
 */
  }

  /* "srctools/_math.pyx":1307
 *         else:
 *             # Both vector-like or vector * something else.
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         return vec
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":1308
 *             # Both vector-like or vector * something else.
 *             return NotImplemented
 *         return vec             # <<<<<<<<<<<<<<
 * 
 *     def __matmul__(first, second):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __pyx_r = ((PyObject *)__pyx_v_vec);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1283
 *         return vec
 * 
 *     def __mod__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """Vector % scalar operation."""
 *         cdef Vec vec = Vec.__new__(Vec)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.__mod__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1310
 *         return vec
 * 
 *     def __matmul__(first, second):             # <<<<<<<<<<<<<<
 *         cdef mat_t temp
 *         cdef Vec res
 */

/* Python wrapper */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pw_8srctools_5_math_3Vec_61__matmul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_3Vec_61__matmul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__matmul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_60__matmul__(((PyObject *)__pyx_v_first), ((PyObject *)__pyx_v_second));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_8srctools_5_math_3Vec_60__matmul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second) {
  __pyx_t_8srctools_5_math_mat_t __pyx_v_temp;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_t_8srctools_5_math_vec_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__matmul__", 0);

  /* "srctools/_math.pyx":1313
 *         cdef mat_t temp
 *         cdef Vec res
 *         if isinstance(first, Vec):             # <<<<<<<<<<<<<<
 *             res = Vec.__new__(Vec)
 *             res.val = (<Vec>first).val
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_first, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1314
 *         cdef Vec res
 *         if isinstance(first, Vec):
 *             res = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *             res.val = (<Vec>first).val
 *             if isinstance(second, Angle):
 */
    __pyx_t_3 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1314, __pyx_L1_error)
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_v_res = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "srctools/_math.pyx":1315
 *         if isinstance(first, Vec):
 *             res = Vec.__new__(Vec)
 *             res.val = (<Vec>first).val             # <<<<<<<<<<<<<<
 *             if isinstance(second, Angle):
 *                 _mat_from_angle(temp, &(<Angle>second).val)
 */
    __pyx_t_4 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_first)->val;
    __pyx_v_res->val = __pyx_t_4;

    /* "srctools/_math.pyx":1316
 *             res = Vec.__new__(Vec)
 *             res.val = (<Vec>first).val
 *             if isinstance(second, Angle):             # <<<<<<<<<<<<<<
 *                 _mat_from_angle(temp, &(<Angle>second).val)
 *                 vec_rot(&res.val, temp)
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_second, __pyx_ptype_8srctools_5_math_Angle); 
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":1317
 *             res.val = (<Vec>first).val
 *             if isinstance(second, Angle):
 *                 _mat_from_angle(temp, &(<Angle>second).val)             # <<<<<<<<<<<<<<
 *                 vec_rot(&res.val, temp)
 *                 return res
 */
      __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_temp, (&((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_second)->val));

      /* "srctools/_math.pyx":1318
 *             if isinstance(second, Angle):
 *                 _mat_from_angle(temp, &(<Angle>second).val)
 *                 vec_rot(&res.val, temp)             # <<<<<<<<<<<<<<
 *                 return res
 *             elif isinstance(second, Matrix):
 */
      __pyx_f_8srctools_5_math_vec_rot((&__pyx_v_res->val), __pyx_v_temp);

      /* "srctools/_math.pyx":1319
 *                 _mat_from_angle(temp, &(<Angle>second).val)
 *                 vec_rot(&res.val, temp)
 *                 return res             # <<<<<<<<<<<<<<
 *             elif isinstance(second, Matrix):
 *                 vec_rot(&res.val, (<Matrix>second).mat)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_res));
      __pyx_r = ((PyObject *)__pyx_v_res);
      goto __pyx_L0;

      /* "srctools/_math.pyx":1316
 *             res = Vec.__new__(Vec)
 *             res.val = (<Vec>first).val
 *             if isinstance(second, Angle):             # <<<<<<<<<<<<<<
 *                 _mat_from_angle(temp, &(<Angle>second).val)
 *                 vec_rot(&res.val, temp)
 */
    }

    /* "srctools/_math.pyx":1320
 *                 vec_rot(&res.val, temp)
 *                 return res
 *             elif isinstance(second, Matrix):             # <<<<<<<<<<<<<<
 *                 vec_rot(&res.val, (<Matrix>second).mat)
 *                 return res
 */
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_second, __pyx_ptype_8srctools_5_math_Matrix); 
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":1321
 *                 return res
 *             elif isinstance(second, Matrix):
 *                 vec_rot(&res.val, (<Matrix>second).mat)             # <<<<<<<<<<<<<<
 *                 return res
 *         return NotImplemented
 */
      __pyx_f_8srctools_5_math_vec_rot((&__pyx_v_res->val), ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_second)->mat);

      /* "srctools/_math.pyx":1322
 *             elif isinstance(second, Matrix):
 *                 vec_rot(&res.val, (<Matrix>second).mat)
 *                 return res             # <<<<<<<<<<<<<<
 *         return NotImplemented
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_res));
      __pyx_r = ((PyObject *)__pyx_v_res);
      goto __pyx_L0;

      /* "srctools/_math.pyx":1320
 *                 vec_rot(&res.val, temp)
 *                 return res
 *             elif isinstance(second, Matrix):             # <<<<<<<<<<<<<<
 *                 vec_rot(&res.val, (<Matrix>second).mat)
 *                 return res
 */
    }

    /* "srctools/_math.pyx":1313
 *         cdef mat_t temp
 *         cdef Vec res
 *         if isinstance(first, Vec):             # <<<<<<<<<<<<<<
 *             res = Vec.__new__(Vec)
 *             res.val = (<Vec>first).val
 */
  }

  /* "srctools/_math.pyx":1323
 *                 vec_rot(&res.val, (<Matrix>second).mat)
 *                 return res
 *         return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     # In-place operators. Self is always a Vec.
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_builtin_NotImplemented);
  __pyx_r = __pyx_builtin_NotImplemented;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1310
 *         return vec
 * 
 *     def __matmul__(first, second):             # <<<<<<<<<<<<<<
 *         cdef mat_t temp
 *         cdef Vec res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("srctools._math.Vec.__matmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

/* "srctools/_math.pyx":1327
 *     # In-place operators. Self is always a Vec.
 * 
 *     def __iadd__(self, other):             # <<<<<<<<<<<<<<
 *         """+= operation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_63__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_62__iadd__[] = "+= operation.\n\n        Like the normal one except without duplication.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_62__iadd__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_63__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iadd__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_62__iadd__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_62__iadd__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_vec_other;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned char __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iadd__", 0);

  /* "srctools/_math.pyx":1333
 *         """
 *         cdef vec_t vec_other
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_other, other, scalar=True)
 *         except (TypeError, ValueError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "srctools/_math.pyx":1334
 *         cdef vec_t vec_other
 *         try:
 *             conv_vec(&vec_other, other, scalar=True)             # <<<<<<<<<<<<<<
 *         except (TypeError, ValueError):
 *             return NotImplemented
 */
      __pyx_t_4 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec_other), __pyx_v_other, 1); if (unlikely(__pyx_t_4 == ((unsigned char)0))) __PYX_ERR(0, 1334, __pyx_L3_error)

      /* "srctools/_math.pyx":1333
 *         """
 *         cdef vec_t vec_other
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_other, other, scalar=True)
 *         except (TypeError, ValueError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "srctools/_math.pyx":1335
 *         try:
 *             conv_vec(&vec_other, other, scalar=True)
 *         except (TypeError, ValueError):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 * 
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("srctools._math.Vec.__iadd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 1335, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "srctools/_math.pyx":1336
 *             conv_vec(&vec_other, other, scalar=True)
 *         except (TypeError, ValueError):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *         self.val.x += vec_other.x
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_builtin_NotImplemented);
      __pyx_r = __pyx_builtin_NotImplemented;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "srctools/_math.pyx":1333
 *         """
 *         cdef vec_t vec_other
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_other, other, scalar=True)
 *         except (TypeError, ValueError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "srctools/_math.pyx":1338
 *             return NotImplemented
 * 
 *         self.val.x += vec_other.x             # <<<<<<<<<<<<<<
 *         self.val.y += vec_other.y
 *         self.val.z += vec_other.z
 */
  __pyx_v_self->val.x = (__pyx_v_self->val.x + __pyx_v_vec_other.x);

  /* "srctools/_math.pyx":1339
 * 
 *         self.val.x += vec_other.x
 *         self.val.y += vec_other.y             # <<<<<<<<<<<<<<
 *         self.val.z += vec_other.z
 * 
 */
  __pyx_v_self->val.y = (__pyx_v_self->val.y + __pyx_v_vec_other.y);

  /* "srctools/_math.pyx":1340
 *         self.val.x += vec_other.x
 *         self.val.y += vec_other.y
 *         self.val.z += vec_other.z             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
  __pyx_v_self->val.z = (__pyx_v_self->val.z + __pyx_v_vec_other.z);

  /* "srctools/_math.pyx":1342
 *         self.val.z += vec_other.z
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __isub__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1327
 *     # In-place operators. Self is always a Vec.
 * 
 *     def __iadd__(self, other):             # <<<<<<<<<<<<<<
 *         """+= operation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srctools._math.Vec.__iadd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1344
 *         return self
 * 
 *     def __isub__(self, other):             # <<<<<<<<<<<<<<
 *         """-= operation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_65__isub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_64__isub__[] = "-= operation.\n\n        Like the normal one except without duplication.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_64__isub__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_65__isub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__isub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_64__isub__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_64__isub__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_vec_other;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned char __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__isub__", 0);

  /* "srctools/_math.pyx":1350
 *         """
 *         cdef vec_t vec_other
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_other, other, scalar=True)
 *         except (TypeError, ValueError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "srctools/_math.pyx":1351
 *         cdef vec_t vec_other
 *         try:
 *             conv_vec(&vec_other, other, scalar=True)             # <<<<<<<<<<<<<<
 *         except (TypeError, ValueError):
 *             return NotImplemented
 */
      __pyx_t_4 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec_other), __pyx_v_other, 1); if (unlikely(__pyx_t_4 == ((unsigned char)0))) __PYX_ERR(0, 1351, __pyx_L3_error)

      /* "srctools/_math.pyx":1350
 *         """
 *         cdef vec_t vec_other
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_other, other, scalar=True)
 *         except (TypeError, ValueError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "srctools/_math.pyx":1352
 *         try:
 *             conv_vec(&vec_other, other, scalar=True)
 *         except (TypeError, ValueError):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 * 
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("srctools._math.Vec.__isub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 1352, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "srctools/_math.pyx":1353
 *             conv_vec(&vec_other, other, scalar=True)
 *         except (TypeError, ValueError):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *         self.val.x -= vec_other.x
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_builtin_NotImplemented);
      __pyx_r = __pyx_builtin_NotImplemented;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "srctools/_math.pyx":1350
 *         """
 *         cdef vec_t vec_other
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&vec_other, other, scalar=True)
 *         except (TypeError, ValueError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "srctools/_math.pyx":1355
 *             return NotImplemented
 * 
 *         self.val.x -= vec_other.x             # <<<<<<<<<<<<<<
 *         self.val.y -= vec_other.y
 *         self.val.z -= vec_other.z
 */
  __pyx_v_self->val.x = (__pyx_v_self->val.x - __pyx_v_vec_other.x);

  /* "srctools/_math.pyx":1356
 * 
 *         self.val.x -= vec_other.x
 *         self.val.y -= vec_other.y             # <<<<<<<<<<<<<<
 *         self.val.z -= vec_other.z
 * 
 */
  __pyx_v_self->val.y = (__pyx_v_self->val.y - __pyx_v_vec_other.y);

  /* "srctools/_math.pyx":1357
 *         self.val.x -= vec_other.x
 *         self.val.y -= vec_other.y
 *         self.val.z -= vec_other.z             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
  __pyx_v_self->val.z = (__pyx_v_self->val.z - __pyx_v_vec_other.z);

  /* "srctools/_math.pyx":1359
 *         self.val.z -= vec_other.z
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __imul__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1344
 *         return self
 * 
 *     def __isub__(self, other):             # <<<<<<<<<<<<<<
 *         """-= operation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srctools._math.Vec.__isub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1361
 *         return self
 * 
 *     def __imul__(self, other):             # <<<<<<<<<<<<<<
 *         """*= operation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_67__imul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_66__imul__[] = "*= operation.\n\n        Like the normal one except without duplication.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_66__imul__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_67__imul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__imul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_66__imul__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_66__imul__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other) {
  double __pyx_v_scalar;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__imul__", 0);

  /* "srctools/_math.pyx":1367
 *         """
 *         cdef double scalar
 *         if isinstance(other, (int, float)):             # <<<<<<<<<<<<<<
 *             scalar = other
 *             self.val.x *= scalar
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_other); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_other); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1368
 *         cdef double scalar
 *         if isinstance(other, (int, float)):
 *             scalar = other             # <<<<<<<<<<<<<<
 *             self.val.x *= scalar
 *             self.val.y *= scalar
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_other); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1368, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_4;

    /* "srctools/_math.pyx":1369
 *         if isinstance(other, (int, float)):
 *             scalar = other
 *             self.val.x *= scalar             # <<<<<<<<<<<<<<
 *             self.val.y *= scalar
 *             self.val.z *= scalar
 */
    __pyx_v_self->val.x = (__pyx_v_self->val.x * __pyx_v_scalar);

    /* "srctools/_math.pyx":1370
 *             scalar = other
 *             self.val.x *= scalar
 *             self.val.y *= scalar             # <<<<<<<<<<<<<<
 *             self.val.z *= scalar
 *             return self
 */
    __pyx_v_self->val.y = (__pyx_v_self->val.y * __pyx_v_scalar);

    /* "srctools/_math.pyx":1371
 *             self.val.x *= scalar
 *             self.val.y *= scalar
 *             self.val.z *= scalar             # <<<<<<<<<<<<<<
 *             return self
 *         elif isinstance(other, Vec):
 */
    __pyx_v_self->val.z = (__pyx_v_self->val.z * __pyx_v_scalar);

    /* "srctools/_math.pyx":1372
 *             self.val.y *= scalar
 *             self.val.z *= scalar
 *             return self             # <<<<<<<<<<<<<<
 *         elif isinstance(other, Vec):
 *             raise TypeError("Cannot multiply 2 Vectors.")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "srctools/_math.pyx":1367
 *         """
 *         cdef double scalar
 *         if isinstance(other, (int, float)):             # <<<<<<<<<<<<<<
 *             scalar = other
 *             self.val.x *= scalar
 */
  }

  /* "srctools/_math.pyx":1373
 *             self.val.z *= scalar
 *             return self
 *         elif isinstance(other, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot multiply 2 Vectors.")
 *         else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "srctools/_math.pyx":1374
 *             return self
 *         elif isinstance(other, Vec):
 *             raise TypeError("Cannot multiply 2 Vectors.")             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1374, __pyx_L1_error)

    /* "srctools/_math.pyx":1373
 *             self.val.z *= scalar
 *             return self
 *         elif isinstance(other, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot multiply 2 Vectors.")
 *         else:
 */
  }

  /* "srctools/_math.pyx":1376
 *             raise TypeError("Cannot multiply 2 Vectors.")
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     def __itruediv__(self, other):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }

  /* "srctools/_math.pyx":1361
 *         return self
 * 
 *     def __imul__(self, other):             # <<<<<<<<<<<<<<
 *         """*= operation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("srctools._math.Vec.__imul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1378
 *             return NotImplemented
 * 
 *     def __itruediv__(self, other):             # <<<<<<<<<<<<<<
 *         """/= operation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_69__itruediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_68__itruediv__[] = "/= operation.\n\n        Like the normal one except without duplication.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_68__itruediv__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_69__itruediv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__itruediv__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_68__itruediv__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_68__itruediv__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other) {
  double __pyx_v_scalar;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__itruediv__", 0);

  /* "srctools/_math.pyx":1384
 *         """
 *         cdef double scalar
 *         if isinstance(other, (int, float)):             # <<<<<<<<<<<<<<
 *             scalar = other
 *             self.val.x /= scalar
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_other); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_other); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1385
 *         cdef double scalar
 *         if isinstance(other, (int, float)):
 *             scalar = other             # <<<<<<<<<<<<<<
 *             self.val.x /= scalar
 *             self.val.y /= scalar
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_other); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1385, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_4;

    /* "srctools/_math.pyx":1386
 *         if isinstance(other, (int, float)):
 *             scalar = other
 *             self.val.x /= scalar             # <<<<<<<<<<<<<<
 *             self.val.y /= scalar
 *             self.val.z /= scalar
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1386, __pyx_L1_error)
    }
    __pyx_v_self->val.x = (__pyx_v_self->val.x / __pyx_v_scalar);

    /* "srctools/_math.pyx":1387
 *             scalar = other
 *             self.val.x /= scalar
 *             self.val.y /= scalar             # <<<<<<<<<<<<<<
 *             self.val.z /= scalar
 *             return self
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1387, __pyx_L1_error)
    }
    __pyx_v_self->val.y = (__pyx_v_self->val.y / __pyx_v_scalar);

    /* "srctools/_math.pyx":1388
 *             self.val.x /= scalar
 *             self.val.y /= scalar
 *             self.val.z /= scalar             # <<<<<<<<<<<<<<
 *             return self
 *         elif isinstance(other, Vec):
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1388, __pyx_L1_error)
    }
    __pyx_v_self->val.z = (__pyx_v_self->val.z / __pyx_v_scalar);

    /* "srctools/_math.pyx":1389
 *             self.val.y /= scalar
 *             self.val.z /= scalar
 *             return self             # <<<<<<<<<<<<<<
 *         elif isinstance(other, Vec):
 *             raise TypeError("Cannot divide 2 Vectors.")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "srctools/_math.pyx":1384
 *         """
 *         cdef double scalar
 *         if isinstance(other, (int, float)):             # <<<<<<<<<<<<<<
 *             scalar = other
 *             self.val.x /= scalar
 */
  }

  /* "srctools/_math.pyx":1390
 *             self.val.z /= scalar
 *             return self
 *         elif isinstance(other, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot divide 2 Vectors.")
 *         else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "srctools/_math.pyx":1391
 *             return self
 *         elif isinstance(other, Vec):
 *             raise TypeError("Cannot divide 2 Vectors.")             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1391, __pyx_L1_error)

    /* "srctools/_math.pyx":1390
 *             self.val.z /= scalar
 *             return self
 *         elif isinstance(other, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot divide 2 Vectors.")
 *         else:
 */
  }

  /* "srctools/_math.pyx":1393
 *             raise TypeError("Cannot divide 2 Vectors.")
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     def __ifloordiv__(self, other):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }

  /* "srctools/_math.pyx":1378
 *             return NotImplemented
 * 
 *     def __itruediv__(self, other):             # <<<<<<<<<<<<<<
 *         """/= operation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("srctools._math.Vec.__itruediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1395
 *             return NotImplemented
 * 
 *     def __ifloordiv__(self, other):             # <<<<<<<<<<<<<<
 *         """//= operation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_71__ifloordiv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_70__ifloordiv__[] = "//= operation.\n\n        Like the normal one except without duplication.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_70__ifloordiv__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_71__ifloordiv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ifloordiv__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_70__ifloordiv__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_70__ifloordiv__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other) {
  double __pyx_v_scalar;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__ifloordiv__", 0);

  /* "srctools/_math.pyx":1401
 *         """
 *         cdef double scalar
 *         if isinstance(other, (int, float)):             # <<<<<<<<<<<<<<
 *             scalar = other
 *             self.val.x //= scalar
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_other); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_other); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1402
 *         cdef double scalar
 *         if isinstance(other, (int, float)):
 *             scalar = other             # <<<<<<<<<<<<<<
 *             self.val.x //= scalar
 *             self.val.y //= scalar
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_other); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1402, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_4;

    /* "srctools/_math.pyx":1403
 *         if isinstance(other, (int, float)):
 *             scalar = other
 *             self.val.x //= scalar             # <<<<<<<<<<<<<<
 *             self.val.y //= scalar
 *             self.val.z //= scalar
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1403, __pyx_L1_error)
    }
    __pyx_v_self->val.x = floor(__pyx_v_self->val.x / __pyx_v_scalar);

    /* "srctools/_math.pyx":1404
 *             scalar = other
 *             self.val.x //= scalar
 *             self.val.y //= scalar             # <<<<<<<<<<<<<<
 *             self.val.z //= scalar
 *             return self
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1404, __pyx_L1_error)
    }
    __pyx_v_self->val.y = floor(__pyx_v_self->val.y / __pyx_v_scalar);

    /* "srctools/_math.pyx":1405
 *             self.val.x //= scalar
 *             self.val.y //= scalar
 *             self.val.z //= scalar             # <<<<<<<<<<<<<<
 *             return self
 *         elif isinstance(other, Vec):
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1405, __pyx_L1_error)
    }
    __pyx_v_self->val.z = floor(__pyx_v_self->val.z / __pyx_v_scalar);

    /* "srctools/_math.pyx":1406
 *             self.val.y //= scalar
 *             self.val.z //= scalar
 *             return self             # <<<<<<<<<<<<<<
 *         elif isinstance(other, Vec):
 *             raise TypeError("Cannot floor-divide 2 Vectors.")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "srctools/_math.pyx":1401
 *         """
 *         cdef double scalar
 *         if isinstance(other, (int, float)):             # <<<<<<<<<<<<<<
 *             scalar = other
 *             self.val.x //= scalar
 */
  }

  /* "srctools/_math.pyx":1407
 *             self.val.z //= scalar
 *             return self
 *         elif isinstance(other, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot floor-divide 2 Vectors.")
 *         else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "srctools/_math.pyx":1408
 *             return self
 *         elif isinstance(other, Vec):
 *             raise TypeError("Cannot floor-divide 2 Vectors.")             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1408, __pyx_L1_error)

    /* "srctools/_math.pyx":1407
 *             self.val.z //= scalar
 *             return self
 *         elif isinstance(other, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot floor-divide 2 Vectors.")
 *         else:
 */
  }

  /* "srctools/_math.pyx":1410
 *             raise TypeError("Cannot floor-divide 2 Vectors.")
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     def __imod__(self, other):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }

  /* "srctools/_math.pyx":1395
 *             return NotImplemented
 * 
 *     def __ifloordiv__(self, other):             # <<<<<<<<<<<<<<
 *         """//= operation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("srctools._math.Vec.__ifloordiv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1412
 *             return NotImplemented
 * 
 *     def __imod__(self, other):             # <<<<<<<<<<<<<<
 *         """%= operation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_73__imod__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_72__imod__[] = "%= operation.\n\n        Like the normal one except without duplication.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_72__imod__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_73__imod__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__imod__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_72__imod__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_72__imod__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other) {
  double __pyx_v_scalar;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__imod__", 0);

  /* "srctools/_math.pyx":1418
 *         """
 *         cdef double scalar
 *         if isinstance(other, (int, float)):             # <<<<<<<<<<<<<<
 *             scalar = other
 *             self.val.x %= scalar
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_other); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_other); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1419
 *         cdef double scalar
 *         if isinstance(other, (int, float)):
 *             scalar = other             # <<<<<<<<<<<<<<
 *             self.val.x %= scalar
 *             self.val.y %= scalar
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_other); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1419, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_4;

    /* "srctools/_math.pyx":1420
 *         if isinstance(other, (int, float)):
 *             scalar = other
 *             self.val.x %= scalar             # <<<<<<<<<<<<<<
 *             self.val.y %= scalar
 *             self.val.z %= scalar
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1420, __pyx_L1_error)
    }
    __pyx_v_self->val.x = __Pyx_mod_double(__pyx_v_self->val.x, __pyx_v_scalar);

    /* "srctools/_math.pyx":1421
 *             scalar = other
 *             self.val.x %= scalar
 *             self.val.y %= scalar             # <<<<<<<<<<<<<<
 *             self.val.z %= scalar
 *             return self
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1421, __pyx_L1_error)
    }
    __pyx_v_self->val.y = __Pyx_mod_double(__pyx_v_self->val.y, __pyx_v_scalar);

    /* "srctools/_math.pyx":1422
 *             self.val.x %= scalar
 *             self.val.y %= scalar
 *             self.val.z %= scalar             # <<<<<<<<<<<<<<
 *             return self
 *         elif isinstance(other, Vec):
 */
    if (unlikely(__pyx_v_scalar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1422, __pyx_L1_error)
    }
    __pyx_v_self->val.z = __Pyx_mod_double(__pyx_v_self->val.z, __pyx_v_scalar);

    /* "srctools/_math.pyx":1423
 *             self.val.y %= scalar
 *             self.val.z %= scalar
 *             return self             # <<<<<<<<<<<<<<
 *         elif isinstance(other, Vec):
 *             raise TypeError("Cannot modulus 2 Vectors.")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "srctools/_math.pyx":1418
 *         """
 *         cdef double scalar
 *         if isinstance(other, (int, float)):             # <<<<<<<<<<<<<<
 *             scalar = other
 *             self.val.x %= scalar
 */
  }

  /* "srctools/_math.pyx":1424
 *             self.val.z %= scalar
 *             return self
 *         elif isinstance(other, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot modulus 2 Vectors.")
 *         else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "srctools/_math.pyx":1425
 *             return self
 *         elif isinstance(other, Vec):
 *             raise TypeError("Cannot modulus 2 Vectors.")             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1425, __pyx_L1_error)

    /* "srctools/_math.pyx":1424
 *             self.val.z %= scalar
 *             return self
 *         elif isinstance(other, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot modulus 2 Vectors.")
 *         else:
 */
  }

  /* "srctools/_math.pyx":1427
 *             raise TypeError("Cannot modulus 2 Vectors.")
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     def __matmul__(self, other):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }

  /* "srctools/_math.pyx":1412
 *             return NotImplemented
 * 
 *     def __imod__(self, other):             # <<<<<<<<<<<<<<
 *         """%= operation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("srctools._math.Vec.__imod__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1429
 *             return NotImplemented
 * 
 *     def __matmul__(self, other):             # <<<<<<<<<<<<<<
 *         """Rotate this vector by an angle or matrix."""
 *         cdef mat_t temp
 */

/* Python wrapper */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pw_8srctools_5_math_3Vec_75__matmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_74__matmul__[] = "Rotate this vector by an angle or matrix.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_74__matmul__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_75__matmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__matmul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_74__matmul__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_8srctools_5_math_3Vec_74__matmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  __pyx_t_8srctools_5_math_mat_t __pyx_v_temp;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__matmul__", 0);

  /* "srctools/_math.pyx":1433
 *         cdef mat_t temp
 *         cdef Vec res
 *         if not isinstance(self, Vec):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 * 
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_self, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1434
 *         cdef Vec res
 *         if not isinstance(self, Vec):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *         res = Vec.__new__(Vec)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1433
 *         cdef mat_t temp
 *         cdef Vec res
 *         if not isinstance(self, Vec):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 * 
 */
  }

  /* "srctools/_math.pyx":1436
 *             return NotImplemented
 * 
 *         res = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         res.val.x = (<Vec>self).val.x
 *         res.val.y = (<Vec>self).val.y
 */
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1436, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_v_res = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "srctools/_math.pyx":1437
 * 
 *         res = Vec.__new__(Vec)
 *         res.val.x = (<Vec>self).val.x             # <<<<<<<<<<<<<<
 *         res.val.y = (<Vec>self).val.y
 *         res.val.z = (<Vec>self).val.z
 */
  __pyx_t_4 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self)->val.x;
  __pyx_v_res->val.x = __pyx_t_4;

  /* "srctools/_math.pyx":1438
 *         res = Vec.__new__(Vec)
 *         res.val.x = (<Vec>self).val.x
 *         res.val.y = (<Vec>self).val.y             # <<<<<<<<<<<<<<
 *         res.val.z = (<Vec>self).val.z
 *         if isinstance(other, Angle):
 */
  __pyx_t_4 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self)->val.y;
  __pyx_v_res->val.y = __pyx_t_4;

  /* "srctools/_math.pyx":1439
 *         res.val.x = (<Vec>self).val.x
 *         res.val.y = (<Vec>self).val.y
 *         res.val.z = (<Vec>self).val.z             # <<<<<<<<<<<<<<
 *         if isinstance(other, Angle):
 *             _mat_from_angle(temp, &(<Angle>other).val)
 */
  __pyx_t_4 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self)->val.z;
  __pyx_v_res->val.z = __pyx_t_4;

  /* "srctools/_math.pyx":1440
 *         res.val.y = (<Vec>self).val.y
 *         res.val.z = (<Vec>self).val.z
 *         if isinstance(other, Angle):             # <<<<<<<<<<<<<<
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             vec_rot(&res.val, temp)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8srctools_5_math_Angle); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":1441
 *         res.val.z = (<Vec>self).val.z
 *         if isinstance(other, Angle):
 *             _mat_from_angle(temp, &(<Angle>other).val)             # <<<<<<<<<<<<<<
 *             vec_rot(&res.val, temp)
 *         elif isinstance(other, Matrix):
 */
    __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_temp, (&((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_other)->val));

    /* "srctools/_math.pyx":1442
 *         if isinstance(other, Angle):
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             vec_rot(&res.val, temp)             # <<<<<<<<<<<<<<
 *         elif isinstance(other, Matrix):
 *             vec_rot(&res.val, (<Matrix>other).mat)
 */
    __pyx_f_8srctools_5_math_vec_rot((&__pyx_v_res->val), __pyx_v_temp);

    /* "srctools/_math.pyx":1440
 *         res.val.y = (<Vec>self).val.y
 *         res.val.z = (<Vec>self).val.z
 *         if isinstance(other, Angle):             # <<<<<<<<<<<<<<
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             vec_rot(&res.val, temp)
 */
    goto __pyx_L4;
  }

  /* "srctools/_math.pyx":1443
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             vec_rot(&res.val, temp)
 *         elif isinstance(other, Matrix):             # <<<<<<<<<<<<<<
 *             vec_rot(&res.val, (<Matrix>other).mat)
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8srctools_5_math_Matrix); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1444
 *             vec_rot(&res.val, temp)
 *         elif isinstance(other, Matrix):
 *             vec_rot(&res.val, (<Matrix>other).mat)             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
    __pyx_f_8srctools_5_math_vec_rot((&__pyx_v_res->val), ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_other)->mat);

    /* "srctools/_math.pyx":1443
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             vec_rot(&res.val, temp)
 *         elif isinstance(other, Matrix):             # <<<<<<<<<<<<<<
 *             vec_rot(&res.val, (<Matrix>other).mat)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "srctools/_math.pyx":1446
 *             vec_rot(&res.val, (<Matrix>other).mat)
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }
  __pyx_L4:;

  /* "srctools/_math.pyx":1447
 *         else:
 *             return NotImplemented
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def __imatmul__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1429
 *             return NotImplemented
 * 
 *     def __matmul__(self, other):             # <<<<<<<<<<<<<<
 *         """Rotate this vector by an angle or matrix."""
 *         cdef mat_t temp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("srctools._math.Vec.__matmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

/* "srctools/_math.pyx":1449
 *         return res
 * 
 *     def __imatmul__(self, other):             # <<<<<<<<<<<<<<
 *         """@= operation: rotate the vector by a matrix/angle."""
 *         cdef mat_t temp
 */

/* Python wrapper */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pw_8srctools_5_math_3Vec_77__imatmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_76__imatmul__[] = "@= operation: rotate the vector by a matrix/angle.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_76__imatmul__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_77__imatmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__imatmul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_76__imatmul__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_8srctools_5_math_3Vec_76__imatmul__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other) {
  __pyx_t_8srctools_5_math_mat_t __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__imatmul__", 0);

  /* "srctools/_math.pyx":1452
 *         """@= operation: rotate the vector by a matrix/angle."""
 *         cdef mat_t temp
 *         if isinstance(other, Angle):             # <<<<<<<<<<<<<<
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             vec_rot(&self.val, temp)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8srctools_5_math_Angle); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1453
 *         cdef mat_t temp
 *         if isinstance(other, Angle):
 *             _mat_from_angle(temp, &(<Angle>other).val)             # <<<<<<<<<<<<<<
 *             vec_rot(&self.val, temp)
 *         elif isinstance(other, Matrix):
 */
    __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_temp, (&((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_other)->val));

    /* "srctools/_math.pyx":1454
 *         if isinstance(other, Angle):
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             vec_rot(&self.val, temp)             # <<<<<<<<<<<<<<
 *         elif isinstance(other, Matrix):
 *             vec_rot(&self.val, (<Matrix>other).mat)
 */
    __pyx_f_8srctools_5_math_vec_rot((&__pyx_v_self->val), __pyx_v_temp);

    /* "srctools/_math.pyx":1452
 *         """@= operation: rotate the vector by a matrix/angle."""
 *         cdef mat_t temp
 *         if isinstance(other, Angle):             # <<<<<<<<<<<<<<
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             vec_rot(&self.val, temp)
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1455
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             vec_rot(&self.val, temp)
 *         elif isinstance(other, Matrix):             # <<<<<<<<<<<<<<
 *             vec_rot(&self.val, (<Matrix>other).mat)
 *         else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8srctools_5_math_Matrix); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":1456
 *             vec_rot(&self.val, temp)
 *         elif isinstance(other, Matrix):
 *             vec_rot(&self.val, (<Matrix>other).mat)             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
    __pyx_f_8srctools_5_math_vec_rot((&__pyx_v_self->val), ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_other)->mat);

    /* "srctools/_math.pyx":1455
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             vec_rot(&self.val, temp)
 *         elif isinstance(other, Matrix):             # <<<<<<<<<<<<<<
 *             vec_rot(&self.val, (<Matrix>other).mat)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1458
 *             vec_rot(&self.val, (<Matrix>other).mat)
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":1459
 *         else:
 *             return NotImplemented
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __divmod__(obj_a, obj_b):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1449
 *         return res
 * 
 *     def __imatmul__(self, other):             # <<<<<<<<<<<<<<
 *         """@= operation: rotate the vector by a matrix/angle."""
 *         cdef mat_t temp
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

/* "srctools/_math.pyx":1461
 *         return self
 * 
 *     def __divmod__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """Divide the vector by a scalar, returning the result and remainder."""
 *         cdef Vec vec
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_79__divmod__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_78__divmod__[] = "Divide the vector by a scalar, returning the result and remainder.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_78__divmod__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_79__divmod__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__divmod__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_78__divmod__(((PyObject *)__pyx_v_obj_a), ((PyObject *)__pyx_v_obj_b));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_78__divmod__(PyObject *__pyx_v_obj_a, PyObject *__pyx_v_obj_b) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_res_1 = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_res_2 = 0;
  double __pyx_v_other_d;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  double __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__divmod__", 0);

  /* "srctools/_math.pyx":1464
 *         """Divide the vector by a scalar, returning the result and remainder."""
 *         cdef Vec vec
 *         cdef Vec res_1 = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         cdef Vec res_2 = Vec.__new__(Vec)
 *         cdef double other_d
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1464, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_res_1 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1465
 *         cdef Vec vec
 *         cdef Vec res_1 = Vec.__new__(Vec)
 *         cdef Vec res_2 = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         cdef double other_d
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1465, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_res_2 = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1468
 *         cdef double other_d
 * 
 *         if isinstance(obj_a, Vec) and isinstance(obj_b, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot divide 2 Vectors.")
 *         elif isinstance(obj_a, Vec):
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_obj_a, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_obj_b, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "srctools/_math.pyx":1469
 * 
 *         if isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 *             raise TypeError("Cannot divide 2 Vectors.")             # <<<<<<<<<<<<<<
 *         elif isinstance(obj_a, Vec):
 *             # vec / val
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1469, __pyx_L1_error)

    /* "srctools/_math.pyx":1468
 *         cdef double other_d
 * 
 *         if isinstance(obj_a, Vec) and isinstance(obj_b, Vec):             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot divide 2 Vectors.")
 *         elif isinstance(obj_a, Vec):
 */
  }

  /* "srctools/_math.pyx":1470
 *         if isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 *             raise TypeError("Cannot divide 2 Vectors.")
 *         elif isinstance(obj_a, Vec):             # <<<<<<<<<<<<<<
 *             # vec / val
 *             vec = <Vec>obj_a
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj_a, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "srctools/_math.pyx":1472
 *         elif isinstance(obj_a, Vec):
 *             # vec / val
 *             vec = <Vec>obj_a             # <<<<<<<<<<<<<<
 *             try:
 *                 other_d = <double ?>obj_b
 */
    __pyx_t_1 = __pyx_v_obj_a;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "srctools/_math.pyx":1473
 *             # vec / val
 *             vec = <Vec>obj_a
 *             try:             # <<<<<<<<<<<<<<
 *                 other_d = <double ?>obj_b
 *             except TypeError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "srctools/_math.pyx":1474
 *             vec = <Vec>obj_a
 *             try:
 *                 other_d = <double ?>obj_b             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return NotImplemented
 */
        __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_obj_b); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1474, __pyx_L6_error)
        __pyx_v_other_d = ((double)__pyx_t_8);

        /* "srctools/_math.pyx":1473
 *             # vec / val
 *             vec = <Vec>obj_a
 *             try:             # <<<<<<<<<<<<<<
 *                 other_d = <double ?>obj_b
 *             except TypeError:
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L11_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "srctools/_math.pyx":1475
 *             try:
 *                 other_d = <double ?>obj_b
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return NotImplemented
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("srctools._math.Vec.__divmod__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(0, 1475, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_11);

        /* "srctools/_math.pyx":1476
 *                 other_d = <double ?>obj_b
 *             except TypeError:
 *                 return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *             # We put % first, since Cython then produces a 'divmod' error.
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_builtin_NotImplemented);
        __pyx_r = __pyx_builtin_NotImplemented;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L9_except_return;
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;

      /* "srctools/_math.pyx":1473
 *             # vec / val
 *             vec = <Vec>obj_a
 *             try:             # <<<<<<<<<<<<<<
 *                 other_d = <double ?>obj_b
 *             except TypeError:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L9_except_return:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L11_try_end:;
    }

    /* "srctools/_math.pyx":1480
 *             # We put % first, since Cython then produces a 'divmod' error.
 * 
 *             res_2.val.x = vec.val.x % other_d             # <<<<<<<<<<<<<<
 *             res_1.val.x = vec.val.x // other_d
 *             res_2.val.y = vec.val.y % other_d
 */
    if (unlikely(__pyx_v_other_d == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1480, __pyx_L1_error)
    }
    __pyx_v_res_2->val.x = __Pyx_mod_double(__pyx_v_vec->val.x, __pyx_v_other_d);

    /* "srctools/_math.pyx":1481
 * 
 *             res_2.val.x = vec.val.x % other_d
 *             res_1.val.x = vec.val.x // other_d             # <<<<<<<<<<<<<<
 *             res_2.val.y = vec.val.y % other_d
 *             res_1.val.y = vec.val.y // other_d
 */
    if (unlikely(__pyx_v_other_d == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1481, __pyx_L1_error)
    }
    __pyx_v_res_1->val.x = floor(__pyx_v_vec->val.x / __pyx_v_other_d);

    /* "srctools/_math.pyx":1482
 *             res_2.val.x = vec.val.x % other_d
 *             res_1.val.x = vec.val.x // other_d
 *             res_2.val.y = vec.val.y % other_d             # <<<<<<<<<<<<<<
 *             res_1.val.y = vec.val.y // other_d
 *             res_2.val.z = vec.val.z % other_d
 */
    if (unlikely(__pyx_v_other_d == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1482, __pyx_L1_error)
    }
    __pyx_v_res_2->val.y = __Pyx_mod_double(__pyx_v_vec->val.y, __pyx_v_other_d);

    /* "srctools/_math.pyx":1483
 *             res_1.val.x = vec.val.x // other_d
 *             res_2.val.y = vec.val.y % other_d
 *             res_1.val.y = vec.val.y // other_d             # <<<<<<<<<<<<<<
 *             res_2.val.z = vec.val.z % other_d
 *             res_1.val.z = vec.val.z // other_d
 */
    if (unlikely(__pyx_v_other_d == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1483, __pyx_L1_error)
    }
    __pyx_v_res_1->val.y = floor(__pyx_v_vec->val.y / __pyx_v_other_d);

    /* "srctools/_math.pyx":1484
 *             res_2.val.y = vec.val.y % other_d
 *             res_1.val.y = vec.val.y // other_d
 *             res_2.val.z = vec.val.z % other_d             # <<<<<<<<<<<<<<
 *             res_1.val.z = vec.val.z // other_d
 *         elif isinstance(obj_b, Vec):
 */
    if (unlikely(__pyx_v_other_d == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1484, __pyx_L1_error)
    }
    __pyx_v_res_2->val.z = __Pyx_mod_double(__pyx_v_vec->val.z, __pyx_v_other_d);

    /* "srctools/_math.pyx":1485
 *             res_1.val.y = vec.val.y // other_d
 *             res_2.val.z = vec.val.z % other_d
 *             res_1.val.z = vec.val.z // other_d             # <<<<<<<<<<<<<<
 *         elif isinstance(obj_b, Vec):
 *             # val / vec
 */
    if (unlikely(__pyx_v_other_d == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1485, __pyx_L1_error)
    }
    __pyx_v_res_1->val.z = floor(__pyx_v_vec->val.z / __pyx_v_other_d);

    /* "srctools/_math.pyx":1470
 *         if isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 *             raise TypeError("Cannot divide 2 Vectors.")
 *         elif isinstance(obj_a, Vec):             # <<<<<<<<<<<<<<
 *             # vec / val
 *             vec = <Vec>obj_a
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1486
 *             res_2.val.z = vec.val.z % other_d
 *             res_1.val.z = vec.val.z // other_d
 *         elif isinstance(obj_b, Vec):             # <<<<<<<<<<<<<<
 *             # val / vec
 *             vec = <Vec>obj_b
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_obj_b, __pyx_ptype_8srctools_5_math_Vec); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (likely(__pyx_t_2)) {

    /* "srctools/_math.pyx":1488
 *         elif isinstance(obj_b, Vec):
 *             # val / vec
 *             vec = <Vec>obj_b             # <<<<<<<<<<<<<<
 *             try:
 *                 other_d = <double ?>obj_a
 */
    __pyx_t_11 = __pyx_v_obj_b;
    __Pyx_INCREF(__pyx_t_11);
    __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_11);
    __pyx_t_11 = 0;

    /* "srctools/_math.pyx":1489
 *             # val / vec
 *             vec = <Vec>obj_b
 *             try:             # <<<<<<<<<<<<<<
 *                 other_d = <double ?>obj_a
 *             except TypeError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "srctools/_math.pyx":1490
 *             vec = <Vec>obj_b
 *             try:
 *                 other_d = <double ?>obj_a             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return NotImplemented
 */
        __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_obj_a); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1490, __pyx_L14_error)
        __pyx_v_other_d = ((double)__pyx_t_8);

        /* "srctools/_math.pyx":1489
 *             # val / vec
 *             vec = <Vec>obj_b
 *             try:             # <<<<<<<<<<<<<<
 *                 other_d = <double ?>obj_a
 *             except TypeError:
 */
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L19_try_end;
      __pyx_L14_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "srctools/_math.pyx":1491
 *             try:
 *                 other_d = <double ?>obj_a
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return NotImplemented
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("srctools._math.Vec.__divmod__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_10, &__pyx_t_1) < 0) __PYX_ERR(0, 1491, __pyx_L16_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_1);

        /* "srctools/_math.pyx":1492
 *                 other_d = <double ?>obj_a
 *             except TypeError:
 *                 return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *             res_2.val.x = other_d % vec.val.x
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_builtin_NotImplemented);
        __pyx_r = __pyx_builtin_NotImplemented;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L17_except_return;
      }
      goto __pyx_L16_except_error;
      __pyx_L16_except_error:;

      /* "srctools/_math.pyx":1489
 *             # val / vec
 *             vec = <Vec>obj_b
 *             try:             # <<<<<<<<<<<<<<
 *                 other_d = <double ?>obj_a
 *             except TypeError:
 */
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L17_except_return:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L19_try_end:;
    }

    /* "srctools/_math.pyx":1494
 *                 return NotImplemented
 * 
 *             res_2.val.x = other_d % vec.val.x             # <<<<<<<<<<<<<<
 *             res_1.val.x = other_d // vec.val.x
 *             res_2.val.y = other_d % vec.val.y
 */
    if (unlikely(__pyx_v_vec->val.x == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1494, __pyx_L1_error)
    }
    __pyx_v_res_2->val.x = __Pyx_mod_double(__pyx_v_other_d, __pyx_v_vec->val.x);

    /* "srctools/_math.pyx":1495
 * 
 *             res_2.val.x = other_d % vec.val.x
 *             res_1.val.x = other_d // vec.val.x             # <<<<<<<<<<<<<<
 *             res_2.val.y = other_d % vec.val.y
 *             res_1.val.y = other_d // vec.val.y
 */
    if (unlikely(__pyx_v_vec->val.x == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1495, __pyx_L1_error)
    }
    __pyx_v_res_1->val.x = floor(__pyx_v_other_d / __pyx_v_vec->val.x);

    /* "srctools/_math.pyx":1496
 *             res_2.val.x = other_d % vec.val.x
 *             res_1.val.x = other_d // vec.val.x
 *             res_2.val.y = other_d % vec.val.y             # <<<<<<<<<<<<<<
 *             res_1.val.y = other_d // vec.val.y
 *             res_2.val.z = other_d % vec.val.z
 */
    if (unlikely(__pyx_v_vec->val.y == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1496, __pyx_L1_error)
    }
    __pyx_v_res_2->val.y = __Pyx_mod_double(__pyx_v_other_d, __pyx_v_vec->val.y);

    /* "srctools/_math.pyx":1497
 *             res_1.val.x = other_d // vec.val.x
 *             res_2.val.y = other_d % vec.val.y
 *             res_1.val.y = other_d // vec.val.y             # <<<<<<<<<<<<<<
 *             res_2.val.z = other_d % vec.val.z
 *             res_1.val.z = other_d // vec.val.z
 */
    if (unlikely(__pyx_v_vec->val.y == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1497, __pyx_L1_error)
    }
    __pyx_v_res_1->val.y = floor(__pyx_v_other_d / __pyx_v_vec->val.y);

    /* "srctools/_math.pyx":1498
 *             res_2.val.y = other_d % vec.val.y
 *             res_1.val.y = other_d // vec.val.y
 *             res_2.val.z = other_d % vec.val.z             # <<<<<<<<<<<<<<
 *             res_1.val.z = other_d // vec.val.z
 *         else:
 */
    if (unlikely(__pyx_v_vec->val.z == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
      __PYX_ERR(0, 1498, __pyx_L1_error)
    }
    __pyx_v_res_2->val.z = __Pyx_mod_double(__pyx_v_other_d, __pyx_v_vec->val.z);

    /* "srctools/_math.pyx":1499
 *             res_1.val.y = other_d // vec.val.y
 *             res_2.val.z = other_d % vec.val.z
 *             res_1.val.z = other_d // vec.val.z             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Called with non-vectors??")
 */
    if (unlikely(__pyx_v_vec->val.z == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1499, __pyx_L1_error)
    }
    __pyx_v_res_1->val.z = floor(__pyx_v_other_d / __pyx_v_vec->val.z);

    /* "srctools/_math.pyx":1486
 *             res_2.val.z = vec.val.z % other_d
 *             res_1.val.z = vec.val.z // other_d
 *         elif isinstance(obj_b, Vec):             # <<<<<<<<<<<<<<
 *             # val / vec
 *             vec = <Vec>obj_b
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1501
 *             res_1.val.z = other_d // vec.val.z
 *         else:
 *             raise TypeError("Called with non-vectors??")             # <<<<<<<<<<<<<<
 * 
 *         return res_1, res_2
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1501, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":1503
 *             raise TypeError("Called with non-vectors??")
 * 
 *         return res_1, res_2             # <<<<<<<<<<<<<<
 * 
 *     def __bool__(self) -> bool:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_res_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_res_1));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_res_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_res_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_res_2));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_res_2));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1461
 *         return self
 * 
 *     def __divmod__(obj_a, obj_b):             # <<<<<<<<<<<<<<
 *         """Divide the vector by a scalar, returning the result and remainder."""
 *         cdef Vec vec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("srctools._math.Vec.__divmod__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XDECREF((PyObject *)__pyx_v_res_1);
  __Pyx_XDECREF((PyObject *)__pyx_v_res_2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1505
 *         return res_1, res_2
 * 
 *     def __bool__(self) -> bool:             # <<<<<<<<<<<<<<
 *         """Vectors are True if any axis is non-zero."""
 *         if self.val.x != 0:
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_3Vec_81__bool__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8srctools_5_math_3Vec_81__bool__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_80__bool__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_3Vec_80__bool__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__bool__", 0);

  /* "srctools/_math.pyx":1507
 *     def __bool__(self) -> bool:
 *         """Vectors are True if any axis is non-zero."""
 *         if self.val.x != 0:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.val.y != 0:
 */
  __pyx_t_1 = ((__pyx_v_self->val.x != 0.0) != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":1508
 *         """Vectors are True if any axis is non-zero."""
 *         if self.val.x != 0:
 *             return True             # <<<<<<<<<<<<<<
 *         if self.val.y != 0:
 *             return True
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1507
 *     def __bool__(self) -> bool:
 *         """Vectors are True if any axis is non-zero."""
 *         if self.val.x != 0:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.val.y != 0:
 */
  }

  /* "srctools/_math.pyx":1509
 *         if self.val.x != 0:
 *             return True
 *         if self.val.y != 0:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.val.z != 0:
 */
  __pyx_t_1 = ((__pyx_v_self->val.y != 0.0) != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":1510
 *             return True
 *         if self.val.y != 0:
 *             return True             # <<<<<<<<<<<<<<
 *         if self.val.z != 0:
 *             return True
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1509
 *         if self.val.x != 0:
 *             return True
 *         if self.val.y != 0:             # <<<<<<<<<<<<<<
 *             return True
 *         if self.val.z != 0:
 */
  }

  /* "srctools/_math.pyx":1511
 *         if self.val.y != 0:
 *             return True
 *         if self.val.z != 0:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  __pyx_t_1 = ((__pyx_v_self->val.z != 0.0) != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":1512
 *             return True
 *         if self.val.z != 0:
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1511
 *         if self.val.y != 0:
 *             return True
 *         if self.val.z != 0:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  }

  /* "srctools/_math.pyx":1513
 *         if self.val.z != 0:
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1505
 *         return res_1, res_2
 * 
 *     def __bool__(self) -> bool:             # <<<<<<<<<<<<<<
 *         """Vectors are True if any axis is non-zero."""
 *         if self.val.x != 0:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1515
 *         return False
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         """The len() of a vector is the number of non-zero axes."""
 *         return (
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8srctools_5_math_3Vec_83__len__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_82__len__[] = "The len() of a vector is the number of non-zero axes.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_82__len__;
#endif
static Py_ssize_t __pyx_pw_8srctools_5_math_3Vec_83__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_82__len__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8srctools_5_math_3Vec_82__len__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "srctools/_math.pyx":1519
 *         return (
 *             (abs(self.val.x) > TOL) +
 *             (abs(self.val.y) > TOL) +             # <<<<<<<<<<<<<<
 *             (abs(self.val.z) > TOL)
 *         )
 */
  __pyx_r = (((fabs(__pyx_v_self->val.x) > 1e-06) + (fabs(__pyx_v_self->val.y) > 1e-06)) + (fabs(__pyx_v_self->val.z) > 1e-06));
  goto __pyx_L0;

  /* "srctools/_math.pyx":1515
 *         return False
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         """The len() of a vector is the number of non-zero axes."""
 *         return (
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1525
 *     # All the comparisons are similar, so we can use richcmp to
 *     # nicely combine the parsing code.
 *     def __richcmp__(self, other_obj, int op):             # <<<<<<<<<<<<<<
 *         """Rich Comparisons.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_85__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_obj, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_3Vec_85__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_obj, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_84__richcmp__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_other_obj), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_84__richcmp__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other_obj, int __pyx_v_op) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_other;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned char __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_UCS4 __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "srctools/_math.pyx":1533
 *         """
 *         cdef vec_t other
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&other, other_obj, False)
 *         except (TypeError, ValueError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "srctools/_math.pyx":1534
 *         cdef vec_t other
 *         try:
 *             conv_vec(&other, other_obj, False)             # <<<<<<<<<<<<<<
 *         except (TypeError, ValueError):
 *             return NotImplemented
 */
      __pyx_t_4 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_other), __pyx_v_other_obj, 0); if (unlikely(__pyx_t_4 == ((unsigned char)0))) __PYX_ERR(0, 1534, __pyx_L3_error)

      /* "srctools/_math.pyx":1533
 *         """
 *         cdef vec_t other
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&other, other_obj, False)
 *         except (TypeError, ValueError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "srctools/_math.pyx":1535
 *         try:
 *             conv_vec(&other, other_obj, False)
 *         except (TypeError, ValueError):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 * 
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("srctools._math.Vec.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 1535, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "srctools/_math.pyx":1536
 *             conv_vec(&other, other_obj, False)
 *         except (TypeError, ValueError):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *         # 'redundant' == True prevents the individual comparisons from trying
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_builtin_NotImplemented);
      __pyx_r = __pyx_builtin_NotImplemented;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "srctools/_math.pyx":1533
 *         """
 *         cdef vec_t other
 *         try:             # <<<<<<<<<<<<<<
 *             conv_vec(&other, other_obj, False)
 *         except (TypeError, ValueError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "srctools/_math.pyx":1541
 *         # to convert the result individually on failure.
 *         # Use subtraction so that values within TOL are accepted.
 *         if op == Py_EQ:             # <<<<<<<<<<<<<<
 *             return (
 *                 abs(self.val.x - other.x) <= TOL and
 */
  __pyx_t_9 = ((__pyx_v_op == Py_EQ) != 0);
  if (__pyx_t_9) {

    /* "srctools/_math.pyx":1542
 *         # Use subtraction so that values within TOL are accepted.
 *         if op == Py_EQ:
 *             return (             # <<<<<<<<<<<<<<
 *                 abs(self.val.x - other.x) <= TOL and
 *                 abs(self.val.y - other.y) <= TOL and
 */
    __Pyx_XDECREF(__pyx_r);

    /* "srctools/_math.pyx":1543
 *         if op == Py_EQ:
 *             return (
 *                 abs(self.val.x - other.x) <= TOL and             # <<<<<<<<<<<<<<
 *                 abs(self.val.y - other.y) <= TOL and
 *                 abs(self.val.z - other.z) <= TOL
 */
    __pyx_t_10 = (fabs((__pyx_v_self->val.x - __pyx_v_other.x)) <= 1e-06);
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L12_bool_binop_done;
    }

    /* "srctools/_math.pyx":1544
 *             return (
 *                 abs(self.val.x - other.x) <= TOL and
 *                 abs(self.val.y - other.y) <= TOL and             # <<<<<<<<<<<<<<
 *                 abs(self.val.z - other.z) <= TOL
 *             ) == True
 */
    __pyx_t_10 = (fabs((__pyx_v_self->val.y - __pyx_v_other.y)) <= 1e-06);
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L12_bool_binop_done;
    }

    /* "srctools/_math.pyx":1545
 *                 abs(self.val.x - other.x) <= TOL and
 *                 abs(self.val.y - other.y) <= TOL and
 *                 abs(self.val.z - other.z) <= TOL             # <<<<<<<<<<<<<<
 *             ) == True
 *         elif op == Py_NE:
 */
    __pyx_t_10 = (fabs((__pyx_v_self->val.z - __pyx_v_other.z)) <= 1e-06);
    __pyx_t_9 = __pyx_t_10;
    __pyx_L12_bool_binop_done:;

    /* "srctools/_math.pyx":1546
 *                 abs(self.val.y - other.y) <= TOL and
 *                 abs(self.val.z - other.z) <= TOL
 *             ) == True             # <<<<<<<<<<<<<<
 *         elif op == Py_NE:
 *             return (
 */
    __pyx_t_8 = __Pyx_PyBool_FromLong((__pyx_t_9 == 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1541
 *         # to convert the result individually on failure.
 *         # Use subtraction so that values within TOL are accepted.
 *         if op == Py_EQ:             # <<<<<<<<<<<<<<
 *             return (
 *                 abs(self.val.x - other.x) <= TOL and
 */
  }

  /* "srctools/_math.pyx":1547
 *                 abs(self.val.z - other.z) <= TOL
 *             ) == True
 *         elif op == Py_NE:             # <<<<<<<<<<<<<<
 *             return (
 *                 abs(self.val.x - other.x) > TOL or
 */
  __pyx_t_9 = ((__pyx_v_op == Py_NE) != 0);
  if (__pyx_t_9) {

    /* "srctools/_math.pyx":1548
 *             ) == True
 *         elif op == Py_NE:
 *             return (             # <<<<<<<<<<<<<<
 *                 abs(self.val.x - other.x) > TOL or
 *                 abs(self.val.y - other.y) > TOL or
 */
    __Pyx_XDECREF(__pyx_r);

    /* "srctools/_math.pyx":1549
 *         elif op == Py_NE:
 *             return (
 *                 abs(self.val.x - other.x) > TOL or             # <<<<<<<<<<<<<<
 *                 abs(self.val.y - other.y) > TOL or
 *                 abs(self.val.z - other.z) > TOL
 */
    __pyx_t_10 = (fabs((__pyx_v_self->val.x - __pyx_v_other.x)) > 1e-06);
    if (!__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L15_bool_binop_done;
    }

    /* "srctools/_math.pyx":1550
 *             return (
 *                 abs(self.val.x - other.x) > TOL or
 *                 abs(self.val.y - other.y) > TOL or             # <<<<<<<<<<<<<<
 *                 abs(self.val.z - other.z) > TOL
 *             ) == True
 */
    __pyx_t_10 = (fabs((__pyx_v_self->val.y - __pyx_v_other.y)) > 1e-06);
    if (!__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L15_bool_binop_done;
    }

    /* "srctools/_math.pyx":1551
 *                 abs(self.val.x - other.x) > TOL or
 *                 abs(self.val.y - other.y) > TOL or
 *                 abs(self.val.z - other.z) > TOL             # <<<<<<<<<<<<<<
 *             ) == True
 *         elif op == Py_LT:
 */
    __pyx_t_10 = (fabs((__pyx_v_self->val.z - __pyx_v_other.z)) > 1e-06);
    __pyx_t_9 = __pyx_t_10;
    __pyx_L15_bool_binop_done:;

    /* "srctools/_math.pyx":1552
 *                 abs(self.val.y - other.y) > TOL or
 *                 abs(self.val.z - other.z) > TOL
 *             ) == True             # <<<<<<<<<<<<<<
 *         elif op == Py_LT:
 *             return (
 */
    __pyx_t_8 = __Pyx_PyBool_FromLong((__pyx_t_9 == 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1547
 *                 abs(self.val.z - other.z) <= TOL
 *             ) == True
 *         elif op == Py_NE:             # <<<<<<<<<<<<<<
 *             return (
 *                 abs(self.val.x - other.x) > TOL or
 */
  }

  /* "srctools/_math.pyx":1553
 *                 abs(self.val.z - other.z) > TOL
 *             ) == True
 *         elif op == Py_LT:             # <<<<<<<<<<<<<<
 *             return (
 *                 (other.x - self.val.x) > TOL and
 */
  __pyx_t_9 = ((__pyx_v_op == Py_LT) != 0);
  if (__pyx_t_9) {

    /* "srctools/_math.pyx":1554
 *             ) == True
 *         elif op == Py_LT:
 *             return (             # <<<<<<<<<<<<<<
 *                 (other.x - self.val.x) > TOL and
 *                 (other.y - self.val.y) > TOL and
 */
    __Pyx_XDECREF(__pyx_r);

    /* "srctools/_math.pyx":1555
 *         elif op == Py_LT:
 *             return (
 *                 (other.x - self.val.x) > TOL and             # <<<<<<<<<<<<<<
 *                 (other.y - self.val.y) > TOL and
 *                 (other.z - self.val.z) > TOL
 */
    __pyx_t_10 = ((__pyx_v_other.x - __pyx_v_self->val.x) > 1e-06);
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L18_bool_binop_done;
    }

    /* "srctools/_math.pyx":1556
 *             return (
 *                 (other.x - self.val.x) > TOL and
 *                 (other.y - self.val.y) > TOL and             # <<<<<<<<<<<<<<
 *                 (other.z - self.val.z) > TOL
 *             ) == True
 */
    __pyx_t_10 = ((__pyx_v_other.y - __pyx_v_self->val.y) > 1e-06);
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L18_bool_binop_done;
    }

    /* "srctools/_math.pyx":1557
 *                 (other.x - self.val.x) > TOL and
 *                 (other.y - self.val.y) > TOL and
 *                 (other.z - self.val.z) > TOL             # <<<<<<<<<<<<<<
 *             ) == True
 *         elif op == Py_GT:
 */
    __pyx_t_10 = ((__pyx_v_other.z - __pyx_v_self->val.z) > 1e-06);
    __pyx_t_9 = __pyx_t_10;
    __pyx_L18_bool_binop_done:;

    /* "srctools/_math.pyx":1558
 *                 (other.y - self.val.y) > TOL and
 *                 (other.z - self.val.z) > TOL
 *             ) == True             # <<<<<<<<<<<<<<
 *         elif op == Py_GT:
 *             return (
 */
    __pyx_t_8 = __Pyx_PyBool_FromLong((__pyx_t_9 == 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1553
 *                 abs(self.val.z - other.z) > TOL
 *             ) == True
 *         elif op == Py_LT:             # <<<<<<<<<<<<<<
 *             return (
 *                 (other.x - self.val.x) > TOL and
 */
  }

  /* "srctools/_math.pyx":1559
 *                 (other.z - self.val.z) > TOL
 *             ) == True
 *         elif op == Py_GT:             # <<<<<<<<<<<<<<
 *             return (
 *                 (self.val.x - other.x) > TOL and
 */
  __pyx_t_9 = ((__pyx_v_op == Py_GT) != 0);
  if (__pyx_t_9) {

    /* "srctools/_math.pyx":1560
 *             ) == True
 *         elif op == Py_GT:
 *             return (             # <<<<<<<<<<<<<<
 *                 (self.val.x - other.x) > TOL and
 *                 (self.val.y - other.y) > TOL and
 */
    __Pyx_XDECREF(__pyx_r);

    /* "srctools/_math.pyx":1561
 *         elif op == Py_GT:
 *             return (
 *                 (self.val.x - other.x) > TOL and             # <<<<<<<<<<<<<<
 *                 (self.val.y - other.y) > TOL and
 *                 (self.val.z - other.z) > TOL
 */
    __pyx_t_10 = ((__pyx_v_self->val.x - __pyx_v_other.x) > 1e-06);
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L21_bool_binop_done;
    }

    /* "srctools/_math.pyx":1562
 *             return (
 *                 (self.val.x - other.x) > TOL and
 *                 (self.val.y - other.y) > TOL and             # <<<<<<<<<<<<<<
 *                 (self.val.z - other.z) > TOL
 *             ) == True
 */
    __pyx_t_10 = ((__pyx_v_self->val.y - __pyx_v_other.y) > 1e-06);
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L21_bool_binop_done;
    }

    /* "srctools/_math.pyx":1563
 *                 (self.val.x - other.x) > TOL and
 *                 (self.val.y - other.y) > TOL and
 *                 (self.val.z - other.z) > TOL             # <<<<<<<<<<<<<<
 *             ) == True
 *         elif op == Py_LE:  # !GT
 */
    __pyx_t_10 = ((__pyx_v_self->val.z - __pyx_v_other.z) > 1e-06);
    __pyx_t_9 = __pyx_t_10;
    __pyx_L21_bool_binop_done:;

    /* "srctools/_math.pyx":1564
 *                 (self.val.y - other.y) > TOL and
 *                 (self.val.z - other.z) > TOL
 *             ) == True             # <<<<<<<<<<<<<<
 *         elif op == Py_LE:  # !GT
 *             return (
 */
    __pyx_t_8 = __Pyx_PyBool_FromLong((__pyx_t_9 == 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1559
 *                 (other.z - self.val.z) > TOL
 *             ) == True
 *         elif op == Py_GT:             # <<<<<<<<<<<<<<
 *             return (
 *                 (self.val.x - other.x) > TOL and
 */
  }

  /* "srctools/_math.pyx":1565
 *                 (self.val.z - other.z) > TOL
 *             ) == True
 *         elif op == Py_LE:  # !GT             # <<<<<<<<<<<<<<
 *             return (
 *                 (self.val.x - other.x) <= TOL and
 */
  __pyx_t_9 = ((__pyx_v_op == Py_LE) != 0);
  if (__pyx_t_9) {

    /* "srctools/_math.pyx":1566
 *             ) == True
 *         elif op == Py_LE:  # !GT
 *             return (             # <<<<<<<<<<<<<<
 *                 (self.val.x - other.x) <= TOL and
 *                 (self.val.y - other.y) <= TOL and
 */
    __Pyx_XDECREF(__pyx_r);

    /* "srctools/_math.pyx":1567
 *         elif op == Py_LE:  # !GT
 *             return (
 *                 (self.val.x - other.x) <= TOL and             # <<<<<<<<<<<<<<
 *                 (self.val.y - other.y) <= TOL and
 *                 (self.val.z - other.z) <= TOL
 */
    __pyx_t_10 = ((__pyx_v_self->val.x - __pyx_v_other.x) <= 1e-06);
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L24_bool_binop_done;
    }

    /* "srctools/_math.pyx":1568
 *             return (
 *                 (self.val.x - other.x) <= TOL and
 *                 (self.val.y - other.y) <= TOL and             # <<<<<<<<<<<<<<
 *                 (self.val.z - other.z) <= TOL
 *             ) == True
 */
    __pyx_t_10 = ((__pyx_v_self->val.y - __pyx_v_other.y) <= 1e-06);
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L24_bool_binop_done;
    }

    /* "srctools/_math.pyx":1569
 *                 (self.val.x - other.x) <= TOL and
 *                 (self.val.y - other.y) <= TOL and
 *                 (self.val.z - other.z) <= TOL             # <<<<<<<<<<<<<<
 *             ) == True
 *         elif op == Py_GE: # !LT
 */
    __pyx_t_10 = ((__pyx_v_self->val.z - __pyx_v_other.z) <= 1e-06);
    __pyx_t_9 = __pyx_t_10;
    __pyx_L24_bool_binop_done:;

    /* "srctools/_math.pyx":1570
 *                 (self.val.y - other.y) <= TOL and
 *                 (self.val.z - other.z) <= TOL
 *             ) == True             # <<<<<<<<<<<<<<
 *         elif op == Py_GE: # !LT
 *             return (
 */
    __pyx_t_8 = __Pyx_PyBool_FromLong((__pyx_t_9 == 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1565
 *                 (self.val.z - other.z) > TOL
 *             ) == True
 *         elif op == Py_LE:  # !GT             # <<<<<<<<<<<<<<
 *             return (
 *                 (self.val.x - other.x) <= TOL and
 */
  }

  /* "srctools/_math.pyx":1571
 *                 (self.val.z - other.z) <= TOL
 *             ) == True
 *         elif op == Py_GE: # !LT             # <<<<<<<<<<<<<<
 *             return (
 *                 (other.x - self.val.x) <= TOL and
 */
  __pyx_t_9 = ((__pyx_v_op == Py_GE) != 0);
  if (likely(__pyx_t_9)) {

    /* "srctools/_math.pyx":1572
 *             ) == True
 *         elif op == Py_GE: # !LT
 *             return (             # <<<<<<<<<<<<<<
 *                 (other.x - self.val.x) <= TOL and
 *                 (other.y - self.val.y) <= TOL and
 */
    __Pyx_XDECREF(__pyx_r);

    /* "srctools/_math.pyx":1573
 *         elif op == Py_GE: # !LT
 *             return (
 *                 (other.x - self.val.x) <= TOL and             # <<<<<<<<<<<<<<
 *                 (other.y - self.val.y) <= TOL and
 *                 (other.z - self.val.z) <= TOL
 */
    __pyx_t_10 = ((__pyx_v_other.x - __pyx_v_self->val.x) <= 1e-06);
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L27_bool_binop_done;
    }

    /* "srctools/_math.pyx":1574
 *             return (
 *                 (other.x - self.val.x) <= TOL and
 *                 (other.y - self.val.y) <= TOL and             # <<<<<<<<<<<<<<
 *                 (other.z - self.val.z) <= TOL
 *             ) == True
 */
    __pyx_t_10 = ((__pyx_v_other.y - __pyx_v_self->val.y) <= 1e-06);
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L27_bool_binop_done;
    }

    /* "srctools/_math.pyx":1575
 *                 (other.x - self.val.x) <= TOL and
 *                 (other.y - self.val.y) <= TOL and
 *                 (other.z - self.val.z) <= TOL             # <<<<<<<<<<<<<<
 *             ) == True
 *         else:
 */
    __pyx_t_10 = ((__pyx_v_other.z - __pyx_v_self->val.z) <= 1e-06);
    __pyx_t_9 = __pyx_t_10;
    __pyx_L27_bool_binop_done:;

    /* "srctools/_math.pyx":1576
 *                 (other.y - self.val.y) <= TOL and
 *                 (other.z - self.val.z) <= TOL
 *             ) == True             # <<<<<<<<<<<<<<
 *         else:
 *             raise SystemError(f'Unknown operation {op!r}' '!')
 */
    __pyx_t_8 = __Pyx_PyBool_FromLong((__pyx_t_9 == 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1571
 *                 (self.val.z - other.z) <= TOL
 *             ) == True
 *         elif op == Py_GE: # !LT             # <<<<<<<<<<<<<<
 *             return (
 *                 (other.x - self.val.x) <= TOL and
 */
  }

  /* "srctools/_math.pyx":1578
 *             ) == True
 *         else:
 *             raise SystemError(f'Unknown operation {op!r}' '!')             # <<<<<<<<<<<<<<
 * 
 *     def max(self, other):
 */
  /*else*/ {
    __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = 0;
    __pyx_t_12 = 127;
    __Pyx_INCREF(__pyx_kp_u_Unknown_operation);
    __pyx_t_11 += 18;
    __Pyx_GIVEREF(__pyx_kp_u_Unknown_operation);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_Unknown_operation);
    __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_op, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__4);
    __pyx_t_11 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__4);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u__4);
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_8, 3, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SystemError, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(0, 1578, __pyx_L1_error)
  }

  /* "srctools/_math.pyx":1525
 *     # All the comparisons are similar, so we can use richcmp to
 *     # nicely combine the parsing code.
 *     def __richcmp__(self, other_obj, int op):             # <<<<<<<<<<<<<<
 *         """Rich Comparisons.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srctools._math.Vec.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1580
 *             raise SystemError(f'Unknown operation {op!r}' '!')
 * 
 *     def max(self, other):             # <<<<<<<<<<<<<<
 *         """Set this vector's values to the maximum of the two vectors."""
 *         cdef vec_t vec
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_87max(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_86max[] = "Vec.max(self, other)\nSet this vector's values to the maximum of the two vectors.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_87max(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_86max(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_86max(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned char __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("max", 0);

  /* "srctools/_math.pyx":1583
 *         """Set this vector's values to the maximum of the two vectors."""
 *         cdef vec_t vec
 *         conv_vec(&vec, other, scalar=False)             # <<<<<<<<<<<<<<
 *         if self.val.x < vec.x:
 *             self.val.x = vec.x
 */
  __pyx_t_1 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec), __pyx_v_other, 0); if (unlikely(__pyx_t_1 == ((unsigned char)0))) __PYX_ERR(0, 1583, __pyx_L1_error)

  /* "srctools/_math.pyx":1584
 *         cdef vec_t vec
 *         conv_vec(&vec, other, scalar=False)
 *         if self.val.x < vec.x:             # <<<<<<<<<<<<<<
 *             self.val.x = vec.x
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->val.x < __pyx_v_vec.x) != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1585
 *         conv_vec(&vec, other, scalar=False)
 *         if self.val.x < vec.x:
 *             self.val.x = vec.x             # <<<<<<<<<<<<<<
 * 
 *         if self.val.y < vec.y:
 */
    __pyx_t_3 = __pyx_v_vec.x;
    __pyx_v_self->val.x = __pyx_t_3;

    /* "srctools/_math.pyx":1584
 *         cdef vec_t vec
 *         conv_vec(&vec, other, scalar=False)
 *         if self.val.x < vec.x:             # <<<<<<<<<<<<<<
 *             self.val.x = vec.x
 * 
 */
  }

  /* "srctools/_math.pyx":1587
 *             self.val.x = vec.x
 * 
 *         if self.val.y < vec.y:             # <<<<<<<<<<<<<<
 *             self.val.y = vec.y
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->val.y < __pyx_v_vec.y) != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1588
 * 
 *         if self.val.y < vec.y:
 *             self.val.y = vec.y             # <<<<<<<<<<<<<<
 * 
 *         if self.val.z < vec.z:
 */
    __pyx_t_3 = __pyx_v_vec.y;
    __pyx_v_self->val.y = __pyx_t_3;

    /* "srctools/_math.pyx":1587
 *             self.val.x = vec.x
 * 
 *         if self.val.y < vec.y:             # <<<<<<<<<<<<<<
 *             self.val.y = vec.y
 * 
 */
  }

  /* "srctools/_math.pyx":1590
 *             self.val.y = vec.y
 * 
 *         if self.val.z < vec.z:             # <<<<<<<<<<<<<<
 *             self.val.z = vec.z
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->val.z < __pyx_v_vec.z) != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1591
 * 
 *         if self.val.z < vec.z:
 *             self.val.z = vec.z             # <<<<<<<<<<<<<<
 * 
 *     def min(self, other):
 */
    __pyx_t_3 = __pyx_v_vec.z;
    __pyx_v_self->val.z = __pyx_t_3;

    /* "srctools/_math.pyx":1590
 *             self.val.y = vec.y
 * 
 *         if self.val.z < vec.z:             # <<<<<<<<<<<<<<
 *             self.val.z = vec.z
 * 
 */
  }

  /* "srctools/_math.pyx":1580
 *             raise SystemError(f'Unknown operation {op!r}' '!')
 * 
 *     def max(self, other):             # <<<<<<<<<<<<<<
 *         """Set this vector's values to the maximum of the two vectors."""
 *         cdef vec_t vec
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("srctools._math.Vec.max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1593
 *             self.val.z = vec.z
 * 
 *     def min(self, other):             # <<<<<<<<<<<<<<
 *         """Set this vector's values to be the minimum of the two vectors."""
 *         cdef vec_t vec
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_89min(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_88min[] = "Vec.min(self, other)\nSet this vector's values to be the minimum of the two vectors.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_89min(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("min (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_88min(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_88min(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned char __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("min", 0);

  /* "srctools/_math.pyx":1596
 *         """Set this vector's values to be the minimum of the two vectors."""
 *         cdef vec_t vec
 *         conv_vec(&vec, other, scalar=False)             # <<<<<<<<<<<<<<
 *         if self.val.x > vec.x:
 *             self.val.x = vec.x
 */
  __pyx_t_1 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec), __pyx_v_other, 0); if (unlikely(__pyx_t_1 == ((unsigned char)0))) __PYX_ERR(0, 1596, __pyx_L1_error)

  /* "srctools/_math.pyx":1597
 *         cdef vec_t vec
 *         conv_vec(&vec, other, scalar=False)
 *         if self.val.x > vec.x:             # <<<<<<<<<<<<<<
 *             self.val.x = vec.x
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->val.x > __pyx_v_vec.x) != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1598
 *         conv_vec(&vec, other, scalar=False)
 *         if self.val.x > vec.x:
 *             self.val.x = vec.x             # <<<<<<<<<<<<<<
 * 
 *         if self.val.y > vec.y:
 */
    __pyx_t_3 = __pyx_v_vec.x;
    __pyx_v_self->val.x = __pyx_t_3;

    /* "srctools/_math.pyx":1597
 *         cdef vec_t vec
 *         conv_vec(&vec, other, scalar=False)
 *         if self.val.x > vec.x:             # <<<<<<<<<<<<<<
 *             self.val.x = vec.x
 * 
 */
  }

  /* "srctools/_math.pyx":1600
 *             self.val.x = vec.x
 * 
 *         if self.val.y > vec.y:             # <<<<<<<<<<<<<<
 *             self.val.y = vec.y
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->val.y > __pyx_v_vec.y) != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1601
 * 
 *         if self.val.y > vec.y:
 *             self.val.y = vec.y             # <<<<<<<<<<<<<<
 * 
 *         if self.val.z > vec.z:
 */
    __pyx_t_3 = __pyx_v_vec.y;
    __pyx_v_self->val.y = __pyx_t_3;

    /* "srctools/_math.pyx":1600
 *             self.val.x = vec.x
 * 
 *         if self.val.y > vec.y:             # <<<<<<<<<<<<<<
 *             self.val.y = vec.y
 * 
 */
  }

  /* "srctools/_math.pyx":1603
 *             self.val.y = vec.y
 * 
 *         if self.val.z > vec.z:             # <<<<<<<<<<<<<<
 *             self.val.z = vec.z
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->val.z > __pyx_v_vec.z) != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1604
 * 
 *         if self.val.z > vec.z:
 *             self.val.z = vec.z             # <<<<<<<<<<<<<<
 * 
 *     def __round__(self, object n=0):
 */
    __pyx_t_3 = __pyx_v_vec.z;
    __pyx_v_self->val.z = __pyx_t_3;

    /* "srctools/_math.pyx":1603
 *             self.val.y = vec.y
 * 
 *         if self.val.z > vec.z:             # <<<<<<<<<<<<<<
 *             self.val.z = vec.z
 * 
 */
  }

  /* "srctools/_math.pyx":1593
 *             self.val.z = vec.z
 * 
 *     def min(self, other):             # <<<<<<<<<<<<<<
 *         """Set this vector's values to be the minimum of the two vectors."""
 *         cdef vec_t vec
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("srctools._math.Vec.min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1606
 *             self.val.z = vec.z
 * 
 *     def __round__(self, object n=0):             # <<<<<<<<<<<<<<
 *         """Performing round() on a Vec rounds each axis."""
 *         cdef Vec vec = Vec.__new__(Vec)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_91__round__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_90__round__[] = "Vec.__round__(self, n=0)\nPerforming round() on a Vec rounds each axis.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_91__round__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__round__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__round__") < 0)) __PYX_ERR(0, 1606, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_n = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__round__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1606, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.__round__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_90__round__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_90__round__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_n) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__round__", 0);

  /* "srctools/_math.pyx":1608
 *     def __round__(self, object n=0):
 *         """Performing round() on a Vec rounds each axis."""
 *         cdef Vec vec = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 * 
 *         vec.val.x = round(self.val.x, n)
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1610
 *         cdef Vec vec = Vec.__new__(Vec)
 * 
 *         vec.val.x = round(self.val.x, n)             # <<<<<<<<<<<<<<
 *         vec.val.y = round(self.val.y, n)
 *         vec.val.z = round(self.val.z, n)
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_n);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_vec->val.x = __pyx_t_3;

  /* "srctools/_math.pyx":1611
 * 
 *         vec.val.x = round(self.val.x, n)
 *         vec.val.y = round(self.val.y, n)             # <<<<<<<<<<<<<<
 *         vec.val.z = round(self.val.z, n)
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_n);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1611, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_vec->val.y = __pyx_t_3;

  /* "srctools/_math.pyx":1612
 *         vec.val.x = round(self.val.x, n)
 *         vec.val.y = round(self.val.y, n)
 *         vec.val.z = round(self.val.z, n)             # <<<<<<<<<<<<<<
 * 
 *         return vec
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_n);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1612, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_vec->val.z = __pyx_t_3;

  /* "srctools/_math.pyx":1614
 *         vec.val.z = round(self.val.z, n)
 * 
 *         return vec             # <<<<<<<<<<<<<<
 * 
 *     def mag_sq(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __pyx_r = ((PyObject *)__pyx_v_vec);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1606
 *             self.val.z = vec.z
 * 
 *     def __round__(self, object n=0):             # <<<<<<<<<<<<<<
 *         """Performing round() on a Vec rounds each axis."""
 *         cdef Vec vec = Vec.__new__(Vec)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srctools._math.Vec.__round__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1616
 *         return vec
 * 
 *     def mag_sq(self):             # <<<<<<<<<<<<<<
 *         """Compute the distance from the vector and the origin."""
 *         return _vec_mag_sq(&self.val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_93mag_sq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_92mag_sq[] = "Vec.mag_sq(self)\nCompute the distance from the vector and the origin.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_93mag_sq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mag_sq (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_92mag_sq(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_92mag_sq(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mag_sq", 0);

  /* "srctools/_math.pyx":1618
 *     def mag_sq(self):
 *         """Compute the distance from the vector and the origin."""
 *         return _vec_mag_sq(&self.val)             # <<<<<<<<<<<<<<
 * 
 *     def len_sq(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_8srctools_5_math__vec_mag_sq((&__pyx_v_self->val))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1616
 *         return vec
 * 
 *     def mag_sq(self):             # <<<<<<<<<<<<<<
 *         """Compute the distance from the vector and the origin."""
 *         return _vec_mag_sq(&self.val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.mag_sq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1620
 *         return _vec_mag_sq(&self.val)
 * 
 *     def len_sq(self):             # <<<<<<<<<<<<<<
 *         """Compute the distance from the vector and the origin."""
 *         return _vec_mag_sq(&self.val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_95len_sq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_94len_sq[] = "Vec.len_sq(self)\nCompute the distance from the vector and the origin.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_95len_sq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("len_sq (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_94len_sq(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_94len_sq(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("len_sq", 0);

  /* "srctools/_math.pyx":1622
 *     def len_sq(self):
 *         """Compute the distance from the vector and the origin."""
 *         return _vec_mag_sq(&self.val)             # <<<<<<<<<<<<<<
 * 
 *     def mag(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_8srctools_5_math__vec_mag_sq((&__pyx_v_self->val))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1620
 *         return _vec_mag_sq(&self.val)
 * 
 *     def len_sq(self):             # <<<<<<<<<<<<<<
 *         """Compute the distance from the vector and the origin."""
 *         return _vec_mag_sq(&self.val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.len_sq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1624
 *         return _vec_mag_sq(&self.val)
 * 
 *     def mag(self):             # <<<<<<<<<<<<<<
 *         """Compute the distance from the vector and the origin."""
 *         return _vec_mag(&self.val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_97mag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_96mag[] = "Vec.mag(self)\nCompute the distance from the vector and the origin.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_97mag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mag (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_96mag(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_96mag(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mag", 0);

  /* "srctools/_math.pyx":1626
 *     def mag(self):
 *         """Compute the distance from the vector and the origin."""
 *         return _vec_mag(&self.val)             # <<<<<<<<<<<<<<
 * 
 *     def len(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_8srctools_5_math__vec_mag((&__pyx_v_self->val))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1624
 *         return _vec_mag_sq(&self.val)
 * 
 *     def mag(self):             # <<<<<<<<<<<<<<
 *         """Compute the distance from the vector and the origin."""
 *         return _vec_mag(&self.val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.mag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1628
 *         return _vec_mag(&self.val)
 * 
 *     def len(self):             # <<<<<<<<<<<<<<
 *         """Compute the distance from the vector and the origin."""
 *         return _vec_mag(&self.val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_99len(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_98len[] = "Vec.len(self)\nCompute the distance from the vector and the origin.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_99len(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("len (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_98len(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_98len(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("len", 0);

  /* "srctools/_math.pyx":1630
 *     def len(self):
 *         """Compute the distance from the vector and the origin."""
 *         return _vec_mag(&self.val)             # <<<<<<<<<<<<<<
 * 
 *     def norm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_8srctools_5_math__vec_mag((&__pyx_v_self->val))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1628
 *         return _vec_mag(&self.val)
 * 
 *     def len(self):             # <<<<<<<<<<<<<<
 *         """Compute the distance from the vector and the origin."""
 *         return _vec_mag(&self.val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.len", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1632
 *         return _vec_mag(&self.val)
 * 
 *     def norm(self):             # <<<<<<<<<<<<<<
 *         """Normalise the Vector.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_101norm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_100norm[] = "Vec.norm(self)\nNormalise the Vector.\n\n         This is done by transforming it to have a magnitude of 1 but the same\n         direction.\n         The vector is left unchanged if it is equal to (0,0,0).\n         ";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_101norm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("norm (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_100norm(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_100norm(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("norm", 0);

  /* "srctools/_math.pyx":1639
 *          The vector is left unchanged if it is equal to (0,0,0).
 *          """
 *         cdef Vec vec = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         _vec_normalise(&vec.val, &self.val)
 *         return vec
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1639, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1640
 *          """
 *         cdef Vec vec = Vec.__new__(Vec)
 *         _vec_normalise(&vec.val, &self.val)             # <<<<<<<<<<<<<<
 *         return vec
 * 
 */
  __pyx_f_8srctools_5_math__vec_normalise((&__pyx_v_vec->val), (&__pyx_v_self->val));

  /* "srctools/_math.pyx":1641
 *         cdef Vec vec = Vec.__new__(Vec)
 *         _vec_normalise(&vec.val, &self.val)
 *         return vec             # <<<<<<<<<<<<<<
 * 
 *     def norm_mask(self, normal: 'Vec') -> 'Vec':
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __pyx_r = ((PyObject *)__pyx_v_vec);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1632
 *         return _vec_mag(&self.val)
 * 
 *     def norm(self):             # <<<<<<<<<<<<<<
 *         """Normalise the Vector.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Vec.norm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1643
 *         return vec
 * 
 *     def norm_mask(self, normal: 'Vec') -> 'Vec':             # <<<<<<<<<<<<<<
 *         """Subtract the components of this vector not in the direction of the normal.
 * 
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pw_8srctools_5_math_3Vec_103norm_mask(PyObject *__pyx_v_self, PyObject *__pyx_v_normal); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_102norm_mask[] = "Vec.norm_mask(self, Vec normal: u'Vec') -> u'Vec'\nSubtract the components of this vector not in the direction of the normal.\n\n        If the normal is axis-aligned, this will zero out the other axes.\n        If not axis-aligned, it will do the equivalent.\n        ";
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pw_8srctools_5_math_3Vec_103norm_mask(PyObject *__pyx_v_self, PyObject *__pyx_v_normal) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("norm_mask (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normal), __pyx_ptype_8srctools_5_math_Vec, 1, "normal", 0))) __PYX_ERR(0, 1643, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_102norm_mask(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_normal));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pf_8srctools_5_math_3Vec_102norm_mask(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_normal) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_norm;
  double __pyx_v_dot;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned char __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("norm_mask", 0);

  /* "srctools/_math.pyx":1651
 *         cdef vec_t norm
 * 
 *         conv_vec(&norm, normal, False)             # <<<<<<<<<<<<<<
 * 
 *         _vec_normalise(&norm, &norm)
 */
  __pyx_t_1 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_norm), ((PyObject *)__pyx_v_normal), 0); if (unlikely(__pyx_t_1 == ((unsigned char)0))) __PYX_ERR(0, 1651, __pyx_L1_error)

  /* "srctools/_math.pyx":1653
 *         conv_vec(&norm, normal, False)
 * 
 *         _vec_normalise(&norm, &norm)             # <<<<<<<<<<<<<<
 * 
 *         cdef double dot = (
 */
  __pyx_f_8srctools_5_math__vec_normalise((&__pyx_v_norm), (&__pyx_v_norm));

  /* "srctools/_math.pyx":1657
 *         cdef double dot = (
 *             self.val.x * norm.x +
 *             self.val.y * norm.y +             # <<<<<<<<<<<<<<
 *             self.val.z * norm.z
 *         )
 */
  __pyx_v_dot = (((__pyx_v_self->val.x * __pyx_v_norm.x) + (__pyx_v_self->val.y * __pyx_v_norm.y)) + (__pyx_v_self->val.z * __pyx_v_norm.z));

  /* "srctools/_math.pyx":1661
 *         )
 * 
 *         return _vector(             # <<<<<<<<<<<<<<
 *             norm.x * dot,
 *             norm.y * dot,
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));

  /* "srctools/_math.pyx":1664
 *             norm.x * dot,
 *             norm.y * dot,
 *             norm.z * dot,             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_8srctools_5_math__vector((__pyx_v_norm.x * __pyx_v_dot), (__pyx_v_norm.y * __pyx_v_dot), (__pyx_v_norm.z * __pyx_v_dot))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1643
 *         return vec
 * 
 *     def norm_mask(self, normal: 'Vec') -> 'Vec':             # <<<<<<<<<<<<<<
 *         """Subtract the components of this vector not in the direction of the normal.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srctools._math.Vec.norm_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1667
 *         )
 * 
 *     def dot(self, other) -> float:             # <<<<<<<<<<<<<<
 *         """Return the dot product of both Vectors."""
 *         cdef vec_t oth
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_105dot(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_104dot[] = "Vec.dot(self, other) -> float\nReturn the dot product of both Vectors.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_105dot(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_104dot(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_104dot(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_oth;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned char __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "srctools/_math.pyx":1671
 *         cdef vec_t oth
 * 
 *         conv_vec(&oth, other, False)             # <<<<<<<<<<<<<<
 * 
 *         return (
 */
  __pyx_t_1 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_oth), __pyx_v_other, 0); if (unlikely(__pyx_t_1 == ((unsigned char)0))) __PYX_ERR(0, 1671, __pyx_L1_error)

  /* "srctools/_math.pyx":1673
 *         conv_vec(&oth, other, False)
 * 
 *         return (             # <<<<<<<<<<<<<<
 *             self.val.x * oth.x +
 *             self.val.y * oth.y +
 */
  __Pyx_XDECREF(__pyx_r);

  /* "srctools/_math.pyx":1675
 *         return (
 *             self.val.x * oth.x +
 *             self.val.y * oth.y +             # <<<<<<<<<<<<<<
 *             self.val.z * oth.z
 *         )
 */
  __pyx_t_2 = PyFloat_FromDouble((((__pyx_v_self->val.x * __pyx_v_oth.x) + (__pyx_v_self->val.y * __pyx_v_oth.y)) + (__pyx_v_self->val.z * __pyx_v_oth.z))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1667
 *         )
 * 
 *     def dot(self, other) -> float:             # <<<<<<<<<<<<<<
 *         """Return the dot product of both Vectors."""
 *         cdef vec_t oth
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srctools._math.Vec.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1679
 *         )
 * 
 *     def cross(self, other) -> 'Vec':             # <<<<<<<<<<<<<<
 *         """Return the cross product of both Vectors."""
 *         cdef vec_t oth
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pw_8srctools_5_math_3Vec_107cross(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_106cross[] = "Vec.cross(self, other) -> u'Vec'\nReturn the cross product of both Vectors.";
static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pw_8srctools_5_math_3Vec_107cross(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cross (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_106cross(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Vec *__pyx_pf_8srctools_5_math_3Vec_106cross(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_oth;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_res = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned char __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cross", 0);

  /* "srctools/_math.pyx":1684
 *         cdef Vec res
 * 
 *         conv_vec(&oth, other, False)             # <<<<<<<<<<<<<<
 *         res = Vec.__new__(Vec)
 *         _vec_cross(&res.val, &self.val, &oth)
 */
  __pyx_t_1 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_oth), __pyx_v_other, 0); if (unlikely(__pyx_t_1 == ((unsigned char)0))) __PYX_ERR(0, 1684, __pyx_L1_error)

  /* "srctools/_math.pyx":1685
 * 
 *         conv_vec(&oth, other, False)
 *         res = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *         _vec_cross(&res.val, &self.val, &oth)
 *         return res
 */
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1685, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_v_res = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "srctools/_math.pyx":1686
 *         conv_vec(&oth, other, False)
 *         res = Vec.__new__(Vec)
 *         _vec_cross(&res.val, &self.val, &oth)             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  __pyx_f_8srctools_5_math__vec_cross((&__pyx_v_res->val), (&__pyx_v_self->val), (&__pyx_v_oth));

  /* "srctools/_math.pyx":1687
 *         res = Vec.__new__(Vec)
 *         _vec_cross(&res.val, &self.val, &oth)
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def localise(self, object origin, object angles=None) -> None:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1679
 *         )
 * 
 *     def cross(self, other) -> 'Vec':             # <<<<<<<<<<<<<<
 *         """Return the cross product of both Vectors."""
 *         cdef vec_t oth
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srctools._math.Vec.cross", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1689
 *         return res
 * 
 *     def localise(self, object origin, object angles=None) -> None:             # <<<<<<<<<<<<<<
 *         """Shift this point to be local to the given position and angles.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_109localise(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_108localise[] = "Vec.localise(self, origin, angles=None) -> None\nShift this point to be local to the given position and angles.\n\n        This effectively translates local-space offsets to a global location,\n        given the parent's origin and angles.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_109localise(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_origin = 0;
  PyObject *__pyx_v_angles = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("localise (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_origin,&__pyx_n_s_angles,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_origin)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angles);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "localise") < 0)) __PYX_ERR(0, 1689, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_origin = values[0];
    __pyx_v_angles = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("localise", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1689, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.localise", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_108localise(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), __pyx_v_origin, __pyx_v_angles);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_108localise(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_origin, PyObject *__pyx_v_angles) {
  __pyx_t_8srctools_5_math_mat_t __pyx_v_matrix;
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_offset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  unsigned char __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("localise", 0);

  /* "srctools/_math.pyx":1697
 *         cdef mat_t matrix
 *         cdef vec_t offset
 *         _conv_matrix(matrix, angles)             # <<<<<<<<<<<<<<
 *         conv_vec(&offset, origin, scalar=False)
 *         vec_rot(&self.val, matrix)
 */
  __pyx_t_1 = __pyx_f_8srctools_5_math__conv_matrix(__pyx_v_matrix, __pyx_v_angles); if (unlikely(__pyx_t_1 == ((int)1))) __PYX_ERR(0, 1697, __pyx_L1_error)

  /* "srctools/_math.pyx":1698
 *         cdef vec_t offset
 *         _conv_matrix(matrix, angles)
 *         conv_vec(&offset, origin, scalar=False)             # <<<<<<<<<<<<<<
 *         vec_rot(&self.val, matrix)
 *         self.val.x += offset.x
 */
  __pyx_t_2 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_offset), __pyx_v_origin, 0); if (unlikely(__pyx_t_2 == ((unsigned char)0))) __PYX_ERR(0, 1698, __pyx_L1_error)

  /* "srctools/_math.pyx":1699
 *         _conv_matrix(matrix, angles)
 *         conv_vec(&offset, origin, scalar=False)
 *         vec_rot(&self.val, matrix)             # <<<<<<<<<<<<<<
 *         self.val.x += offset.x
 *         self.val.y += offset.y
 */
  __pyx_f_8srctools_5_math_vec_rot((&__pyx_v_self->val), __pyx_v_matrix);

  /* "srctools/_math.pyx":1700
 *         conv_vec(&offset, origin, scalar=False)
 *         vec_rot(&self.val, matrix)
 *         self.val.x += offset.x             # <<<<<<<<<<<<<<
 *         self.val.y += offset.y
 *         self.val.z += offset.z
 */
  __pyx_v_self->val.x = (__pyx_v_self->val.x + __pyx_v_offset.x);

  /* "srctools/_math.pyx":1701
 *         vec_rot(&self.val, matrix)
 *         self.val.x += offset.x
 *         self.val.y += offset.y             # <<<<<<<<<<<<<<
 *         self.val.z += offset.z
 * 
 */
  __pyx_v_self->val.y = (__pyx_v_self->val.y + __pyx_v_offset.y);

  /* "srctools/_math.pyx":1702
 *         self.val.x += offset.x
 *         self.val.y += offset.y
 *         self.val.z += offset.z             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->val.z = (__pyx_v_self->val.z + __pyx_v_offset.z);

  /* "srctools/_math.pyx":1689
 *         return res
 * 
 *     def localise(self, object origin, object angles=None) -> None:             # <<<<<<<<<<<<<<
 *         """Shift this point to be local to the given position and angles.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("srctools._math.Vec.localise", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1705
 * 
 * 
 *     def join(self, delim: str=', ') -> str:             # <<<<<<<<<<<<<<
 *         """Return a string with all numbers joined by the passed delimiter.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_111join(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_110join[] = "Vec.join(self, unicode delim: str = u', ') -> str\nReturn a string with all numbers joined by the passed delimiter.\n\n        This strips off the .0 if no decimal portion exists.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_111join(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_delim = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("join (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_delim,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)__pyx_kp_u__8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delim);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "join") < 0)) __PYX_ERR(0, 1705, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_delim = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("join", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1705, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_delim), (&PyUnicode_Type), 1, "delim", 1))) __PYX_ERR(0, 1705, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_110join(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), __pyx_v_delim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_110join(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_delim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("join", 0);

  /* "srctools/_math.pyx":1711
 *         """
 *         # :g strips the .0 off of floats if it's an integer.
 *         return f'{self.val.x:g}{delim}{self.val.y:g}{delim}{self.val.z:g}'             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_delim); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_5, __pyx_n_u_g); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_delim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1705
 * 
 * 
 *     def join(self, delim: str=', ') -> str:             # <<<<<<<<<<<<<<
 *         """Return a string with all numbers joined by the passed delimiter.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("srctools._math.Vec.join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1713
 *         return f'{self.val.x:g}{delim}{self.val.y:g}{delim}{self.val.z:g}'
 * 
 *     def __str__(self) -> str:             # <<<<<<<<<<<<<<
 *         """Return the values, separated by spaces.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_113__str__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_112__str__[] = "Return the values, separated by spaces.\n\n        This is the main format in Valve's file formats.\n        This strips off the .0 if no decimal portion exists.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_112__str__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_113__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_112__str__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_112__str__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "srctools/_math.pyx":1719
 *         This strips off the .0 if no decimal portion exists.
 *         """
 *         return f"{self.val.x:g} {self.val.y:g} {self.val.z:g}"             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u__14);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_5, __pyx_n_u_g); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u__14);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1713
 *         return f'{self.val.x:g}{delim}{self.val.y:g}{delim}{self.val.z:g}'
 * 
 *     def __str__(self) -> str:             # <<<<<<<<<<<<<<
 *         """Return the values, separated by spaces.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("srctools._math.Vec.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1721
 *         return f"{self.val.x:g} {self.val.y:g} {self.val.z:g}"
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         """Code required to reproduce this vector."""
 *         return f"Vec({self.val.x:g}, {self.val.y:g}, {self.val.z:g})"
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_115__repr__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_114__repr__[] = "Code required to reproduce this vector.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_114__repr__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_115__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_114__repr__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_114__repr__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "srctools/_math.pyx":1723
 *     def __repr__(self) -> str:
 *         """Code required to reproduce this vector."""
 *         return f"Vec({self.val.x:g}, {self.val.y:g}, {self.val.z:g})"             # <<<<<<<<<<<<<<
 * 
 *     def __format__(self, format_spec: str) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Vec);
  __pyx_t_2 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_Vec);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Vec);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__8);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__8);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__8);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_5, __pyx_n_u_g); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__8);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__8);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__8);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__15);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__15);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__15);
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1721
 *         return f"{self.val.x:g} {self.val.y:g} {self.val.z:g}"
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         """Code required to reproduce this vector."""
 *         return f"Vec({self.val.x:g}, {self.val.y:g}, {self.val.z:g})"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("srctools._math.Vec.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1725
 *         return f"Vec({self.val.x:g}, {self.val.y:g}, {self.val.z:g})"
 * 
 *     def __format__(self, format_spec: str) -> str:             # <<<<<<<<<<<<<<
 *         """Control how the text is formatted."""
 *         if not format_spec:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_117__format__(PyObject *__pyx_v_self, PyObject *__pyx_v_format_spec); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_116__format__[] = "Vec.__format__(self, unicode format_spec: str) -> str\nControl how the text is formatted.";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_117__format__(PyObject *__pyx_v_self, PyObject *__pyx_v_format_spec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__format__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format_spec), (&PyUnicode_Type), 1, "format_spec", 1))) __PYX_ERR(0, 1725, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_116__format__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject*)__pyx_v_format_spec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_116__format__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_format_spec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__format__", 0);
  __Pyx_INCREF(__pyx_v_format_spec);

  /* "srctools/_math.pyx":1727
 *     def __format__(self, format_spec: str) -> str:
 *         """Control how the text is formatted."""
 *         if not format_spec:             # <<<<<<<<<<<<<<
 *             format_spec = 'g'
 *         return f"{self.x:{format_spec}} {self.y:{format_spec}} {self.z:{format_spec}}"
 */
  __pyx_t_1 = (__pyx_v_format_spec != Py_None)&&(__Pyx_PyUnicode_IS_TRUE(__pyx_v_format_spec) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1728
 *         """Control how the text is formatted."""
 *         if not format_spec:
 *             format_spec = 'g'             # <<<<<<<<<<<<<<
 *         return f"{self.x:{format_spec}} {self.y:{format_spec}} {self.z:{format_spec}}"
 * 
 */
    __Pyx_INCREF(__pyx_n_u_g);
    __Pyx_DECREF_SET(__pyx_v_format_spec, __pyx_n_u_g);

    /* "srctools/_math.pyx":1727
 *     def __format__(self, format_spec: str) -> str:
 *         """Control how the text is formatted."""
 *         if not format_spec:             # <<<<<<<<<<<<<<
 *             format_spec = 'g'
 *         return f"{self.x:{format_spec}} {self.y:{format_spec}} {self.z:{format_spec}}"
 */
  }

  /* "srctools/_math.pyx":1729
 *         if not format_spec:
 *             format_spec = 'g'
 *         return f"{self.x:{format_spec}} {self.y:{format_spec}} {self.z:{format_spec}}"             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self) -> VecIter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_format_spec); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_Format(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_4 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_kp_u__14);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_y); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_format_spec); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_Format(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_4 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_kp_u__14);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_z); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_format_spec); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_Format(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1725
 *         return f"Vec({self.val.x:g}, {self.val.y:g}, {self.val.z:g})"
 * 
 *     def __format__(self, format_spec: str) -> str:             # <<<<<<<<<<<<<<
 *         """Control how the text is formatted."""
 *         if not format_spec:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srctools._math.Vec.__format__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format_spec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1731
 *         return f"{self.x:{format_spec}} {self.y:{format_spec}} {self.z:{format_spec}}"
 * 
 *     def __iter__(self) -> VecIter:             # <<<<<<<<<<<<<<
 *         return VecIter.__new__(VecIter, self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_119__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_3Vec_119__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_118__iter__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_118__iter__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "srctools/_math.pyx":1732
 * 
 *     def __iter__(self) -> VecIter:
 *         return VecIter.__new__(VecIter, self)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, ind_obj) -> float:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_8srctools_5_math_VecIter(((PyTypeObject *)__pyx_ptype_8srctools_5_math_VecIter), __pyx_t_1, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1732, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1731
 *         return f"{self.x:{format_spec}} {self.y:{format_spec}} {self.z:{format_spec}}"
 * 
 *     def __iter__(self) -> VecIter:             # <<<<<<<<<<<<<<
 *         return VecIter.__new__(VecIter, self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srctools._math.Vec.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1734
 *         return VecIter.__new__(VecIter, self)
 * 
 *     def __getitem__(self, ind_obj) -> float:             # <<<<<<<<<<<<<<
 *         """Allow reading values by index instead of name if desired.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_121__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_ind_obj); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_120__getitem__[] = "Allow reading values by index instead of name if desired.\n\n        This accepts either 0,1,2 or 'x','y','z' to read values.\n        Useful in conjunction with a loop to apply commands to all values.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_120__getitem__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_3Vec_121__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_ind_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_120__getitem__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_ind_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_120__getitem__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_ind_obj) {
  int __pyx_v_ind;
  Py_UCS4 __pyx_v_chr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  Py_UCS4 __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "srctools/_math.pyx":1742
 *         cdef int ind
 *         cdef Py_UCS4 chr
 *         if isinstance(ind_obj, int):             # <<<<<<<<<<<<<<
 *             try:
 *                 ind = ind_obj
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_ind_obj); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1743
 *         cdef Py_UCS4 chr
 *         if isinstance(ind_obj, int):
 *             try:             # <<<<<<<<<<<<<<
 *                 ind = ind_obj
 *             except (TypeError, ValueError, OverflowError):
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "srctools/_math.pyx":1744
 *         if isinstance(ind_obj, int):
 *             try:
 *                 ind = ind_obj             # <<<<<<<<<<<<<<
 *             except (TypeError, ValueError, OverflowError):
 *                 pass
 */
        __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_ind_obj); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1744, __pyx_L4_error)
        __pyx_v_ind = __pyx_t_6;

        /* "srctools/_math.pyx":1743
 *         cdef Py_UCS4 chr
 *         if isinstance(ind_obj, int):
 *             try:             # <<<<<<<<<<<<<<
 *                 ind = ind_obj
 *             except (TypeError, ValueError, OverflowError):
 */
      }

      /* "srctools/_math.pyx":1748
 *                 pass
 *             else:
 *                 if ind == 0:             # <<<<<<<<<<<<<<
 *                     return self.val.x
 *                 elif ind == 1:
 */
      /*else:*/ {

        /* "srctools/_math.pyx":1752
 *                 elif ind == 1:
 *                     return self.val.y
 *                 elif ind == 2:             # <<<<<<<<<<<<<<
 *                     return self.val.z
 *             raise KeyError(f'Invalid axis: {ind!r}' '!')
 */
        switch (__pyx_v_ind) {
          case 0:

          /* "srctools/_math.pyx":1749
 *             else:
 *                 if ind == 0:
 *                     return self.val.x             # <<<<<<<<<<<<<<
 *                 elif ind == 1:
 *                     return self.val.y
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1749, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_r = __pyx_t_7;
          __pyx_t_7 = 0;
          goto __pyx_L7_except_return;

          /* "srctools/_math.pyx":1748
 *                 pass
 *             else:
 *                 if ind == 0:             # <<<<<<<<<<<<<<
 *                     return self.val.x
 *                 elif ind == 1:
 */
          break;
          case 1:

          /* "srctools/_math.pyx":1751
 *                     return self.val.x
 *                 elif ind == 1:
 *                     return self.val.y             # <<<<<<<<<<<<<<
 *                 elif ind == 2:
 *                     return self.val.z
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1751, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_r = __pyx_t_7;
          __pyx_t_7 = 0;
          goto __pyx_L7_except_return;

          /* "srctools/_math.pyx":1750
 *                 if ind == 0:
 *                     return self.val.x
 *                 elif ind == 1:             # <<<<<<<<<<<<<<
 *                     return self.val.y
 *                 elif ind == 2:
 */
          break;
          case 2:

          /* "srctools/_math.pyx":1753
 *                     return self.val.y
 *                 elif ind == 2:
 *                     return self.val.z             # <<<<<<<<<<<<<<
 *             raise KeyError(f'Invalid axis: {ind!r}' '!')
 *         else:
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1753, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_r = __pyx_t_7;
          __pyx_t_7 = 0;
          goto __pyx_L7_except_return;

          /* "srctools/_math.pyx":1752
 *                 elif ind == 1:
 *                     return self.val.y
 *                 elif ind == 2:             # <<<<<<<<<<<<<<
 *                     return self.val.z
 *             raise KeyError(f'Invalid axis: {ind!r}' '!')
 */
          break;
          default: break;
        }
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "srctools/_math.pyx":1745
 *             try:
 *                 ind = ind_obj
 *             except (TypeError, ValueError, OverflowError):             # <<<<<<<<<<<<<<
 *                 pass
 *             else:
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OverflowError);
      if (__pyx_t_6) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "srctools/_math.pyx":1743
 *         cdef Py_UCS4 chr
 *         if isinstance(ind_obj, int):
 *             try:             # <<<<<<<<<<<<<<
 *                 ind = ind_obj
 *             except (TypeError, ValueError, OverflowError):
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      __pyx_L9_try_end:;
    }

    /* "srctools/_math.pyx":1754
 *                 elif ind == 2:
 *                     return self.val.z
 *             raise KeyError(f'Invalid axis: {ind!r}' '!')             # <<<<<<<<<<<<<<
 *         else:
 *             if isinstance(ind_obj, str) and len(<str>ind_obj) == 1:
 */
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = 0;
    __pyx_t_9 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_axis_2);
    __pyx_t_8 += 14;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_axis_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_Invalid_axis_2);
    __pyx_t_10 = __Pyx_PyUnicode_From_int(__pyx_v_ind, 0, ' ', 'd'); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_INCREF(__pyx_kp_u__4);
    __pyx_t_8 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__4);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u__4);
    __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_7, 3, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 1754, __pyx_L1_error)

    /* "srctools/_math.pyx":1742
 *         cdef int ind
 *         cdef Py_UCS4 chr
 *         if isinstance(ind_obj, int):             # <<<<<<<<<<<<<<
 *             try:
 *                 ind = ind_obj
 */
  }

  /* "srctools/_math.pyx":1756
 *             raise KeyError(f'Invalid axis: {ind!r}' '!')
 *         else:
 *             if isinstance(ind_obj, str) and len(<str>ind_obj) == 1:             # <<<<<<<<<<<<<<
 *                 chr = (<str>ind_obj)[0]
 *             else:
 */
  /*else*/ {
    __pyx_t_1 = PyUnicode_Check(__pyx_v_ind_obj); 
    __pyx_t_11 = (__pyx_t_1 != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_2 = __pyx_t_11;
      goto __pyx_L11_bool_binop_done;
    }
    if (unlikely(__pyx_v_ind_obj == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1756, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyUnicode_GET_LENGTH(((PyObject*)__pyx_v_ind_obj)); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1756, __pyx_L1_error)
    __pyx_t_11 = ((__pyx_t_8 == 1) != 0);
    __pyx_t_2 = __pyx_t_11;
    __pyx_L11_bool_binop_done:;
    if (likely(__pyx_t_2)) {

      /* "srctools/_math.pyx":1757
 *         else:
 *             if isinstance(ind_obj, str) and len(<str>ind_obj) == 1:
 *                 chr = (<str>ind_obj)[0]             # <<<<<<<<<<<<<<
 *             else:
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')
 */
      __pyx_t_9 = __Pyx_GetItemInt_Unicode(__pyx_v_ind_obj, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_9 == (Py_UCS4)-1)) __PYX_ERR(0, 1757, __pyx_L1_error)
      __pyx_v_chr = __pyx_t_9;

      /* "srctools/_math.pyx":1756
 *             raise KeyError(f'Invalid axis: {ind!r}' '!')
 *         else:
 *             if isinstance(ind_obj, str) and len(<str>ind_obj) == 1:             # <<<<<<<<<<<<<<
 *                 chr = (<str>ind_obj)[0]
 *             else:
 */
      goto __pyx_L10;
    }

    /* "srctools/_math.pyx":1759
 *                 chr = (<str>ind_obj)[0]
 *             else:
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')             # <<<<<<<<<<<<<<
 * 
 *             if chr == "x":
 */
    /*else*/ {
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = 0;
      __pyx_t_9 = 127;
      __Pyx_INCREF(__pyx_kp_u_Invalid_axis);
      __pyx_t_8 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_axis);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_Invalid_axis);
      __pyx_t_10 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_ind_obj), __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_9;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_INCREF(__pyx_kp_u__4);
      __pyx_t_8 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__4);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u__4);
      __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_7, 3, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 1759, __pyx_L1_error)
    }
    __pyx_L10:;

    /* "srctools/_math.pyx":1761
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')
 * 
 *             if chr == "x":             # <<<<<<<<<<<<<<
 *                 return self.val.x
 *             elif chr == "y":
 */
    switch (__pyx_v_chr) {
      case 0x78:

      /* "srctools/_math.pyx":1762
 * 
 *             if chr == "x":
 *                 return self.val.x             # <<<<<<<<<<<<<<
 *             elif chr == "y":
 *                 return self.val.y
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_r = __pyx_t_7;
      __pyx_t_7 = 0;
      goto __pyx_L0;

      /* "srctools/_math.pyx":1761
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')
 * 
 *             if chr == "x":             # <<<<<<<<<<<<<<
 *                 return self.val.x
 *             elif chr == "y":
 */
      break;
      case 0x79:

      /* "srctools/_math.pyx":1764
 *                 return self.val.x
 *             elif chr == "y":
 *                 return self.val.y             # <<<<<<<<<<<<<<
 *             elif chr == "z":
 *                 return self.val.z
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_r = __pyx_t_7;
      __pyx_t_7 = 0;
      goto __pyx_L0;

      /* "srctools/_math.pyx":1763
 *             if chr == "x":
 *                 return self.val.x
 *             elif chr == "y":             # <<<<<<<<<<<<<<
 *                 return self.val.y
 *             elif chr == "z":
 */
      break;
      case 0x7A:

      /* "srctools/_math.pyx":1766
 *                 return self.val.y
 *             elif chr == "z":
 *                 return self.val.z             # <<<<<<<<<<<<<<
 *             else:
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_r = __pyx_t_7;
      __pyx_t_7 = 0;
      goto __pyx_L0;

      /* "srctools/_math.pyx":1765
 *             elif chr == "y":
 *                 return self.val.y
 *             elif chr == "z":             # <<<<<<<<<<<<<<
 *                 return self.val.z
 *             else:
 */
      break;
      default:

      /* "srctools/_math.pyx":1768
 *                 return self.val.z
 *             else:
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, ind_obj, double val: float) -> None:
 */
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = 0;
      __pyx_t_9 = 127;
      __Pyx_INCREF(__pyx_kp_u_Invalid_axis);
      __pyx_t_8 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_axis);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_Invalid_axis);
      __pyx_t_10 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_ind_obj), __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_9;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_INCREF(__pyx_kp_u__4);
      __pyx_t_8 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__4);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u__4);
      __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_7, 3, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 1768, __pyx_L1_error)
      break;
    }
  }

  /* "srctools/_math.pyx":1734
 *         return VecIter.__new__(VecIter, self)
 * 
 *     def __getitem__(self, ind_obj) -> float:             # <<<<<<<<<<<<<<
 *         """Allow reading values by index instead of name if desired.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("srctools._math.Vec.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1770
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')
 * 
 *     def __setitem__(self, ind_obj, double val: float) -> None:             # <<<<<<<<<<<<<<
 *         """Allow editing values by index instead of name if desired.
 * 
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_3Vec_123__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_ind_obj, PyObject *__pyx_arg_val); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_122__setitem__[] = "Allow editing values by index instead of name if desired.\n\n        This accepts either 0,1,2 or 'x','y','z' to edit values.\n        Useful in conjunction with a loop to apply commands to all values.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_3Vec_122__setitem__;
#endif
static int __pyx_pw_8srctools_5_math_3Vec_123__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_ind_obj, PyObject *__pyx_arg_val) {
  double __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  assert(__pyx_arg_val); {
    __pyx_v_val = __pyx_PyFloat_AsDouble(__pyx_arg_val); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1770, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Vec.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_122__setitem__(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self), ((PyObject *)__pyx_v_ind_obj), ((double)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_3Vec_122__setitem__(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self, PyObject *__pyx_v_ind_obj, double __pyx_v_val) {
  int __pyx_v_ind;
  Py_UCS4 __pyx_v_chr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "srctools/_math.pyx":1778
 *         cdef int ind
 *         cdef Py_UCS4 chr
 *         if isinstance(ind_obj, int):             # <<<<<<<<<<<<<<
 *             try:
 *                 ind = ind_obj
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_ind_obj); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1779
 *         cdef Py_UCS4 chr
 *         if isinstance(ind_obj, int):
 *             try:             # <<<<<<<<<<<<<<
 *                 ind = ind_obj
 *             except (TypeError, ValueError, OverflowError):
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "srctools/_math.pyx":1780
 *         if isinstance(ind_obj, int):
 *             try:
 *                 ind = ind_obj             # <<<<<<<<<<<<<<
 *             except (TypeError, ValueError, OverflowError):
 *                 pass
 */
        __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_ind_obj); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1780, __pyx_L4_error)
        __pyx_v_ind = __pyx_t_6;

        /* "srctools/_math.pyx":1779
 *         cdef Py_UCS4 chr
 *         if isinstance(ind_obj, int):
 *             try:             # <<<<<<<<<<<<<<
 *                 ind = ind_obj
 *             except (TypeError, ValueError, OverflowError):
 */
      }

      /* "srctools/_math.pyx":1784
 *                 pass
 *             else:
 *                 if ind == 0:             # <<<<<<<<<<<<<<
 *                     self.val.x = val
 *                     return
 */
      /*else:*/ {

        /* "srctools/_math.pyx":1790
 *                     self.val.y = val
 *                     return
 *                 elif ind == 2:             # <<<<<<<<<<<<<<
 *                     self.val.z = val
 *                     return
 */
        switch (__pyx_v_ind) {
          case 0:

          /* "srctools/_math.pyx":1785
 *             else:
 *                 if ind == 0:
 *                     self.val.x = val             # <<<<<<<<<<<<<<
 *                     return
 *                 elif ind == 1:
 */
          __pyx_v_self->val.x = __pyx_v_val;

          /* "srctools/_math.pyx":1786
 *                 if ind == 0:
 *                     self.val.x = val
 *                     return             # <<<<<<<<<<<<<<
 *                 elif ind == 1:
 *                     self.val.y = val
 */
          __pyx_r = 0;
          goto __pyx_L7_except_return;

          /* "srctools/_math.pyx":1784
 *                 pass
 *             else:
 *                 if ind == 0:             # <<<<<<<<<<<<<<
 *                     self.val.x = val
 *                     return
 */
          break;
          case 1:

          /* "srctools/_math.pyx":1788
 *                     return
 *                 elif ind == 1:
 *                     self.val.y = val             # <<<<<<<<<<<<<<
 *                     return
 *                 elif ind == 2:
 */
          __pyx_v_self->val.y = __pyx_v_val;

          /* "srctools/_math.pyx":1789
 *                 elif ind == 1:
 *                     self.val.y = val
 *                     return             # <<<<<<<<<<<<<<
 *                 elif ind == 2:
 *                     self.val.z = val
 */
          __pyx_r = 0;
          goto __pyx_L7_except_return;

          /* "srctools/_math.pyx":1787
 *                     self.val.x = val
 *                     return
 *                 elif ind == 1:             # <<<<<<<<<<<<<<
 *                     self.val.y = val
 *                     return
 */
          break;
          case 2:

          /* "srctools/_math.pyx":1791
 *                     return
 *                 elif ind == 2:
 *                     self.val.z = val             # <<<<<<<<<<<<<<
 *                     return
 *             raise KeyError(f'Invalid axis: {ind!r}')
 */
          __pyx_v_self->val.z = __pyx_v_val;

          /* "srctools/_math.pyx":1792
 *                 elif ind == 2:
 *                     self.val.z = val
 *                     return             # <<<<<<<<<<<<<<
 *             raise KeyError(f'Invalid axis: {ind!r}')
 *         else:
 */
          __pyx_r = 0;
          goto __pyx_L7_except_return;

          /* "srctools/_math.pyx":1790
 *                     self.val.y = val
 *                     return
 *                 elif ind == 2:             # <<<<<<<<<<<<<<
 *                     self.val.z = val
 *                     return
 */
          break;
          default: break;
        }
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;

      /* "srctools/_math.pyx":1781
 *             try:
 *                 ind = ind_obj
 *             except (TypeError, ValueError, OverflowError):             # <<<<<<<<<<<<<<
 *                 pass
 *             else:
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OverflowError);
      if (__pyx_t_6) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "srctools/_math.pyx":1779
 *         cdef Py_UCS4 chr
 *         if isinstance(ind_obj, int):
 *             try:             # <<<<<<<<<<<<<<
 *                 ind = ind_obj
 *             except (TypeError, ValueError, OverflowError):
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      __pyx_L9_try_end:;
    }

    /* "srctools/_math.pyx":1793
 *                     self.val.z = val
 *                     return
 *             raise KeyError(f'Invalid axis: {ind!r}')             # <<<<<<<<<<<<<<
 *         else:
 *             if isinstance(ind_obj, str) and len(<str>ind_obj) == 1:
 */
    __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_ind, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Invalid_axis_2, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 1793, __pyx_L1_error)

    /* "srctools/_math.pyx":1778
 *         cdef int ind
 *         cdef Py_UCS4 chr
 *         if isinstance(ind_obj, int):             # <<<<<<<<<<<<<<
 *             try:
 *                 ind = ind_obj
 */
  }

  /* "srctools/_math.pyx":1795
 *             raise KeyError(f'Invalid axis: {ind!r}')
 *         else:
 *             if isinstance(ind_obj, str) and len(<str>ind_obj) == 1:             # <<<<<<<<<<<<<<
 *                 chr = (<str>ind_obj)[0]
 *             else:
 */
  /*else*/ {
    __pyx_t_1 = PyUnicode_Check(__pyx_v_ind_obj); 
    __pyx_t_9 = (__pyx_t_1 != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_2 = __pyx_t_9;
      goto __pyx_L11_bool_binop_done;
    }
    if (unlikely(__pyx_v_ind_obj == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1795, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_PyUnicode_GET_LENGTH(((PyObject*)__pyx_v_ind_obj)); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1795, __pyx_L1_error)
    __pyx_t_9 = ((__pyx_t_10 == 1) != 0);
    __pyx_t_2 = __pyx_t_9;
    __pyx_L11_bool_binop_done:;
    if (likely(__pyx_t_2)) {

      /* "srctools/_math.pyx":1796
 *         else:
 *             if isinstance(ind_obj, str) and len(<str>ind_obj) == 1:
 *                 chr = (<str>ind_obj)[0]             # <<<<<<<<<<<<<<
 *             else:
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')
 */
      __pyx_t_11 = __Pyx_GetItemInt_Unicode(__pyx_v_ind_obj, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_11 == (Py_UCS4)-1)) __PYX_ERR(0, 1796, __pyx_L1_error)
      __pyx_v_chr = __pyx_t_11;

      /* "srctools/_math.pyx":1795
 *             raise KeyError(f'Invalid axis: {ind!r}')
 *         else:
 *             if isinstance(ind_obj, str) and len(<str>ind_obj) == 1:             # <<<<<<<<<<<<<<
 *                 chr = (<str>ind_obj)[0]
 *             else:
 */
      goto __pyx_L10;
    }

    /* "srctools/_math.pyx":1798
 *                 chr = (<str>ind_obj)[0]
 *             else:
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')             # <<<<<<<<<<<<<<
 * 
 *             if chr == "x":
 */
    /*else*/ {
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1798, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_Invalid_axis);
      __pyx_t_10 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_axis);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_Invalid_axis);
      __pyx_t_8 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_ind_obj), __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1798, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_INCREF(__pyx_kp_u__4);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__4);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u__4);
      __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_7, 3, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1798, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1798, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 1798, __pyx_L1_error)
    }
    __pyx_L10:;

    /* "srctools/_math.pyx":1800
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')
 * 
 *             if chr == "x":             # <<<<<<<<<<<<<<
 *                 self.val.x = val
 *             elif chr == "y":
 */
    switch (__pyx_v_chr) {
      case 0x78:

      /* "srctools/_math.pyx":1801
 * 
 *             if chr == "x":
 *                 self.val.x = val             # <<<<<<<<<<<<<<
 *             elif chr == "y":
 *                 self.val.y = val
 */
      __pyx_v_self->val.x = __pyx_v_val;

      /* "srctools/_math.pyx":1800
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')
 * 
 *             if chr == "x":             # <<<<<<<<<<<<<<
 *                 self.val.x = val
 *             elif chr == "y":
 */
      break;
      case 0x79:

      /* "srctools/_math.pyx":1803
 *                 self.val.x = val
 *             elif chr == "y":
 *                 self.val.y = val             # <<<<<<<<<<<<<<
 *             elif chr == "z":
 *                 self.val.z = val
 */
      __pyx_v_self->val.y = __pyx_v_val;

      /* "srctools/_math.pyx":1802
 *             if chr == "x":
 *                 self.val.x = val
 *             elif chr == "y":             # <<<<<<<<<<<<<<
 *                 self.val.y = val
 *             elif chr == "z":
 */
      break;
      case 0x7A:

      /* "srctools/_math.pyx":1805
 *                 self.val.y = val
 *             elif chr == "z":
 *                 self.val.z = val             # <<<<<<<<<<<<<<
 *             else:
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')
 */
      __pyx_v_self->val.z = __pyx_v_val;

      /* "srctools/_math.pyx":1804
 *             elif chr == "y":
 *                 self.val.y = val
 *             elif chr == "z":             # <<<<<<<<<<<<<<
 *                 self.val.z = val
 *             else:
 */
      break;
      default:

      /* "srctools/_math.pyx":1807
 *                 self.val.z = val
 *             else:
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')             # <<<<<<<<<<<<<<
 * 
 *     def transform(self):
 */
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_Invalid_axis);
      __pyx_t_10 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_axis);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_Invalid_axis);
      __pyx_t_8 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_ind_obj), __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_INCREF(__pyx_kp_u__4);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__4);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u__4);
      __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_7, 3, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 1807, __pyx_L1_error)
      break;
    }
  }

  /* "srctools/_math.pyx":1770
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')
 * 
 *     def __setitem__(self, ind_obj, double val: float) -> None:             # <<<<<<<<<<<<<<
 *         """Allow editing values by index instead of name if desired.
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srctools._math.Vec.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1809
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')
 * 
 *     def transform(self):             # <<<<<<<<<<<<<<
 *         """Perform rotations on this Vector efficiently.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_3Vec_125transform(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_3Vec_124transform[] = "Vec.transform(self)\nPerform rotations on this Vector efficiently.\n\n        Used as a context manager, which returns a matrix.\n        When the body is exited safely, the matrix is applied to\n        the angle.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_3Vec_125transform(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_3Vec_124transform(((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_3Vec_124transform(struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform", 0);

  /* "srctools/_math.pyx":1816
 *         the angle.
 *         """
 *         return VecTransform.__new__(VecTransform, self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_8srctools_5_math_VecTransform(((PyTypeObject *)__pyx_ptype_8srctools_5_math_VecTransform), __pyx_t_1, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1816, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1809
 *                 raise KeyError(f'Invalid axis {ind_obj!r}' '!')
 * 
 *     def transform(self):             # <<<<<<<<<<<<<<
 *         """Perform rotations on this Vector efficiently.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srctools._math.Vec.transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1824
 *     """Represents a matrix via a transformation matrix."""
 * 
 *     def __init__(self) -> None:             # <<<<<<<<<<<<<<
 *         """Create a matrix set to the identity transform."""
 *         _mat_identity(self.mat)
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_6Matrix_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix___init__[] = "Create a matrix set to the identity transform.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_6Matrix___init__;
#endif
static int __pyx_pw_8srctools_5_math_6Matrix_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix___init__(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_6Matrix___init__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "srctools/_math.pyx":1826
 *     def __init__(self) -> None:
 *         """Create a matrix set to the identity transform."""
 *         _mat_identity(self.mat)             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other: object) -> object:
 */
  __pyx_f_8srctools_5_math__mat_identity(__pyx_v_self->mat);

  /* "srctools/_math.pyx":1824
 *     """Represents a matrix via a transformation matrix."""
 * 
 *     def __init__(self) -> None:             # <<<<<<<<<<<<<<
 *         """Create a matrix set to the identity transform."""
 *         _mat_identity(self.mat)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1828
 *         _mat_identity(self.mat)
 * 
 *     def __eq__(self, other: object) -> object:             # <<<<<<<<<<<<<<
 *         if isinstance(other, Matrix):
 *             # We can just compare the memory buffers.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_3__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_3__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_2__eq__(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6Matrix_2__eq__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "srctools/_math.pyx":1829
 * 
 *     def __eq__(self, other: object) -> object:
 *         if isinstance(other, Matrix):             # <<<<<<<<<<<<<<
 *             # We can just compare the memory buffers.
 *             return memcmp(self.mat, (<Matrix>other).mat, sizeof(mat_t)) == 0
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8srctools_5_math_Matrix); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1831
 *         if isinstance(other, Matrix):
 *             # We can just compare the memory buffers.
 *             return memcmp(self.mat, (<Matrix>other).mat, sizeof(mat_t)) == 0             # <<<<<<<<<<<<<<
 *         return NotImplemented
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((memcmp(__pyx_v_self->mat, ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_other)->mat, (sizeof(__pyx_t_8srctools_5_math_mat_t))) == 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1829
 * 
 *     def __eq__(self, other: object) -> object:
 *         if isinstance(other, Matrix):             # <<<<<<<<<<<<<<
 *             # We can just compare the memory buffers.
 *             return memcmp(self.mat, (<Matrix>other).mat, sizeof(mat_t)) == 0
 */
  }

  /* "srctools/_math.pyx":1832
 *             # We can just compare the memory buffers.
 *             return memcmp(self.mat, (<Matrix>other).mat, sizeof(mat_t)) == 0
 *         return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     def __ne__(self, other: object) -> object:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_builtin_NotImplemented);
  __pyx_r = __pyx_builtin_NotImplemented;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1828
 *         _mat_identity(self.mat)
 * 
 *     def __eq__(self, other: object) -> object:             # <<<<<<<<<<<<<<
 *         if isinstance(other, Matrix):
 *             # We can just compare the memory buffers.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("srctools._math.Matrix.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1834
 *         return NotImplemented
 * 
 *     def __ne__(self, other: object) -> object:             # <<<<<<<<<<<<<<
 *         if isinstance(other, Matrix):
 *             return memcmp(self.mat, (<Matrix>other).mat, sizeof(mat_t)) != 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_5__ne__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_5__ne__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ne__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_4__ne__(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6Matrix_4__ne__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__ne__", 0);

  /* "srctools/_math.pyx":1835
 * 
 *     def __ne__(self, other: object) -> object:
 *         if isinstance(other, Matrix):             # <<<<<<<<<<<<<<
 *             return memcmp(self.mat, (<Matrix>other).mat, sizeof(mat_t)) != 0
 *         return NotImplemented
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8srctools_5_math_Matrix); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":1836
 *     def __ne__(self, other: object) -> object:
 *         if isinstance(other, Matrix):
 *             return memcmp(self.mat, (<Matrix>other).mat, sizeof(mat_t)) != 0             # <<<<<<<<<<<<<<
 *         return NotImplemented
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((memcmp(__pyx_v_self->mat, ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_other)->mat, (sizeof(__pyx_t_8srctools_5_math_mat_t))) != 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1835
 * 
 *     def __ne__(self, other: object) -> object:
 *         if isinstance(other, Matrix):             # <<<<<<<<<<<<<<
 *             return memcmp(self.mat, (<Matrix>other).mat, sizeof(mat_t)) != 0
 *         return NotImplemented
 */
  }

  /* "srctools/_math.pyx":1837
 *         if isinstance(other, Matrix):
 *             return memcmp(self.mat, (<Matrix>other).mat, sizeof(mat_t)) != 0
 *         return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_builtin_NotImplemented);
  __pyx_r = __pyx_builtin_NotImplemented;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1834
 *         return NotImplemented
 * 
 *     def __ne__(self, other: object) -> object:             # <<<<<<<<<<<<<<
 *         if isinstance(other, Matrix):
 *             return memcmp(self.mat, (<Matrix>other).mat, sizeof(mat_t)) != 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("srctools._math.Matrix.__ne__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1839
 *         return NotImplemented
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         return (
 *             '<Matrix '
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_7__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_7__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_6__repr__(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6Matrix_6__repr__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "srctools/_math.pyx":1840
 * 
 *     def __repr__(self) -> str:
 *         return (             # <<<<<<<<<<<<<<
 *             '<Matrix '
 *             f'{self.mat[0][0]:.3} {self.mat[0][1]:.3} {self.mat[0][2]:.3}, '
 */
  __Pyx_XDECREF(__pyx_r);

  /* "srctools/_math.pyx":1841
 *     def __repr__(self) -> str:
 *         return (
 *             '<Matrix '             # <<<<<<<<<<<<<<
 *             f'{self.mat[0][0]:.3} {self.mat[0][1]:.3} {self.mat[0][2]:.3}, '
 *             f'{self.mat[1][0]:.3} {self.mat[1][1]:.3} {self.mat[1][2]:.3}, '
 */
  __pyx_t_1 = PyTuple_New(19); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Matrix);
  __pyx_t_2 += 8;
  __Pyx_GIVEREF(__pyx_kp_u_Matrix);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Matrix);

  /* "srctools/_math.pyx":1842
 *         return (
 *             '<Matrix '
 *             f'{self.mat[0][0]:.3} {self.mat[0][1]:.3} {self.mat[0][2]:.3}, '             # <<<<<<<<<<<<<<
 *             f'{self.mat[1][0]:.3} {self.mat[1][1]:.3} {self.mat[1][2]:.3}, '
 *             f'{self.mat[2][0]:.3} {self.mat[2][1]:.3} {self.mat[2][2]:.3}'
 */
  __pyx_t_4 = PyFloat_FromDouble(((__pyx_v_self->mat[0])[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_kp_u_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__14);
  __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_self->mat[0])[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_5, __pyx_kp_u_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__14);
  __pyx_t_4 = PyFloat_FromDouble(((__pyx_v_self->mat[0])[2])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_kp_u_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__8);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__8);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__8);

  /* "srctools/_math.pyx":1843
 *             '<Matrix '
 *             f'{self.mat[0][0]:.3} {self.mat[0][1]:.3} {self.mat[0][2]:.3}, '
 *             f'{self.mat[1][0]:.3} {self.mat[1][1]:.3} {self.mat[1][2]:.3}, '             # <<<<<<<<<<<<<<
 *             f'{self.mat[2][0]:.3} {self.mat[2][1]:.3} {self.mat[2][2]:.3}'
 *             '>'
 */
  __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_self->mat[1])[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_5, __pyx_kp_u_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u__14);
  __pyx_t_4 = PyFloat_FromDouble(((__pyx_v_self->mat[1])[1])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_kp_u_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_kp_u__14);
  __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_self->mat[1])[2])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_5, __pyx_kp_u_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 11, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__8);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__8);
  PyTuple_SET_ITEM(__pyx_t_1, 12, __pyx_kp_u__8);

  /* "srctools/_math.pyx":1844
 *             f'{self.mat[0][0]:.3} {self.mat[0][1]:.3} {self.mat[0][2]:.3}, '
 *             f'{self.mat[1][0]:.3} {self.mat[1][1]:.3} {self.mat[1][2]:.3}, '
 *             f'{self.mat[2][0]:.3} {self.mat[2][1]:.3} {self.mat[2][2]:.3}'             # <<<<<<<<<<<<<<
 *             '>'
 *         )
 */
  __pyx_t_4 = PyFloat_FromDouble(((__pyx_v_self->mat[2])[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_kp_u_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 13, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_1, 14, __pyx_kp_u__14);
  __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_self->mat[2])[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_5, __pyx_kp_u_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 15, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_1, 16, __pyx_kp_u__14);
  __pyx_t_4 = PyFloat_FromDouble(((__pyx_v_self->mat[2])[2])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_kp_u_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 17, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__16);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__16);
  PyTuple_SET_ITEM(__pyx_t_1, 18, __pyx_kp_u__16);

  /* "srctools/_math.pyx":1841
 *     def __repr__(self) -> str:
 *         return (
 *             '<Matrix '             # <<<<<<<<<<<<<<
 *             f'{self.mat[0][0]:.3} {self.mat[0][1]:.3} {self.mat[0][2]:.3}, '
 *             f'{self.mat[1][0]:.3} {self.mat[1][1]:.3} {self.mat[1][2]:.3}, '
 */
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 19, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1839
 *         return NotImplemented
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         return (
 *             '<Matrix '
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("srctools._math.Matrix.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1848
 *         )
 * 
 *     def copy(self) -> 'Matrix':             # <<<<<<<<<<<<<<
 *         """Duplicate this matrix."""
 *         cdef Matrix copy = Matrix.__new__(Matrix)
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_6Matrix_9copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_8copy[] = "Matrix.copy(self) -> u'Matrix'\nDuplicate this matrix.";
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_6Matrix_9copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_8copy(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_6Matrix_8copy(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self) {
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_copy = 0;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "srctools/_math.pyx":1850
 *     def copy(self) -> 'Matrix':
 *         """Duplicate this matrix."""
 *         cdef Matrix copy = Matrix.__new__(Matrix)             # <<<<<<<<<<<<<<
 *         memcpy(copy.mat, self.mat, sizeof(mat_t))
 *         return copy
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Matrix(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Matrix), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1850, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_copy = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1851
 *         """Duplicate this matrix."""
 *         cdef Matrix copy = Matrix.__new__(Matrix)
 *         memcpy(copy.mat, self.mat, sizeof(mat_t))             # <<<<<<<<<<<<<<
 *         return copy
 * 
 */
  (void)(memcpy(__pyx_v_copy->mat, __pyx_v_self->mat, (sizeof(__pyx_t_8srctools_5_math_mat_t))));

  /* "srctools/_math.pyx":1852
 *         cdef Matrix copy = Matrix.__new__(Matrix)
 *         memcpy(copy.mat, self.mat, sizeof(mat_t))
 *         return copy             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self) -> 'Matrix':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_copy));
  __pyx_r = __pyx_v_copy;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1848
 *         )
 * 
 *     def copy(self) -> 'Matrix':             # <<<<<<<<<<<<<<
 *         """Duplicate this matrix."""
 *         cdef Matrix copy = Matrix.__new__(Matrix)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Matrix.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_copy);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1854
 *         return copy
 * 
 *     def __copy__(self) -> 'Matrix':             # <<<<<<<<<<<<<<
 *         """Duplicate this matrix."""
 *         cdef Matrix copy = Matrix.__new__(Matrix)
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_6Matrix_11__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_10__copy__[] = "Matrix.__copy__(self) -> u'Matrix'\nDuplicate this matrix.";
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_6Matrix_11__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_10__copy__(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_6Matrix_10__copy__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self) {
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_copy = 0;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "srctools/_math.pyx":1856
 *     def __copy__(self) -> 'Matrix':
 *         """Duplicate this matrix."""
 *         cdef Matrix copy = Matrix.__new__(Matrix)             # <<<<<<<<<<<<<<
 *         memcpy(copy.mat, self.mat, sizeof(mat_t))
 *         return copy
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Matrix(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Matrix), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_copy = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1857
 *         """Duplicate this matrix."""
 *         cdef Matrix copy = Matrix.__new__(Matrix)
 *         memcpy(copy.mat, self.mat, sizeof(mat_t))             # <<<<<<<<<<<<<<
 *         return copy
 * 
 */
  (void)(memcpy(__pyx_v_copy->mat, __pyx_v_self->mat, (sizeof(__pyx_t_8srctools_5_math_mat_t))));

  /* "srctools/_math.pyx":1858
 *         cdef Matrix copy = Matrix.__new__(Matrix)
 *         memcpy(copy.mat, self.mat, sizeof(mat_t))
 *         return copy             # <<<<<<<<<<<<<<
 * 
 *     def __deepcopy__(self, dict memodict=None) -> 'Matrix':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_copy));
  __pyx_r = __pyx_v_copy;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1854
 *         return copy
 * 
 *     def __copy__(self) -> 'Matrix':             # <<<<<<<<<<<<<<
 *         """Duplicate this matrix."""
 *         cdef Matrix copy = Matrix.__new__(Matrix)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Matrix.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_copy);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1860
 *         return copy
 * 
 *     def __deepcopy__(self, dict memodict=None) -> 'Matrix':             # <<<<<<<<<<<<<<
 *         """Duplicate this matrix."""
 *         cdef Matrix copy = Matrix.__new__(Matrix)
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_6Matrix_13__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_12__deepcopy__[] = "Matrix.__deepcopy__(self, dict memodict=None) -> u'Matrix'\nDuplicate this matrix.";
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_6Matrix_13__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_memodict = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_memodict,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_memodict);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__deepcopy__") < 0)) __PYX_ERR(0, 1860, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_memodict = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__deepcopy__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1860, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Matrix.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_memodict), (&PyDict_Type), 1, "memodict", 1))) __PYX_ERR(0, 1860, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_12__deepcopy__(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self), __pyx_v_memodict);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_6Matrix_12__deepcopy__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict) {
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_copy = 0;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__deepcopy__", 0);

  /* "srctools/_math.pyx":1862
 *     def __deepcopy__(self, dict memodict=None) -> 'Matrix':
 *         """Duplicate this matrix."""
 *         cdef Matrix copy = Matrix.__new__(Matrix)             # <<<<<<<<<<<<<<
 *         memcpy(copy.mat, self.mat, sizeof(mat_t))
 *         return copy
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Matrix(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Matrix), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1862, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_copy = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1863
 *         """Duplicate this matrix."""
 *         cdef Matrix copy = Matrix.__new__(Matrix)
 *         memcpy(copy.mat, self.mat, sizeof(mat_t))             # <<<<<<<<<<<<<<
 *         return copy
 * 
 */
  (void)(memcpy(__pyx_v_copy->mat, __pyx_v_self->mat, (sizeof(__pyx_t_8srctools_5_math_mat_t))));

  /* "srctools/_math.pyx":1864
 *         cdef Matrix copy = Matrix.__new__(Matrix)
 *         memcpy(copy.mat, self.mat, sizeof(mat_t))
 *         return copy             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_copy));
  __pyx_r = __pyx_v_copy;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1860
 *         return copy
 * 
 *     def __deepcopy__(self, dict memodict=None) -> 'Matrix':             # <<<<<<<<<<<<<<
 *         """Duplicate this matrix."""
 *         cdef Matrix copy = Matrix.__new__(Matrix)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Matrix.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_copy);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1866
 *         return copy
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return unpickle_mat, (
 *             self.mat[0][0], self.mat[0][1], self.mat[0][2],
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_15__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_14__reduce__[] = "Matrix.__reduce__(self)";
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_15__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_14__reduce__(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6Matrix_14__reduce__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "srctools/_math.pyx":1867
 * 
 *     def __reduce__(self):
 *         return unpickle_mat, (             # <<<<<<<<<<<<<<
 *             self.mat[0][0], self.mat[0][1], self.mat[0][2],
 *             self.mat[1][0], self.mat[1][1], self.mat[1][2],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "srctools/_math.pyx":1868
 *     def __reduce__(self):
 *         return unpickle_mat, (
 *             self.mat[0][0], self.mat[0][1], self.mat[0][2],             # <<<<<<<<<<<<<<
 *             self.mat[1][0], self.mat[1][1], self.mat[1][2],
 *             self.mat[2][0], self.mat[2][1], self.mat[2][2],
 */
  __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->mat[0])[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(((__pyx_v_self->mat[0])[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_self->mat[0])[2])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "srctools/_math.pyx":1869
 *         return unpickle_mat, (
 *             self.mat[0][0], self.mat[0][1], self.mat[0][2],
 *             self.mat[1][0], self.mat[1][1], self.mat[1][2],             # <<<<<<<<<<<<<<
 *             self.mat[2][0], self.mat[2][1], self.mat[2][2],
 *         )
 */
  __pyx_t_4 = PyFloat_FromDouble(((__pyx_v_self->mat[1])[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_self->mat[1])[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(((__pyx_v_self->mat[1])[2])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "srctools/_math.pyx":1870
 *             self.mat[0][0], self.mat[0][1], self.mat[0][2],
 *             self.mat[1][0], self.mat[1][1], self.mat[1][2],
 *             self.mat[2][0], self.mat[2][1], self.mat[2][2],             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_self->mat[2])[0])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(((__pyx_v_self->mat[2])[1])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_self->mat[2])[2])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "srctools/_math.pyx":1868
 *     def __reduce__(self):
 *         return unpickle_mat, (
 *             self.mat[0][0], self.mat[0][1], self.mat[0][2],             # <<<<<<<<<<<<<<
 *             self.mat[1][0], self.mat[1][1], self.mat[1][2],
 *             self.mat[2][0], self.mat[2][1], self.mat[2][2],
 */
  __pyx_t_10 = PyTuple_New(9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_10, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 8, __pyx_t_9);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "srctools/_math.pyx":1867
 * 
 *     def __reduce__(self):
 *         return unpickle_mat, (             # <<<<<<<<<<<<<<
 *             self.mat[0][0], self.mat[0][1], self.mat[0][2],
 *             self.mat[1][0], self.mat[1][1], self.mat[1][2],
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(__pyx_v_8srctools_5_math_unpickle_mat);
  __Pyx_GIVEREF(__pyx_v_8srctools_5_math_unpickle_mat);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_8srctools_5_math_unpickle_mat);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1866
 *         return copy
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return unpickle_mat, (
 *             self.mat[0][0], self.mat[0][1], self.mat[0][2],
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("srctools._math.Matrix.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1874
 * 
 *     @classmethod
 *     def from_pitch(cls, double pitch):             # <<<<<<<<<<<<<<
 *         """Return the matrix representing a pitch rotation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_17from_pitch(PyObject *__pyx_v_cls, PyObject *__pyx_arg_pitch); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_16from_pitch[] = "Matrix.from_pitch(type cls, double pitch)\nReturn the matrix representing a pitch rotation.\n\n        This is a rotation around the Y axis.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_17from_pitch(PyObject *__pyx_v_cls, PyObject *__pyx_arg_pitch) {
  double __pyx_v_pitch;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_pitch (wrapper)", 0);
  assert(__pyx_arg_pitch); {
    __pyx_v_pitch = __pyx_PyFloat_AsDouble(__pyx_arg_pitch); if (unlikely((__pyx_v_pitch == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1874, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Matrix.from_pitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_16from_pitch(((PyTypeObject*)__pyx_v_cls), ((double)__pyx_v_pitch));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6Matrix_16from_pitch(PyTypeObject *__pyx_v_cls, double __pyx_v_pitch) {
  double __pyx_v_rad_pitch;
  double __pyx_v_cos;
  double __pyx_v_sin;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_rot = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double *__pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_pitch", 0);

  /* "srctools/_math.pyx":1879
 *         This is a rotation around the Y axis.
 *         """
 *         cdef double rad_pitch = deg_2_rad * pitch             # <<<<<<<<<<<<<<
 *         cdef double cos = math.cos(rad_pitch)
 *         cdef double sin = math.sin(rad_pitch)
 */
  __pyx_v_rad_pitch = (0.017453292519943295 * __pyx_v_pitch);

  /* "srctools/_math.pyx":1880
 *         """
 *         cdef double rad_pitch = deg_2_rad * pitch
 *         cdef double cos = math.cos(rad_pitch)             # <<<<<<<<<<<<<<
 *         cdef double sin = math.sin(rad_pitch)
 * 
 */
  __pyx_v_cos = cos(__pyx_v_rad_pitch);

  /* "srctools/_math.pyx":1881
 *         cdef double rad_pitch = deg_2_rad * pitch
 *         cdef double cos = math.cos(rad_pitch)
 *         cdef double sin = math.sin(rad_pitch)             # <<<<<<<<<<<<<<
 * 
 *         cdef Matrix rot = cls.__new__(cls)
 */
  __pyx_v_sin = sin(__pyx_v_rad_pitch);

  /* "srctools/_math.pyx":1883
 *         cdef double sin = math.sin(rad_pitch)
 * 
 *         cdef Matrix rot = cls.__new__(cls)             # <<<<<<<<<<<<<<
 * 
 *         rot.mat[0] = cos, 0.0, -sin
 */
  if (unlikely(((PyObject *)__pyx_v_cls) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object.__new__(X): X is not a type object (NoneType)");
    __PYX_ERR(0, 1883, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_v_cls), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8srctools_5_math_Matrix)))) __PYX_ERR(0, 1883, __pyx_L1_error)
  __pyx_v_rot = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1885
 *         cdef Matrix rot = cls.__new__(cls)
 * 
 *         rot.mat[0] = cos, 0.0, -sin             # <<<<<<<<<<<<<<
 *         rot.mat[1] = 0.0, 1.0, 0.0
 *         rot.mat[2] = sin, 0.0, cos
 */
  __pyx_t_2 = (__pyx_v_rot->mat[0]);
  __pyx_t_3 = __pyx_v_cos;
  __pyx_t_4 = 0.0;
  __pyx_t_5 = (-__pyx_v_sin);
  (__pyx_t_2[0]) = __pyx_t_3;
  (__pyx_t_2[1]) = __pyx_t_4;
  (__pyx_t_2[2]) = __pyx_t_5;

  /* "srctools/_math.pyx":1886
 * 
 *         rot.mat[0] = cos, 0.0, -sin
 *         rot.mat[1] = 0.0, 1.0, 0.0             # <<<<<<<<<<<<<<
 *         rot.mat[2] = sin, 0.0, cos
 * 
 */
  __pyx_t_2 = (__pyx_v_rot->mat[1]);
  __pyx_t_5 = 0.0;
  __pyx_t_4 = 1.0;
  __pyx_t_3 = 0.0;
  (__pyx_t_2[0]) = __pyx_t_5;
  (__pyx_t_2[1]) = __pyx_t_4;
  (__pyx_t_2[2]) = __pyx_t_3;

  /* "srctools/_math.pyx":1887
 *         rot.mat[0] = cos, 0.0, -sin
 *         rot.mat[1] = 0.0, 1.0, 0.0
 *         rot.mat[2] = sin, 0.0, cos             # <<<<<<<<<<<<<<
 * 
 *         return rot
 */
  __pyx_t_2 = (__pyx_v_rot->mat[2]);
  __pyx_t_3 = __pyx_v_sin;
  __pyx_t_4 = 0.0;
  __pyx_t_5 = __pyx_v_cos;
  (__pyx_t_2[0]) = __pyx_t_3;
  (__pyx_t_2[1]) = __pyx_t_4;
  (__pyx_t_2[2]) = __pyx_t_5;

  /* "srctools/_math.pyx":1889
 *         rot.mat[2] = sin, 0.0, cos
 * 
 *         return rot             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rot));
  __pyx_r = ((PyObject *)__pyx_v_rot);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1874
 * 
 *     @classmethod
 *     def from_pitch(cls, double pitch):             # <<<<<<<<<<<<<<
 *         """Return the matrix representing a pitch rotation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Matrix.from_pitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rot);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1892
 * 
 *     @classmethod
 *     def from_yaw(cls, double yaw):             # <<<<<<<<<<<<<<
 *         """Return the matrix representing a yaw rotation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_19from_yaw(PyObject *__pyx_v_cls, PyObject *__pyx_arg_yaw); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_18from_yaw[] = "Matrix.from_yaw(type cls, double yaw)\nReturn the matrix representing a yaw rotation.\n\n        ";
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_19from_yaw(PyObject *__pyx_v_cls, PyObject *__pyx_arg_yaw) {
  double __pyx_v_yaw;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_yaw (wrapper)", 0);
  assert(__pyx_arg_yaw); {
    __pyx_v_yaw = __pyx_PyFloat_AsDouble(__pyx_arg_yaw); if (unlikely((__pyx_v_yaw == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1892, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Matrix.from_yaw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_18from_yaw(((PyTypeObject*)__pyx_v_cls), ((double)__pyx_v_yaw));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6Matrix_18from_yaw(PyTypeObject *__pyx_v_cls, double __pyx_v_yaw) {
  double __pyx_v_rad_yaw;
  double __pyx_v_sin;
  double __pyx_v_cos;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_rot = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double *__pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_yaw", 0);

  /* "srctools/_math.pyx":1896
 * 
 *         """
 *         cdef double rad_yaw = deg_2_rad * yaw             # <<<<<<<<<<<<<<
 *         cdef double sin = math.sin(rad_yaw)
 *         cdef double cos = math.cos(rad_yaw)
 */
  __pyx_v_rad_yaw = (0.017453292519943295 * __pyx_v_yaw);

  /* "srctools/_math.pyx":1897
 *         """
 *         cdef double rad_yaw = deg_2_rad * yaw
 *         cdef double sin = math.sin(rad_yaw)             # <<<<<<<<<<<<<<
 *         cdef double cos = math.cos(rad_yaw)
 * 
 */
  __pyx_v_sin = sin(__pyx_v_rad_yaw);

  /* "srctools/_math.pyx":1898
 *         cdef double rad_yaw = deg_2_rad * yaw
 *         cdef double sin = math.sin(rad_yaw)
 *         cdef double cos = math.cos(rad_yaw)             # <<<<<<<<<<<<<<
 * 
 *         cdef Matrix rot = cls.__new__(cls)
 */
  __pyx_v_cos = cos(__pyx_v_rad_yaw);

  /* "srctools/_math.pyx":1900
 *         cdef double cos = math.cos(rad_yaw)
 * 
 *         cdef Matrix rot = cls.__new__(cls)             # <<<<<<<<<<<<<<
 * 
 *         rot.mat[0] = cos, sin, 0.0
 */
  if (unlikely(((PyObject *)__pyx_v_cls) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object.__new__(X): X is not a type object (NoneType)");
    __PYX_ERR(0, 1900, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_v_cls), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8srctools_5_math_Matrix)))) __PYX_ERR(0, 1900, __pyx_L1_error)
  __pyx_v_rot = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1902
 *         cdef Matrix rot = cls.__new__(cls)
 * 
 *         rot.mat[0] = cos, sin, 0.0             # <<<<<<<<<<<<<<
 *         rot.mat[1] = -sin, cos, 0.0
 *         rot.mat[2] = 0.0, 0.0, 1.0
 */
  __pyx_t_2 = (__pyx_v_rot->mat[0]);
  __pyx_t_3 = __pyx_v_cos;
  __pyx_t_4 = __pyx_v_sin;
  __pyx_t_5 = 0.0;
  (__pyx_t_2[0]) = __pyx_t_3;
  (__pyx_t_2[1]) = __pyx_t_4;
  (__pyx_t_2[2]) = __pyx_t_5;

  /* "srctools/_math.pyx":1903
 * 
 *         rot.mat[0] = cos, sin, 0.0
 *         rot.mat[1] = -sin, cos, 0.0             # <<<<<<<<<<<<<<
 *         rot.mat[2] = 0.0, 0.0, 1.0
 * 
 */
  __pyx_t_2 = (__pyx_v_rot->mat[1]);
  __pyx_t_5 = (-__pyx_v_sin);
  __pyx_t_4 = __pyx_v_cos;
  __pyx_t_3 = 0.0;
  (__pyx_t_2[0]) = __pyx_t_5;
  (__pyx_t_2[1]) = __pyx_t_4;
  (__pyx_t_2[2]) = __pyx_t_3;

  /* "srctools/_math.pyx":1904
 *         rot.mat[0] = cos, sin, 0.0
 *         rot.mat[1] = -sin, cos, 0.0
 *         rot.mat[2] = 0.0, 0.0, 1.0             # <<<<<<<<<<<<<<
 * 
 *         return rot
 */
  __pyx_t_2 = (__pyx_v_rot->mat[2]);
  __pyx_t_3 = 0.0;
  __pyx_t_4 = 0.0;
  __pyx_t_5 = 1.0;
  (__pyx_t_2[0]) = __pyx_t_3;
  (__pyx_t_2[1]) = __pyx_t_4;
  (__pyx_t_2[2]) = __pyx_t_5;

  /* "srctools/_math.pyx":1906
 *         rot.mat[2] = 0.0, 0.0, 1.0
 * 
 *         return rot             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rot));
  __pyx_r = ((PyObject *)__pyx_v_rot);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1892
 * 
 *     @classmethod
 *     def from_yaw(cls, double yaw):             # <<<<<<<<<<<<<<
 *         """Return the matrix representing a yaw rotation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Matrix.from_yaw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rot);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1909
 * 
 *     @classmethod
 *     def from_roll(cls, double roll):             # <<<<<<<<<<<<<<
 *         """Return the matrix representing a roll rotation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_21from_roll(PyObject *__pyx_v_cls, PyObject *__pyx_arg_roll); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_20from_roll[] = "Matrix.from_roll(type cls, double roll)\nReturn the matrix representing a roll rotation.\n\n        This is a rotation around the X axis.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_21from_roll(PyObject *__pyx_v_cls, PyObject *__pyx_arg_roll) {
  double __pyx_v_roll;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_roll (wrapper)", 0);
  assert(__pyx_arg_roll); {
    __pyx_v_roll = __pyx_PyFloat_AsDouble(__pyx_arg_roll); if (unlikely((__pyx_v_roll == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1909, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Matrix.from_roll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_20from_roll(((PyTypeObject*)__pyx_v_cls), ((double)__pyx_v_roll));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6Matrix_20from_roll(PyTypeObject *__pyx_v_cls, double __pyx_v_roll) {
  double __pyx_v_rad_roll;
  double __pyx_v_cos;
  double __pyx_v_sin;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_rot = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2[3];
  double __pyx_t_3[3];
  double __pyx_t_4[3];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_roll", 0);

  /* "srctools/_math.pyx":1914
 *         This is a rotation around the X axis.
 *         """
 *         cdef double rad_roll = deg_2_rad * roll             # <<<<<<<<<<<<<<
 *         cdef double cos = math.cos(rad_roll)
 *         cdef double sin = math.sin(rad_roll)
 */
  __pyx_v_rad_roll = (0.017453292519943295 * __pyx_v_roll);

  /* "srctools/_math.pyx":1915
 *         """
 *         cdef double rad_roll = deg_2_rad * roll
 *         cdef double cos = math.cos(rad_roll)             # <<<<<<<<<<<<<<
 *         cdef double sin = math.sin(rad_roll)
 * 
 */
  __pyx_v_cos = cos(__pyx_v_rad_roll);

  /* "srctools/_math.pyx":1916
 *         cdef double rad_roll = deg_2_rad * roll
 *         cdef double cos = math.cos(rad_roll)
 *         cdef double sin = math.sin(rad_roll)             # <<<<<<<<<<<<<<
 * 
 *         cdef Matrix rot = cls.__new__(cls)
 */
  __pyx_v_sin = sin(__pyx_v_rad_roll);

  /* "srctools/_math.pyx":1918
 *         cdef double sin = math.sin(rad_roll)
 * 
 *         cdef Matrix rot = cls.__new__(cls)             # <<<<<<<<<<<<<<
 * 
 *         rot.mat[0] = [1.0, 0.0, 0.0]
 */
  if (unlikely(((PyObject *)__pyx_v_cls) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object.__new__(X): X is not a type object (NoneType)");
    __PYX_ERR(0, 1918, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_v_cls), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8srctools_5_math_Matrix)))) __PYX_ERR(0, 1918, __pyx_L1_error)
  __pyx_v_rot = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1920
 *         cdef Matrix rot = cls.__new__(cls)
 * 
 *         rot.mat[0] = [1.0, 0.0, 0.0]             # <<<<<<<<<<<<<<
 *         rot.mat[1] = [0.0, cos, sin]
 *         rot.mat[2] = [0.0, -sin, cos]
 */
  __pyx_t_2[0] = 1.0;
  __pyx_t_2[1] = 0.0;
  __pyx_t_2[2] = 0.0;
  memcpy(&((__pyx_v_rot->mat[0])[0]), __pyx_t_2, sizeof((__pyx_v_rot->mat[0])[0]) * (3));

  /* "srctools/_math.pyx":1921
 * 
 *         rot.mat[0] = [1.0, 0.0, 0.0]
 *         rot.mat[1] = [0.0, cos, sin]             # <<<<<<<<<<<<<<
 *         rot.mat[2] = [0.0, -sin, cos]
 * 
 */
  __pyx_t_3[0] = 0.0;
  __pyx_t_3[1] = __pyx_v_cos;
  __pyx_t_3[2] = __pyx_v_sin;
  memcpy(&((__pyx_v_rot->mat[1])[0]), __pyx_t_3, sizeof((__pyx_v_rot->mat[1])[0]) * (3));

  /* "srctools/_math.pyx":1922
 *         rot.mat[0] = [1.0, 0.0, 0.0]
 *         rot.mat[1] = [0.0, cos, sin]
 *         rot.mat[2] = [0.0, -sin, cos]             # <<<<<<<<<<<<<<
 * 
 *         return rot
 */
  __pyx_t_4[0] = 0.0;
  __pyx_t_4[1] = (-__pyx_v_sin);
  __pyx_t_4[2] = __pyx_v_cos;
  memcpy(&((__pyx_v_rot->mat[2])[0]), __pyx_t_4, sizeof((__pyx_v_rot->mat[2])[0]) * (3));

  /* "srctools/_math.pyx":1924
 *         rot.mat[2] = [0.0, -sin, cos]
 * 
 *         return rot             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rot));
  __pyx_r = ((PyObject *)__pyx_v_rot);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1909
 * 
 *     @classmethod
 *     def from_roll(cls, double roll):             # <<<<<<<<<<<<<<
 *         """Return the matrix representing a roll rotation.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Matrix.from_roll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rot);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1927
 * 
 *     @classmethod
 *     def from_angle(cls, pitch, yaw=None, roll=None):             # <<<<<<<<<<<<<<
 *         """Return the rotation representing an Euler angle.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_23from_angle(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_22from_angle[] = "Matrix.from_angle(type cls, pitch, yaw=None, roll=None)\nReturn the rotation representing an Euler angle.\n\n        Either an Angle can be passed, or the raw pitch/yaw/roll angles.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_23from_angle(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pitch = 0;
  PyObject *__pyx_v_yaw = 0;
  PyObject *__pyx_v_roll = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_angle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pitch,&__pyx_n_s_yaw,&__pyx_n_s_roll,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pitch)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_yaw);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_roll);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_angle") < 0)) __PYX_ERR(0, 1927, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pitch = values[0];
    __pyx_v_yaw = values[1];
    __pyx_v_roll = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_angle", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1927, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Matrix.from_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_22from_angle(((PyTypeObject*)__pyx_v_cls), __pyx_v_pitch, __pyx_v_yaw, __pyx_v_roll);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6Matrix_22from_angle(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_pitch, PyObject *__pyx_v_yaw, PyObject *__pyx_v_roll) {
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_rot = 0;
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_ang;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_t_8srctools_5_math_vec_t __pyx_t_4;
  int __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_angle", 0);

  /* "srctools/_math.pyx":1932
 *         Either an Angle can be passed, or the raw pitch/yaw/roll angles.
 *         """
 *         cdef Matrix rot = Matrix.__new__(Matrix)             # <<<<<<<<<<<<<<
 *         cdef vec_t ang
 *         if isinstance(pitch, Angle):
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Matrix(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Matrix), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1932, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_rot = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":1934
 *         cdef Matrix rot = Matrix.__new__(Matrix)
 *         cdef vec_t ang
 *         if isinstance(pitch, Angle):             # <<<<<<<<<<<<<<
 *             ang = (<Angle>pitch).val
 *         elif yaw is None or roll is None:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_pitch, __pyx_ptype_8srctools_5_math_Angle); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "srctools/_math.pyx":1935
 *         cdef vec_t ang
 *         if isinstance(pitch, Angle):
 *             ang = (<Angle>pitch).val             # <<<<<<<<<<<<<<
 *         elif yaw is None or roll is None:
 *             raise TypeError('Matrix.from_angles() accepts a single Angle or 3 floats!')
 */
    __pyx_t_4 = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_pitch)->val;
    __pyx_v_ang = __pyx_t_4;

    /* "srctools/_math.pyx":1934
 *         cdef Matrix rot = Matrix.__new__(Matrix)
 *         cdef vec_t ang
 *         if isinstance(pitch, Angle):             # <<<<<<<<<<<<<<
 *             ang = (<Angle>pitch).val
 *         elif yaw is None or roll is None:
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":1936
 *         if isinstance(pitch, Angle):
 *             ang = (<Angle>pitch).val
 *         elif yaw is None or roll is None:             # <<<<<<<<<<<<<<
 *             raise TypeError('Matrix.from_angles() accepts a single Angle or 3 floats!')
 *         else:
 */
  __pyx_t_2 = (__pyx_v_yaw == Py_None);
  __pyx_t_5 = (__pyx_t_2 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = (__pyx_v_roll == Py_None);
  __pyx_t_2 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_3)) {

    /* "srctools/_math.pyx":1937
 *             ang = (<Angle>pitch).val
 *         elif yaw is None or roll is None:
 *             raise TypeError('Matrix.from_angles() accepts a single Angle or 3 floats!')             # <<<<<<<<<<<<<<
 *         else:
 *             ang.x = float(pitch)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1937, __pyx_L1_error)

    /* "srctools/_math.pyx":1936
 *         if isinstance(pitch, Angle):
 *             ang = (<Angle>pitch).val
 *         elif yaw is None or roll is None:             # <<<<<<<<<<<<<<
 *             raise TypeError('Matrix.from_angles() accepts a single Angle or 3 floats!')
 *         else:
 */
  }

  /* "srctools/_math.pyx":1939
 *             raise TypeError('Matrix.from_angles() accepts a single Angle or 3 floats!')
 *         else:
 *             ang.x = float(pitch)             # <<<<<<<<<<<<<<
 *             ang.y = float(yaw)
 *             ang.z = float(roll)
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_AsDouble(__pyx_v_pitch); if (unlikely(__pyx_t_6 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1939, __pyx_L1_error)
    __pyx_v_ang.x = __pyx_t_6;

    /* "srctools/_math.pyx":1940
 *         else:
 *             ang.x = float(pitch)
 *             ang.y = float(yaw)             # <<<<<<<<<<<<<<
 *             ang.z = float(roll)
 *         _mat_from_angle(rot.mat, &ang)
 */
    __pyx_t_6 = __Pyx_PyObject_AsDouble(__pyx_v_yaw); if (unlikely(__pyx_t_6 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1940, __pyx_L1_error)
    __pyx_v_ang.y = __pyx_t_6;

    /* "srctools/_math.pyx":1941
 *             ang.x = float(pitch)
 *             ang.y = float(yaw)
 *             ang.z = float(roll)             # <<<<<<<<<<<<<<
 *         _mat_from_angle(rot.mat, &ang)
 *         return rot
 */
    __pyx_t_6 = __Pyx_PyObject_AsDouble(__pyx_v_roll); if (unlikely(__pyx_t_6 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1941, __pyx_L1_error)
    __pyx_v_ang.z = __pyx_t_6;
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":1942
 *             ang.y = float(yaw)
 *             ang.z = float(roll)
 *         _mat_from_angle(rot.mat, &ang)             # <<<<<<<<<<<<<<
 *         return rot
 * 
 */
  __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_rot->mat, (&__pyx_v_ang));

  /* "srctools/_math.pyx":1943
 *             ang.z = float(roll)
 *         _mat_from_angle(rot.mat, &ang)
 *         return rot             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rot));
  __pyx_r = ((PyObject *)__pyx_v_rot);
  goto __pyx_L0;

  /* "srctools/_math.pyx":1927
 * 
 *     @classmethod
 *     def from_angle(cls, pitch, yaw=None, roll=None):             # <<<<<<<<<<<<<<
 *         """Return the rotation representing an Euler angle.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Matrix.from_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rot);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1947
 * 
 *     @classmethod
 *     def axis_angle(cls, object axis, double angle) -> 'Matrix':             # <<<<<<<<<<<<<<
 *         """Compute the rotation matrix forming a rotation around an axis by a specific angle."""
 *         cdef vec_t vec_axis
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_6Matrix_25axis_angle(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_24axis_angle[] = "Matrix.axis_angle(type cls, axis, double angle) -> u'Matrix'\nCompute the rotation matrix forming a rotation around an axis by a specific angle.";
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_6Matrix_25axis_angle(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  double __pyx_v_angle;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("axis_angle (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_axis,&__pyx_n_s_angle,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("axis_angle", 1, 2, 2, 1); __PYX_ERR(0, 1947, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "axis_angle") < 0)) __PYX_ERR(0, 1947, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_axis = values[0];
    __pyx_v_angle = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1947, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("axis_angle", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1947, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Matrix.axis_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_24axis_angle(((PyTypeObject*)__pyx_v_cls), __pyx_v_axis, __pyx_v_angle);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_6Matrix_24axis_angle(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_axis, double __pyx_v_angle) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_vec_axis;
  double __pyx_v_sin;
  double __pyx_v_cos;
  double __pyx_v_icos;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_mat = 0;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned char __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("axis_angle", 0);

  /* "srctools/_math.pyx":1951
 *         cdef vec_t vec_axis
 *         cdef double sin, cos, icos, x, y, z
 *         conv_vec(&vec_axis, axis, scalar=False)             # <<<<<<<<<<<<<<
 *         _vec_normalise(&vec_axis, &vec_axis)
 *         angle *= -deg_2_rad
 */
  __pyx_t_1 = __pyx_f_8srctools_5_math_conv_vec((&__pyx_v_vec_axis), __pyx_v_axis, 0); if (unlikely(__pyx_t_1 == ((unsigned char)0))) __PYX_ERR(0, 1951, __pyx_L1_error)

  /* "srctools/_math.pyx":1952
 *         cdef double sin, cos, icos, x, y, z
 *         conv_vec(&vec_axis, axis, scalar=False)
 *         _vec_normalise(&vec_axis, &vec_axis)             # <<<<<<<<<<<<<<
 *         angle *= -deg_2_rad
 * 
 */
  __pyx_f_8srctools_5_math__vec_normalise((&__pyx_v_vec_axis), (&__pyx_v_vec_axis));

  /* "srctools/_math.pyx":1953
 *         conv_vec(&vec_axis, axis, scalar=False)
 *         _vec_normalise(&vec_axis, &vec_axis)
 *         angle *= -deg_2_rad             # <<<<<<<<<<<<<<
 * 
 *         cos = math.cos(angle)
 */
  __pyx_v_angle = (__pyx_v_angle * -0.017453292519943295);

  /* "srctools/_math.pyx":1955
 *         angle *= -deg_2_rad
 * 
 *         cos = math.cos(angle)             # <<<<<<<<<<<<<<
 *         icos = 1 - cos
 *         sin = math.sin(angle)
 */
  __pyx_v_cos = cos(__pyx_v_angle);

  /* "srctools/_math.pyx":1956
 * 
 *         cos = math.cos(angle)
 *         icos = 1 - cos             # <<<<<<<<<<<<<<
 *         sin = math.sin(angle)
 * 
 */
  __pyx_v_icos = (1.0 - __pyx_v_cos);

  /* "srctools/_math.pyx":1957
 *         cos = math.cos(angle)
 *         icos = 1 - cos
 *         sin = math.sin(angle)             # <<<<<<<<<<<<<<
 * 
 *         x = vec_axis.x
 */
  __pyx_v_sin = sin(__pyx_v_angle);

  /* "srctools/_math.pyx":1959
 *         sin = math.sin(angle)
 * 
 *         x = vec_axis.x             # <<<<<<<<<<<<<<
 *         y = vec_axis.y
 *         z = vec_axis.z
 */
  __pyx_t_2 = __pyx_v_vec_axis.x;
  __pyx_v_x = __pyx_t_2;

  /* "srctools/_math.pyx":1960
 * 
 *         x = vec_axis.x
 *         y = vec_axis.y             # <<<<<<<<<<<<<<
 *         z = vec_axis.z
 * 
 */
  __pyx_t_2 = __pyx_v_vec_axis.y;
  __pyx_v_y = __pyx_t_2;

  /* "srctools/_math.pyx":1961
 *         x = vec_axis.x
 *         y = vec_axis.y
 *         z = vec_axis.z             # <<<<<<<<<<<<<<
 * 
 *         cdef Matrix mat = Matrix.__new__(cls)
 */
  __pyx_t_2 = __pyx_v_vec_axis.z;
  __pyx_v_z = __pyx_t_2;

  /* "srctools/_math.pyx":1963
 *         z = vec_axis.z
 * 
 *         cdef Matrix mat = Matrix.__new__(cls)             # <<<<<<<<<<<<<<
 * 
 *         mat.mat[0][0] = x*x * icos + cos
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8srctools_5_math_Matrix), __pyx_n_s_new); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, ((PyObject *)__pyx_v_cls)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_cls));
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8srctools_5_math_Matrix))))) __PYX_ERR(0, 1963, __pyx_L1_error)
  __pyx_v_mat = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "srctools/_math.pyx":1965
 *         cdef Matrix mat = Matrix.__new__(cls)
 * 
 *         mat.mat[0][0] = x*x * icos + cos             # <<<<<<<<<<<<<<
 *         mat.mat[0][1] = x*y * icos - z*sin
 *         mat.mat[0][2] = x*z * icos + y*sin
 */
  ((__pyx_v_mat->mat[0])[0]) = (((__pyx_v_x * __pyx_v_x) * __pyx_v_icos) + __pyx_v_cos);

  /* "srctools/_math.pyx":1966
 * 
 *         mat.mat[0][0] = x*x * icos + cos
 *         mat.mat[0][1] = x*y * icos - z*sin             # <<<<<<<<<<<<<<
 *         mat.mat[0][2] = x*z * icos + y*sin
 * 
 */
  ((__pyx_v_mat->mat[0])[1]) = (((__pyx_v_x * __pyx_v_y) * __pyx_v_icos) - (__pyx_v_z * __pyx_v_sin));

  /* "srctools/_math.pyx":1967
 *         mat.mat[0][0] = x*x * icos + cos
 *         mat.mat[0][1] = x*y * icos - z*sin
 *         mat.mat[0][2] = x*z * icos + y*sin             # <<<<<<<<<<<<<<
 * 
 *         mat.mat[1][0] = y*x * icos + z*sin
 */
  ((__pyx_v_mat->mat[0])[2]) = (((__pyx_v_x * __pyx_v_z) * __pyx_v_icos) + (__pyx_v_y * __pyx_v_sin));

  /* "srctools/_math.pyx":1969
 *         mat.mat[0][2] = x*z * icos + y*sin
 * 
 *         mat.mat[1][0] = y*x * icos + z*sin             # <<<<<<<<<<<<<<
 *         mat.mat[1][1] = y*y * icos + cos
 *         mat.mat[1][2] = y*z * icos - x*sin
 */
  ((__pyx_v_mat->mat[1])[0]) = (((__pyx_v_y * __pyx_v_x) * __pyx_v_icos) + (__pyx_v_z * __pyx_v_sin));

  /* "srctools/_math.pyx":1970
 * 
 *         mat.mat[1][0] = y*x * icos + z*sin
 *         mat.mat[1][1] = y*y * icos + cos             # <<<<<<<<<<<<<<
 *         mat.mat[1][2] = y*z * icos - x*sin
 * 
 */
  ((__pyx_v_mat->mat[1])[1]) = (((__pyx_v_y * __pyx_v_y) * __pyx_v_icos) + __pyx_v_cos);

  /* "srctools/_math.pyx":1971
 *         mat.mat[1][0] = y*x * icos + z*sin
 *         mat.mat[1][1] = y*y * icos + cos
 *         mat.mat[1][2] = y*z * icos - x*sin             # <<<<<<<<<<<<<<
 * 
 *         mat.mat[2][0] = z*x * icos - y*sin
 */
  ((__pyx_v_mat->mat[1])[2]) = (((__pyx_v_y * __pyx_v_z) * __pyx_v_icos) - (__pyx_v_x * __pyx_v_sin));

  /* "srctools/_math.pyx":1973
 *         mat.mat[1][2] = y*z * icos - x*sin
 * 
 *         mat.mat[2][0] = z*x * icos - y*sin             # <<<<<<<<<<<<<<
 *         mat.mat[2][1] = z*y * icos + x*sin
 *         mat.mat[2][2] = z*z * icos + cos
 */
  ((__pyx_v_mat->mat[2])[0]) = (((__pyx_v_z * __pyx_v_x) * __pyx_v_icos) - (__pyx_v_y * __pyx_v_sin));

  /* "srctools/_math.pyx":1974
 * 
 *         mat.mat[2][0] = z*x * icos - y*sin
 *         mat.mat[2][1] = z*y * icos + x*sin             # <<<<<<<<<<<<<<
 *         mat.mat[2][2] = z*z * icos + cos
 * 
 */
  ((__pyx_v_mat->mat[2])[1]) = (((__pyx_v_z * __pyx_v_y) * __pyx_v_icos) + (__pyx_v_x * __pyx_v_sin));

  /* "srctools/_math.pyx":1975
 *         mat.mat[2][0] = z*x * icos - y*sin
 *         mat.mat[2][1] = z*y * icos + x*sin
 *         mat.mat[2][2] = z*z * icos + cos             # <<<<<<<<<<<<<<
 * 
 *         return mat
 */
  ((__pyx_v_mat->mat[2])[2]) = (((__pyx_v_z * __pyx_v_z) * __pyx_v_icos) + __pyx_v_cos);

  /* "srctools/_math.pyx":1977
 *         mat.mat[2][2] = z*z * icos + cos
 * 
 *         return mat             # <<<<<<<<<<<<<<
 * 
 *     def forward(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = __pyx_v_mat;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1947
 * 
 *     @classmethod
 *     def axis_angle(cls, object axis, double angle) -> 'Matrix':             # <<<<<<<<<<<<<<
 *         """Compute the rotation matrix forming a rotation around an axis by a specific angle."""
 *         cdef vec_t vec_axis
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("srctools._math.Matrix.axis_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1979
 *         return mat
 * 
 *     def forward(self):             # <<<<<<<<<<<<<<
 *         """Return a normalised vector pointing in the +X direction."""
 *         return _vector(self.mat[0][0], self.mat[0][1], self.mat[0][2])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_27forward(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_26forward[] = "Matrix.forward(self)\nReturn a normalised vector pointing in the +X direction.";
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_27forward(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("forward (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_26forward(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6Matrix_26forward(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("forward", 0);

  /* "srctools/_math.pyx":1981
 *     def forward(self):
 *         """Return a normalised vector pointing in the +X direction."""
 *         return _vector(self.mat[0][0], self.mat[0][1], self.mat[0][2])             # <<<<<<<<<<<<<<
 * 
 *     def left(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8srctools_5_math__vector(((__pyx_v_self->mat[0])[0]), ((__pyx_v_self->mat[0])[1]), ((__pyx_v_self->mat[0])[2]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1979
 *         return mat
 * 
 *     def forward(self):             # <<<<<<<<<<<<<<
 *         """Return a normalised vector pointing in the +X direction."""
 *         return _vector(self.mat[0][0], self.mat[0][1], self.mat[0][2])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Matrix.forward", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1983
 *         return _vector(self.mat[0][0], self.mat[0][1], self.mat[0][2])
 * 
 *     def left(self):             # <<<<<<<<<<<<<<
 *         """Return a normalised vector pointing in the +Y direction."""
 *         return _vector(self.mat[1][0], self.mat[1][1], self.mat[1][2])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_29left(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_28left[] = "Matrix.left(self)\nReturn a normalised vector pointing in the +Y direction.";
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_29left(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("left (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_28left(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6Matrix_28left(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("left", 0);

  /* "srctools/_math.pyx":1985
 *     def left(self):
 *         """Return a normalised vector pointing in the +Y direction."""
 *         return _vector(self.mat[1][0], self.mat[1][1], self.mat[1][2])             # <<<<<<<<<<<<<<
 * 
 *     def up(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8srctools_5_math__vector(((__pyx_v_self->mat[1])[0]), ((__pyx_v_self->mat[1])[1]), ((__pyx_v_self->mat[1])[2]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1983
 *         return _vector(self.mat[0][0], self.mat[0][1], self.mat[0][2])
 * 
 *     def left(self):             # <<<<<<<<<<<<<<
 *         """Return a normalised vector pointing in the +Y direction."""
 *         return _vector(self.mat[1][0], self.mat[1][1], self.mat[1][2])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Matrix.left", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1987
 *         return _vector(self.mat[1][0], self.mat[1][1], self.mat[1][2])
 * 
 *     def up(self):             # <<<<<<<<<<<<<<
 *         """Return a normalised vector pointing in the +Z direction."""
 *         return _vector(self.mat[2][0], self.mat[2][1], self.mat[2][2])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_31up(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_30up[] = "Matrix.up(self)\nReturn a normalised vector pointing in the +Z direction.";
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_31up(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_30up(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6Matrix_30up(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up", 0);

  /* "srctools/_math.pyx":1989
 *     def up(self):
 *         """Return a normalised vector pointing in the +Z direction."""
 *         return _vector(self.mat[2][0], self.mat[2][1], self.mat[2][2])             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8srctools_5_math__vector(((__pyx_v_self->mat[2])[0]), ((__pyx_v_self->mat[2])[1]), ((__pyx_v_self->mat[2])[2]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":1987
 *         return _vector(self.mat[1][0], self.mat[1][1], self.mat[1][2])
 * 
 *     def up(self):             # <<<<<<<<<<<<<<
 *         """Return a normalised vector pointing in the +Z direction."""
 *         return _vector(self.mat[2][0], self.mat[2][1], self.mat[2][2])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Matrix.up", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":1991
 *         return _vector(self.mat[2][0], self.mat[2][1], self.mat[2][2])
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         """Retrieve an individual matrix value by x, y position (0-2)."""
 *         cdef int x, y
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_33__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_32__getitem__[] = "Retrieve an individual matrix value by x, y position (0-2).";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_6Matrix_32__getitem__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_33__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_32__getitem__(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6Matrix_32__getitem__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self, PyObject *__pyx_v_item) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  Py_UCS4 __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "srctools/_math.pyx":1994
 *         """Retrieve an individual matrix value by x, y position (0-2)."""
 *         cdef int x, y
 *         try:             # <<<<<<<<<<<<<<
 *             x, y = item
 *         except (ValueError, TypeError, OverflowError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "srctools/_math.pyx":1995
 *         cdef int x, y
 *         try:
 *             x, y = item             # <<<<<<<<<<<<<<
 *         except (ValueError, TypeError, OverflowError):
 *             raise KeyError(f'Invalid coordinate {item!r}' '!')
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_item))) || (PyList_CheckExact(__pyx_v_item))) {
        PyObject* sequence = __pyx_v_item;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1995, __pyx_L3_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1995, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1995, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_6 = PyObject_GetIter(__pyx_v_item); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1995, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(0, 1995, __pyx_L3_error)
        __pyx_t_7 = NULL;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1995, __pyx_L3_error)
        __pyx_L10_unpacking_done:;
      }
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1995, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1995, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_x = __pyx_t_8;
      __pyx_v_y = __pyx_t_9;

      /* "srctools/_math.pyx":1994
 *         """Retrieve an individual matrix value by x, y position (0-2)."""
 *         cdef int x, y
 *         try:             # <<<<<<<<<<<<<<
 *             x, y = item
 *         except (ValueError, TypeError, OverflowError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "srctools/_math.pyx":1996
 *         try:
 *             x, y = item
 *         except (ValueError, TypeError, OverflowError):             # <<<<<<<<<<<<<<
 *             raise KeyError(f'Invalid coordinate {item!r}' '!')
 *         if 0 <= x < 3 and 0 <= y < 3:
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OverflowError);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("srctools._math.Matrix.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_6) < 0) __PYX_ERR(0, 1996, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);

      /* "srctools/_math.pyx":1997
 *             x, y = item
 *         except (ValueError, TypeError, OverflowError):
 *             raise KeyError(f'Invalid coordinate {item!r}' '!')             # <<<<<<<<<<<<<<
 *         if 0 <= x < 3 and 0 <= y < 3:
 *             return self.mat[x][y]
 */
      __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1997, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = 0;
      __pyx_t_12 = 127;
      __Pyx_INCREF(__pyx_kp_u_Invalid_coordinate);
      __pyx_t_11 += 19;
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_coordinate);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_Invalid_coordinate);
      __pyx_t_13 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_item), __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1997, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_12;
      __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_13);
      __pyx_t_13 = 0;
      __Pyx_INCREF(__pyx_kp_u__4);
      __pyx_t_11 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__4);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u__4);
      __pyx_t_13 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1997, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1997, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(0, 1997, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "srctools/_math.pyx":1994
 *         """Retrieve an individual matrix value by x, y position (0-2)."""
 *         cdef int x, y
 *         try:             # <<<<<<<<<<<<<<
 *             x, y = item
 *         except (ValueError, TypeError, OverflowError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "srctools/_math.pyx":1998
 *         except (ValueError, TypeError, OverflowError):
 *             raise KeyError(f'Invalid coordinate {item!r}' '!')
 *         if 0 <= x < 3 and 0 <= y < 3:             # <<<<<<<<<<<<<<
 *             return self.mat[x][y]
 *         else:
 */
  __pyx_t_15 = (0 <= __pyx_v_x);
  if (__pyx_t_15) {
    __pyx_t_15 = (__pyx_v_x < 3);
  }
  __pyx_t_16 = (__pyx_t_15 != 0);
  if (__pyx_t_16) {
  } else {
    __pyx_t_14 = __pyx_t_16;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_16 = (0 <= __pyx_v_y);
  if (__pyx_t_16) {
    __pyx_t_16 = (__pyx_v_y < 3);
  }
  __pyx_t_15 = (__pyx_t_16 != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L14_bool_binop_done:;
  if (likely(__pyx_t_14)) {

    /* "srctools/_math.pyx":1999
 *             raise KeyError(f'Invalid coordinate {item!r}' '!')
 *         if 0 <= x < 3 and 0 <= y < 3:
 *             return self.mat[x][y]             # <<<<<<<<<<<<<<
 *         else:
 *             raise KeyError(f'Invalid coordinate {x}, {y}' '!')
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = PyFloat_FromDouble(((__pyx_v_self->mat[__pyx_v_x])[__pyx_v_y])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1999, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":1998
 *         except (ValueError, TypeError, OverflowError):
 *             raise KeyError(f'Invalid coordinate {item!r}' '!')
 *         if 0 <= x < 3 and 0 <= y < 3:             # <<<<<<<<<<<<<<
 *             return self.mat[x][y]
 *         else:
 */
  }

  /* "srctools/_math.pyx":2001
 *             return self.mat[x][y]
 *         else:
 *             raise KeyError(f'Invalid coordinate {x}, {y}' '!')             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, double value):
 */
  /*else*/ {
    __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = 0;
    __pyx_t_12 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_coordinate);
    __pyx_t_11 += 19;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_coordinate);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Invalid_coordinate);
    __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_x, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_kp_u__8);
    __pyx_t_11 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__8);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u__8);
    __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_y, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_kp_u__4);
    __pyx_t_11 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__4);
    PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_kp_u__4);
    __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_6, 5, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 2001, __pyx_L1_error)
  }

  /* "srctools/_math.pyx":1991
 *         return _vector(self.mat[2][0], self.mat[2][1], self.mat[2][2])
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         """Retrieve an individual matrix value by x, y position (0-2)."""
 *         cdef int x, y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("srctools._math.Matrix.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2003
 *             raise KeyError(f'Invalid coordinate {x}, {y}' '!')
 * 
 *     def __setitem__(self, item, double value):             # <<<<<<<<<<<<<<
 *         """Set an individual matrix value by x, y position (0-2)."""
 *         cdef int x, y
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_6Matrix_35__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_arg_value); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_34__setitem__[] = "Set an individual matrix value by x, y position (0-2).";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_6Matrix_34__setitem__;
#endif
static int __pyx_pw_8srctools_5_math_6Matrix_35__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2003, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Matrix.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_34__setitem__(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_6Matrix_34__setitem__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self, PyObject *__pyx_v_item, double __pyx_v_value) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  Py_UCS4 __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "srctools/_math.pyx":2006
 *         """Set an individual matrix value by x, y position (0-2)."""
 *         cdef int x, y
 *         try:             # <<<<<<<<<<<<<<
 *             x, y = item
 *         except (ValueError, TypeError, OverflowError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "srctools/_math.pyx":2007
 *         cdef int x, y
 *         try:
 *             x, y = item             # <<<<<<<<<<<<<<
 *         except (ValueError, TypeError, OverflowError):
 *             raise KeyError(f'Invalid coordinate {item!r}' '!')
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_item))) || (PyList_CheckExact(__pyx_v_item))) {
        PyObject* sequence = __pyx_v_item;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 2007, __pyx_L3_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2007, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2007, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_6 = PyObject_GetIter(__pyx_v_item); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2007, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(0, 2007, __pyx_L3_error)
        __pyx_t_7 = NULL;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 2007, __pyx_L3_error)
        __pyx_L10_unpacking_done:;
      }
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2007, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2007, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_x = __pyx_t_8;
      __pyx_v_y = __pyx_t_9;

      /* "srctools/_math.pyx":2006
 *         """Set an individual matrix value by x, y position (0-2)."""
 *         cdef int x, y
 *         try:             # <<<<<<<<<<<<<<
 *             x, y = item
 *         except (ValueError, TypeError, OverflowError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "srctools/_math.pyx":2008
 *         try:
 *             x, y = item
 *         except (ValueError, TypeError, OverflowError):             # <<<<<<<<<<<<<<
 *             raise KeyError(f'Invalid coordinate {item!r}' '!')
 *         if 0 <= x < 3 and 0 <= y < 3:
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OverflowError);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("srctools._math.Matrix.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_6) < 0) __PYX_ERR(0, 2008, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);

      /* "srctools/_math.pyx":2009
 *             x, y = item
 *         except (ValueError, TypeError, OverflowError):
 *             raise KeyError(f'Invalid coordinate {item!r}' '!')             # <<<<<<<<<<<<<<
 *         if 0 <= x < 3 and 0 <= y < 3:
 *             self.mat[x][y] = value
 */
      __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2009, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = 0;
      __pyx_t_12 = 127;
      __Pyx_INCREF(__pyx_kp_u_Invalid_coordinate);
      __pyx_t_11 += 19;
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_coordinate);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_Invalid_coordinate);
      __pyx_t_13 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_item), __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2009, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_12;
      __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_13);
      __pyx_t_13 = 0;
      __Pyx_INCREF(__pyx_kp_u__4);
      __pyx_t_11 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__4);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u__4);
      __pyx_t_13 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2009, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2009, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(0, 2009, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "srctools/_math.pyx":2006
 *         """Set an individual matrix value by x, y position (0-2)."""
 *         cdef int x, y
 *         try:             # <<<<<<<<<<<<<<
 *             x, y = item
 *         except (ValueError, TypeError, OverflowError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "srctools/_math.pyx":2010
 *         except (ValueError, TypeError, OverflowError):
 *             raise KeyError(f'Invalid coordinate {item!r}' '!')
 *         if 0 <= x < 3 and 0 <= y < 3:             # <<<<<<<<<<<<<<
 *             self.mat[x][y] = value
 *         else:
 */
  __pyx_t_15 = (0 <= __pyx_v_x);
  if (__pyx_t_15) {
    __pyx_t_15 = (__pyx_v_x < 3);
  }
  __pyx_t_16 = (__pyx_t_15 != 0);
  if (__pyx_t_16) {
  } else {
    __pyx_t_14 = __pyx_t_16;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_16 = (0 <= __pyx_v_y);
  if (__pyx_t_16) {
    __pyx_t_16 = (__pyx_v_y < 3);
  }
  __pyx_t_15 = (__pyx_t_16 != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L14_bool_binop_done:;
  if (likely(__pyx_t_14)) {

    /* "srctools/_math.pyx":2011
 *             raise KeyError(f'Invalid coordinate {item!r}' '!')
 *         if 0 <= x < 3 and 0 <= y < 3:
 *             self.mat[x][y] = value             # <<<<<<<<<<<<<<
 *         else:
 *             raise KeyError(f'Invalid coordinate {x}, {y}' '!')
 */
    ((__pyx_v_self->mat[__pyx_v_x])[__pyx_v_y]) = __pyx_v_value;

    /* "srctools/_math.pyx":2010
 *         except (ValueError, TypeError, OverflowError):
 *             raise KeyError(f'Invalid coordinate {item!r}' '!')
 *         if 0 <= x < 3 and 0 <= y < 3:             # <<<<<<<<<<<<<<
 *             self.mat[x][y] = value
 *         else:
 */
    goto __pyx_L13;
  }

  /* "srctools/_math.pyx":2013
 *             self.mat[x][y] = value
 *         else:
 *             raise KeyError(f'Invalid coordinate {x}, {y}' '!')             # <<<<<<<<<<<<<<
 * 
 *     def to_angle(self):
 */
  /*else*/ {
    __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2013, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = 0;
    __pyx_t_12 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_coordinate);
    __pyx_t_11 += 19;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_coordinate);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Invalid_coordinate);
    __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_x, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2013, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_kp_u__8);
    __pyx_t_11 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__8);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u__8);
    __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_y, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2013, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_kp_u__4);
    __pyx_t_11 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__4);
    PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_kp_u__4);
    __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_6, 5, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2013, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2013, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 2013, __pyx_L1_error)
  }
  __pyx_L13:;

  /* "srctools/_math.pyx":2003
 *             raise KeyError(f'Invalid coordinate {x}, {y}' '!')
 * 
 *     def __setitem__(self, item, double value):             # <<<<<<<<<<<<<<
 *         """Set an individual matrix value by x, y position (0-2)."""
 *         cdef int x, y
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("srctools._math.Matrix.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2015
 *             raise KeyError(f'Invalid coordinate {x}, {y}' '!')
 * 
 *     def to_angle(self):             # <<<<<<<<<<<<<<
 *         """Return an Euler angle replicating this rotation."""
 *         cdef Angle ang = Angle.__new__(Angle)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_37to_angle(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_36to_angle[] = "Matrix.to_angle(self)\nReturn an Euler angle replicating this rotation.";
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_37to_angle(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_angle (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_36to_angle(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6Matrix_36to_angle(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self) {
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_angle", 0);

  /* "srctools/_math.pyx":2017
 *     def to_angle(self):
 *         """Return an Euler angle replicating this rotation."""
 *         cdef Angle ang = Angle.__new__(Angle)             # <<<<<<<<<<<<<<
 *         _mat_to_angle(&ang.val, self.mat)
 *         return ang
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Angle(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Angle), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2017, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ang = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":2018
 *         """Return an Euler angle replicating this rotation."""
 *         cdef Angle ang = Angle.__new__(Angle)
 *         _mat_to_angle(&ang.val, self.mat)             # <<<<<<<<<<<<<<
 *         return ang
 * 
 */
  __pyx_f_8srctools_5_math__mat_to_angle((&__pyx_v_ang->val), __pyx_v_self->mat);

  /* "srctools/_math.pyx":2019
 *         cdef Angle ang = Angle.__new__(Angle)
 *         _mat_to_angle(&ang.val, self.mat)
 *         return ang             # <<<<<<<<<<<<<<
 * 
 *     def transpose(self) -> 'Matrix':
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ang));
  __pyx_r = ((PyObject *)__pyx_v_ang);
  goto __pyx_L0;

  /* "srctools/_math.pyx":2015
 *             raise KeyError(f'Invalid coordinate {x}, {y}' '!')
 * 
 *     def to_angle(self):             # <<<<<<<<<<<<<<
 *         """Return an Euler angle replicating this rotation."""
 *         cdef Angle ang = Angle.__new__(Angle)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Matrix.to_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ang);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2021
 *         return ang
 * 
 *     def transpose(self) -> 'Matrix':             # <<<<<<<<<<<<<<
 *         """Return the transpose of this matrix."""
 *         cdef Matrix rot = Matrix.__new__(Matrix)
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_6Matrix_39transpose(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_38transpose[] = "Matrix.transpose(self) -> u'Matrix'\nReturn the transpose of this matrix.";
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_6Matrix_39transpose(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transpose (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_38transpose(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_6Matrix_38transpose(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self) {
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_rot = 0;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double *__pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transpose", 0);

  /* "srctools/_math.pyx":2023
 *     def transpose(self) -> 'Matrix':
 *         """Return the transpose of this matrix."""
 *         cdef Matrix rot = Matrix.__new__(Matrix)             # <<<<<<<<<<<<<<
 * 
 *         rot.mat[0] = self.mat[0][0], self.mat[1][0], self.mat[2][0]
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Matrix(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Matrix), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2023, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_rot = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":2025
 *         cdef Matrix rot = Matrix.__new__(Matrix)
 * 
 *         rot.mat[0] = self.mat[0][0], self.mat[1][0], self.mat[2][0]             # <<<<<<<<<<<<<<
 *         rot.mat[1] = self.mat[0][1], self.mat[1][1], self.mat[2][1]
 *         rot.mat[2] = self.mat[0][2], self.mat[1][2], self.mat[2][2]
 */
  __pyx_t_2 = (__pyx_v_rot->mat[0]);
  __pyx_t_3 = ((__pyx_v_self->mat[0])[0]);
  __pyx_t_4 = ((__pyx_v_self->mat[1])[0]);
  __pyx_t_5 = ((__pyx_v_self->mat[2])[0]);
  (__pyx_t_2[0]) = __pyx_t_3;
  (__pyx_t_2[1]) = __pyx_t_4;
  (__pyx_t_2[2]) = __pyx_t_5;

  /* "srctools/_math.pyx":2026
 * 
 *         rot.mat[0] = self.mat[0][0], self.mat[1][0], self.mat[2][0]
 *         rot.mat[1] = self.mat[0][1], self.mat[1][1], self.mat[2][1]             # <<<<<<<<<<<<<<
 *         rot.mat[2] = self.mat[0][2], self.mat[1][2], self.mat[2][2]
 * 
 */
  __pyx_t_2 = (__pyx_v_rot->mat[1]);
  __pyx_t_5 = ((__pyx_v_self->mat[0])[1]);
  __pyx_t_4 = ((__pyx_v_self->mat[1])[1]);
  __pyx_t_3 = ((__pyx_v_self->mat[2])[1]);
  (__pyx_t_2[0]) = __pyx_t_5;
  (__pyx_t_2[1]) = __pyx_t_4;
  (__pyx_t_2[2]) = __pyx_t_3;

  /* "srctools/_math.pyx":2027
 *         rot.mat[0] = self.mat[0][0], self.mat[1][0], self.mat[2][0]
 *         rot.mat[1] = self.mat[0][1], self.mat[1][1], self.mat[2][1]
 *         rot.mat[2] = self.mat[0][2], self.mat[1][2], self.mat[2][2]             # <<<<<<<<<<<<<<
 * 
 *         return rot
 */
  __pyx_t_2 = (__pyx_v_rot->mat[2]);
  __pyx_t_3 = ((__pyx_v_self->mat[0])[2]);
  __pyx_t_4 = ((__pyx_v_self->mat[1])[2]);
  __pyx_t_5 = ((__pyx_v_self->mat[2])[2]);
  (__pyx_t_2[0]) = __pyx_t_3;
  (__pyx_t_2[1]) = __pyx_t_4;
  (__pyx_t_2[2]) = __pyx_t_5;

  /* "srctools/_math.pyx":2029
 *         rot.mat[2] = self.mat[0][2], self.mat[1][2], self.mat[2][2]
 * 
 *         return rot             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_rot));
  __pyx_r = __pyx_v_rot;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2021
 *         return ang
 * 
 *     def transpose(self) -> 'Matrix':             # <<<<<<<<<<<<<<
 *         """Return the transpose of this matrix."""
 *         cdef Matrix rot = Matrix.__new__(Matrix)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Matrix.transpose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rot);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2032
 * 
 *     @classmethod
 *     def from_basis(             # <<<<<<<<<<<<<<
 *         cls, *,
 *         x: Vec=None,
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_6Matrix_41from_basis(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_40from_basis[] = "Matrix.from_basis(type cls, *, Vec x: Vec = None, Vec y: Vec = None, Vec z: Vec = None) -> u'Matrix'\nConstruct a matrix from at least two basis vectors.\n\n        The third is computed, if not provided.\n        ";
static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pw_8srctools_5_math_6Matrix_41from_basis(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_x = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_y = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_z = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_basis (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};

    /* "srctools/_math.pyx":2034
 *     def from_basis(
 *         cls, *,
 *         x: Vec=None,             # <<<<<<<<<<<<<<
 *         y: Vec=None,
 *         z: Vec=None,
 */
    values[0] = (PyObject *)((struct __pyx_obj_8srctools_5_math_Vec *)Py_None);

    /* "srctools/_math.pyx":2035
 *         cls, *,
 *         x: Vec=None,
 *         y: Vec=None,             # <<<<<<<<<<<<<<
 *         z: Vec=None,
 *     ) -> 'Matrix':
 */
    values[1] = (PyObject *)((struct __pyx_obj_8srctools_5_math_Vec *)Py_None);

    /* "srctools/_math.pyx":2036
 *         x: Vec=None,
 *         y: Vec=None,
 *         z: Vec=None,             # <<<<<<<<<<<<<<
 *     ) -> 'Matrix':
 *         """Construct a matrix from at least two basis vectors.
 */
    values[2] = (PyObject *)((struct __pyx_obj_8srctools_5_math_Vec *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      if (kw_args > 0 && likely(kw_args <= 3)) {
        Py_ssize_t index;
        for (index = 0; index < 3 && kw_args > 0; index++) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, 0, "from_basis") < 0)) __PYX_ERR(0, 2032, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 0) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_x = ((struct __pyx_obj_8srctools_5_math_Vec *)values[0]);
    __pyx_v_y = ((struct __pyx_obj_8srctools_5_math_Vec *)values[1]);
    __pyx_v_z = ((struct __pyx_obj_8srctools_5_math_Vec *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_basis", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2032, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Matrix.from_basis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8srctools_5_math_Vec, 1, "x", 0))) __PYX_ERR(0, 2034, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_8srctools_5_math_Vec, 1, "y", 0))) __PYX_ERR(0, 2035, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_z), __pyx_ptype_8srctools_5_math_Vec, 1, "z", 0))) __PYX_ERR(0, 2036, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_40from_basis(((PyTypeObject*)__pyx_v_cls), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* "srctools/_math.pyx":2032
 * 
 *     @classmethod
 *     def from_basis(             # <<<<<<<<<<<<<<
 *         cls, *,
 *         x: Vec=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_pf_8srctools_5_math_6Matrix_40from_basis(PyTypeObject *__pyx_v_cls, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_x, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_y, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_z) {
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_mat = 0;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_basis", 0);

  /* "srctools/_math.pyx":2042
 *         The third is computed, if not provided.
 *         """
 *         cdef Matrix mat = Matrix.__new__(cls)             # <<<<<<<<<<<<<<
 *         _mat_from_basis(mat.mat, x, y, z)
 *         return mat
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8srctools_5_math_Matrix), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_cls)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_cls));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8srctools_5_math_Matrix))))) __PYX_ERR(0, 2042, __pyx_L1_error)
  __pyx_v_mat = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":2043
 *         """
 *         cdef Matrix mat = Matrix.__new__(cls)
 *         _mat_from_basis(mat.mat, x, y, z)             # <<<<<<<<<<<<<<
 *         return mat
 * 
 */
  __pyx_t_4 = __pyx_f_8srctools_5_math__mat_from_basis(__pyx_v_mat->mat, __pyx_v_x, __pyx_v_y, __pyx_v_z); if (unlikely(__pyx_t_4 == ((int)1))) __PYX_ERR(0, 2043, __pyx_L1_error)

  /* "srctools/_math.pyx":2044
 *         cdef Matrix mat = Matrix.__new__(cls)
 *         _mat_from_basis(mat.mat, x, y, z)
 *         return mat             # <<<<<<<<<<<<<<
 * 
 *     def __matmul__(first, second):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = __pyx_v_mat;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2032
 * 
 *     @classmethod
 *     def from_basis(             # <<<<<<<<<<<<<<
 *         cls, *,
 *         x: Vec=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("srctools._math.Matrix.from_basis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2046
 *         return mat
 * 
 *     def __matmul__(first, second):             # <<<<<<<<<<<<<<
 *         """Rotate two objects."""
 *         cdef mat_t temp, temp2
 */

/* Python wrapper */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_43__matmul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second); /*proto*/
static char __pyx_doc_8srctools_5_math_6Matrix_42__matmul__[] = "Rotate two objects.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_6Matrix_42__matmul__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_43__matmul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__matmul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_42__matmul__(((PyObject *)__pyx_v_first), ((PyObject *)__pyx_v_second));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_42__matmul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second) {
  __pyx_t_8srctools_5_math_mat_t __pyx_v_temp;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vec = 0;
  struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_mat = 0;
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__matmul__", 0);

  /* "srctools/_math.pyx":2052
 *         cdef Matrix mat
 *         cdef Angle ang
 *         if isinstance(first, Matrix):             # <<<<<<<<<<<<<<
 *             mat = Matrix.__new__(Matrix)
 *             memcpy(mat.mat, (<Matrix>first).mat, sizeof(mat_t))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_first, __pyx_ptype_8srctools_5_math_Matrix); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":2053
 *         cdef Angle ang
 *         if isinstance(first, Matrix):
 *             mat = Matrix.__new__(Matrix)             # <<<<<<<<<<<<<<
 *             memcpy(mat.mat, (<Matrix>first).mat, sizeof(mat_t))
 *             if isinstance(second, Matrix):
 */
    __pyx_t_3 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Matrix(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Matrix), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2053, __pyx_L1_error)
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_v_mat = ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "srctools/_math.pyx":2054
 *         if isinstance(first, Matrix):
 *             mat = Matrix.__new__(Matrix)
 *             memcpy(mat.mat, (<Matrix>first).mat, sizeof(mat_t))             # <<<<<<<<<<<<<<
 *             if isinstance(second, Matrix):
 *                 mat_mul(mat.mat, (<Matrix>second).mat)
 */
    (void)(memcpy(__pyx_v_mat->mat, ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_first)->mat, (sizeof(__pyx_t_8srctools_5_math_mat_t))));

    /* "srctools/_math.pyx":2055
 *             mat = Matrix.__new__(Matrix)
 *             memcpy(mat.mat, (<Matrix>first).mat, sizeof(mat_t))
 *             if isinstance(second, Matrix):             # <<<<<<<<<<<<<<
 *                 mat_mul(mat.mat, (<Matrix>second).mat)
 *             elif isinstance(second, Angle):
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_second, __pyx_ptype_8srctools_5_math_Matrix); 
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":2056
 *             memcpy(mat.mat, (<Matrix>first).mat, sizeof(mat_t))
 *             if isinstance(second, Matrix):
 *                 mat_mul(mat.mat, (<Matrix>second).mat)             # <<<<<<<<<<<<<<
 *             elif isinstance(second, Angle):
 *                 _mat_from_angle(temp, &(<Angle>second).val)
 */
      __pyx_f_8srctools_5_math_mat_mul(__pyx_v_mat->mat, ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_second)->mat);

      /* "srctools/_math.pyx":2055
 *             mat = Matrix.__new__(Matrix)
 *             memcpy(mat.mat, (<Matrix>first).mat, sizeof(mat_t))
 *             if isinstance(second, Matrix):             # <<<<<<<<<<<<<<
 *                 mat_mul(mat.mat, (<Matrix>second).mat)
 *             elif isinstance(second, Angle):
 */
      goto __pyx_L4;
    }

    /* "srctools/_math.pyx":2057
 *             if isinstance(second, Matrix):
 *                 mat_mul(mat.mat, (<Matrix>second).mat)
 *             elif isinstance(second, Angle):             # <<<<<<<<<<<<<<
 *                 _mat_from_angle(temp, &(<Angle>second).val)
 *                 mat_mul(mat.mat, temp)
 */
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_second, __pyx_ptype_8srctools_5_math_Angle); 
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":2058
 *                 mat_mul(mat.mat, (<Matrix>second).mat)
 *             elif isinstance(second, Angle):
 *                 _mat_from_angle(temp, &(<Angle>second).val)             # <<<<<<<<<<<<<<
 *                 mat_mul(mat.mat, temp)
 *             else:
 */
      __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_temp, (&((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_second)->val));

      /* "srctools/_math.pyx":2059
 *             elif isinstance(second, Angle):
 *                 _mat_from_angle(temp, &(<Angle>second).val)
 *                 mat_mul(mat.mat, temp)             # <<<<<<<<<<<<<<
 *             else:
 *                 return NotImplemented
 */
      __pyx_f_8srctools_5_math_mat_mul(__pyx_v_mat->mat, __pyx_v_temp);

      /* "srctools/_math.pyx":2057
 *             if isinstance(second, Matrix):
 *                 mat_mul(mat.mat, (<Matrix>second).mat)
 *             elif isinstance(second, Angle):             # <<<<<<<<<<<<<<
 *                 _mat_from_angle(temp, &(<Angle>second).val)
 *                 mat_mul(mat.mat, temp)
 */
      goto __pyx_L4;
    }

    /* "srctools/_math.pyx":2061
 *                 mat_mul(mat.mat, temp)
 *             else:
 *                 return NotImplemented             # <<<<<<<<<<<<<<
 *             return mat
 *         elif isinstance(second, Matrix):
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_builtin_NotImplemented);
      __pyx_r = __pyx_builtin_NotImplemented;
      goto __pyx_L0;
    }
    __pyx_L4:;

    /* "srctools/_math.pyx":2062
 *             else:
 *                 return NotImplemented
 *             return mat             # <<<<<<<<<<<<<<
 *         elif isinstance(second, Matrix):
 *             if isinstance(first, Vec):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_mat));
    __pyx_r = ((PyObject *)__pyx_v_mat);
    goto __pyx_L0;

    /* "srctools/_math.pyx":2052
 *         cdef Matrix mat
 *         cdef Angle ang
 *         if isinstance(first, Matrix):             # <<<<<<<<<<<<<<
 *             mat = Matrix.__new__(Matrix)
 *             memcpy(mat.mat, (<Matrix>first).mat, sizeof(mat_t))
 */
  }

  /* "srctools/_math.pyx":2063
 *                 return NotImplemented
 *             return mat
 *         elif isinstance(second, Matrix):             # <<<<<<<<<<<<<<
 *             if isinstance(first, Vec):
 *                 vec = Vec.__new__(Vec)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_second, __pyx_ptype_8srctools_5_math_Matrix); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "srctools/_math.pyx":2064
 *             return mat
 *         elif isinstance(second, Matrix):
 *             if isinstance(first, Vec):             # <<<<<<<<<<<<<<
 *                 vec = Vec.__new__(Vec)
 *                 vec_rot(&vec.val, (<Matrix>second).mat)
 */
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_first, __pyx_ptype_8srctools_5_math_Vec); 
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":2065
 *         elif isinstance(second, Matrix):
 *             if isinstance(first, Vec):
 *                 vec = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *                 vec_rot(&vec.val, (<Matrix>second).mat)
 *                 return vec
 */
      __pyx_t_3 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2065, __pyx_L1_error)
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __pyx_v_vec = ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "srctools/_math.pyx":2066
 *             if isinstance(first, Vec):
 *                 vec = Vec.__new__(Vec)
 *                 vec_rot(&vec.val, (<Matrix>second).mat)             # <<<<<<<<<<<<<<
 *                 return vec
 *             elif isinstance(first, Angle):
 */
      __pyx_f_8srctools_5_math_vec_rot((&__pyx_v_vec->val), ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_second)->mat);

      /* "srctools/_math.pyx":2067
 *                 vec = Vec.__new__(Vec)
 *                 vec_rot(&vec.val, (<Matrix>second).mat)
 *                 return vec             # <<<<<<<<<<<<<<
 *             elif isinstance(first, Angle):
 *                 ang = Angle.__new__(Angle)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_vec));
      __pyx_r = ((PyObject *)__pyx_v_vec);
      goto __pyx_L0;

      /* "srctools/_math.pyx":2064
 *             return mat
 *         elif isinstance(second, Matrix):
 *             if isinstance(first, Vec):             # <<<<<<<<<<<<<<
 *                 vec = Vec.__new__(Vec)
 *                 vec_rot(&vec.val, (<Matrix>second).mat)
 */
    }

    /* "srctools/_math.pyx":2068
 *                 vec_rot(&vec.val, (<Matrix>second).mat)
 *                 return vec
 *             elif isinstance(first, Angle):             # <<<<<<<<<<<<<<
 *                 ang = Angle.__new__(Angle)
 *                 _mat_from_angle(temp, &(<Angle>first).val)
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_first, __pyx_ptype_8srctools_5_math_Angle); 
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":2069
 *                 return vec
 *             elif isinstance(first, Angle):
 *                 ang = Angle.__new__(Angle)             # <<<<<<<<<<<<<<
 *                 _mat_from_angle(temp, &(<Angle>first).val)
 *                 mat_mul(temp, (<Matrix>second).mat)
 */
      __pyx_t_3 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Angle(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Angle), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2069, __pyx_L1_error)
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __pyx_v_ang = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "srctools/_math.pyx":2070
 *             elif isinstance(first, Angle):
 *                 ang = Angle.__new__(Angle)
 *                 _mat_from_angle(temp, &(<Angle>first).val)             # <<<<<<<<<<<<<<
 *                 mat_mul(temp, (<Matrix>second).mat)
 *                 _mat_to_angle(&ang.val, temp)
 */
      __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_temp, (&((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_first)->val));

      /* "srctools/_math.pyx":2071
 *                 ang = Angle.__new__(Angle)
 *                 _mat_from_angle(temp, &(<Angle>first).val)
 *                 mat_mul(temp, (<Matrix>second).mat)             # <<<<<<<<<<<<<<
 *                 _mat_to_angle(&ang.val, temp)
 *                 return ang
 */
      __pyx_f_8srctools_5_math_mat_mul(__pyx_v_temp, ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_second)->mat);

      /* "srctools/_math.pyx":2072
 *                 _mat_from_angle(temp, &(<Angle>first).val)
 *                 mat_mul(temp, (<Matrix>second).mat)
 *                 _mat_to_angle(&ang.val, temp)             # <<<<<<<<<<<<<<
 *                 return ang
 *             else:
 */
      __pyx_f_8srctools_5_math__mat_to_angle((&__pyx_v_ang->val), __pyx_v_temp);

      /* "srctools/_math.pyx":2073
 *                 mat_mul(temp, (<Matrix>second).mat)
 *                 _mat_to_angle(&ang.val, temp)
 *                 return ang             # <<<<<<<<<<<<<<
 *             else:
 *                 return NotImplemented
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_ang));
      __pyx_r = ((PyObject *)__pyx_v_ang);
      goto __pyx_L0;

      /* "srctools/_math.pyx":2068
 *                 vec_rot(&vec.val, (<Matrix>second).mat)
 *                 return vec
 *             elif isinstance(first, Angle):             # <<<<<<<<<<<<<<
 *                 ang = Angle.__new__(Angle)
 *                 _mat_from_angle(temp, &(<Angle>first).val)
 */
    }

    /* "srctools/_math.pyx":2075
 *                 return ang
 *             else:
 *                 return NotImplemented             # <<<<<<<<<<<<<<
 *         else:
 *             raise SystemError('Neither are Matrices?')
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_builtin_NotImplemented);
      __pyx_r = __pyx_builtin_NotImplemented;
      goto __pyx_L0;
    }

    /* "srctools/_math.pyx":2063
 *                 return NotImplemented
 *             return mat
 *         elif isinstance(second, Matrix):             # <<<<<<<<<<<<<<
 *             if isinstance(first, Vec):
 *                 vec = Vec.__new__(Vec)
 */
  }

  /* "srctools/_math.pyx":2077
 *                 return NotImplemented
 *         else:
 *             raise SystemError('Neither are Matrices?')             # <<<<<<<<<<<<<<
 * 
 *     def __imatmul__(self, other):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_SystemError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2077, __pyx_L1_error)
  }

  /* "srctools/_math.pyx":2046
 *         return mat
 * 
 *     def __matmul__(first, second):             # <<<<<<<<<<<<<<
 *         """Rotate two objects."""
 *         cdef mat_t temp, temp2
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("srctools._math.Matrix.__matmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XDECREF((PyObject *)__pyx_v_ang);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

/* "srctools/_math.pyx":2079
 *             raise SystemError('Neither are Matrices?')
 * 
 *     def __imatmul__(self, other):             # <<<<<<<<<<<<<<
 *         cdef mat_t temp
 *         if isinstance(other, Matrix):
 */

/* Python wrapper */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_45__imatmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_6Matrix_45__imatmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__imatmul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6Matrix_44__imatmul__(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_8srctools_5_math_6Matrix_44__imatmul__(struct __pyx_obj_8srctools_5_math_Matrix *__pyx_v_self, PyObject *__pyx_v_other) {
  __pyx_t_8srctools_5_math_mat_t __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__imatmul__", 0);

  /* "srctools/_math.pyx":2081
 *     def __imatmul__(self, other):
 *         cdef mat_t temp
 *         if isinstance(other, Matrix):             # <<<<<<<<<<<<<<
 *             mat_mul(self.mat, (<Matrix>other).mat)
 *             return self
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8srctools_5_math_Matrix); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":2082
 *         cdef mat_t temp
 *         if isinstance(other, Matrix):
 *             mat_mul(self.mat, (<Matrix>other).mat)             # <<<<<<<<<<<<<<
 *             return self
 *         elif isinstance(other, Angle):
 */
    __pyx_f_8srctools_5_math_mat_mul(__pyx_v_self->mat, ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_other)->mat);

    /* "srctools/_math.pyx":2083
 *         if isinstance(other, Matrix):
 *             mat_mul(self.mat, (<Matrix>other).mat)
 *             return self             # <<<<<<<<<<<<<<
 *         elif isinstance(other, Angle):
 *             _mat_from_angle(temp, &(<Angle>other).val)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "srctools/_math.pyx":2081
 *     def __imatmul__(self, other):
 *         cdef mat_t temp
 *         if isinstance(other, Matrix):             # <<<<<<<<<<<<<<
 *             mat_mul(self.mat, (<Matrix>other).mat)
 *             return self
 */
  }

  /* "srctools/_math.pyx":2084
 *             mat_mul(self.mat, (<Matrix>other).mat)
 *             return self
 *         elif isinstance(other, Angle):             # <<<<<<<<<<<<<<
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             mat_mul(self.mat, temp)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8srctools_5_math_Angle); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":2085
 *             return self
 *         elif isinstance(other, Angle):
 *             _mat_from_angle(temp, &(<Angle>other).val)             # <<<<<<<<<<<<<<
 *             mat_mul(self.mat, temp)
 *             return self
 */
    __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_temp, (&((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_other)->val));

    /* "srctools/_math.pyx":2086
 *         elif isinstance(other, Angle):
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             mat_mul(self.mat, temp)             # <<<<<<<<<<<<<<
 *             return self
 *         else:
 */
    __pyx_f_8srctools_5_math_mat_mul(__pyx_v_self->mat, __pyx_v_temp);

    /* "srctools/_math.pyx":2087
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             mat_mul(self.mat, temp)
 *             return self             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "srctools/_math.pyx":2084
 *             mat_mul(self.mat, (<Matrix>other).mat)
 *             return self
 *         elif isinstance(other, Angle):             # <<<<<<<<<<<<<<
 *             _mat_from_angle(temp, &(<Angle>other).val)
 *             mat_mul(self.mat, temp)
 */
  }

  /* "srctools/_math.pyx":2089
 *             return self
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }

  /* "srctools/_math.pyx":2079
 *             raise SystemError('Neither are Matrices?')
 * 
 *     def __imatmul__(self, other):             # <<<<<<<<<<<<<<
 *         cdef mat_t temp
 *         if isinstance(other, Matrix):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

/* "srctools/_math.pyx":2103
 *     """
 * 
 *     def __init__(self, pitch=0.0, yaw=0.0, roll=0.0) -> None:             # <<<<<<<<<<<<<<
 *         """Create an Angle.
 * 
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_5Angle_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle___init__[] = "Create an Angle.\n\n        All values are converted to Floats automatically.\n        If no value is given, that axis will be set to 0.\n        An iterable can be passed in (as the pitch argument), which will be\n        used for pitch, yaw, and roll. This includes Vectors and other Angles.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_5Angle___init__;
#endif
static int __pyx_pw_8srctools_5_math_5Angle_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pitch = 0;
  PyObject *__pyx_v_yaw = 0;
  PyObject *__pyx_v_roll = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pitch,&__pyx_n_s_yaw,&__pyx_n_s_roll,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_float_0_0);
    values[1] = ((PyObject *)__pyx_float_0_0);
    values[2] = ((PyObject *)__pyx_float_0_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pitch);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_yaw);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_roll);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2103, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pitch = values[0];
    __pyx_v_yaw = values[1];
    __pyx_v_roll = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2103, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Angle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle___init__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self), __pyx_v_pitch, __pyx_v_yaw, __pyx_v_roll);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_5Angle___init__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, PyObject *__pyx_v_pitch, PyObject *__pyx_v_yaw, PyObject *__pyx_v_roll) {
  PyObject *__pyx_v_tup = 0;
  PyObject *__pyx_v_it = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "srctools/_math.pyx":2112
 *         """
 *         cdef tuple tup
 *         if isinstance(pitch, float) or isinstance(pitch, int):             # <<<<<<<<<<<<<<
 *             self.val.x = norm_ang(pitch)
 *             self.val.y = norm_ang(yaw)
 */
  __pyx_t_2 = PyFloat_Check(__pyx_v_pitch); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyInt_Check(__pyx_v_pitch); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":2113
 *         cdef tuple tup
 *         if isinstance(pitch, float) or isinstance(pitch, int):
 *             self.val.x = norm_ang(pitch)             # <<<<<<<<<<<<<<
 *             self.val.y = norm_ang(yaw)
 *             self.val.z = norm_ang(roll)
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_pitch); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2113, __pyx_L1_error)
    __pyx_v_self->val.x = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);

    /* "srctools/_math.pyx":2114
 *         if isinstance(pitch, float) or isinstance(pitch, int):
 *             self.val.x = norm_ang(pitch)
 *             self.val.y = norm_ang(yaw)             # <<<<<<<<<<<<<<
 *             self.val.z = norm_ang(roll)
 *         elif isinstance(pitch, Angle):
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_yaw); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2114, __pyx_L1_error)
    __pyx_v_self->val.y = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);

    /* "srctools/_math.pyx":2115
 *             self.val.x = norm_ang(pitch)
 *             self.val.y = norm_ang(yaw)
 *             self.val.z = norm_ang(roll)             # <<<<<<<<<<<<<<
 *         elif isinstance(pitch, Angle):
 *             self.val.x = (<Angle>pitch).val.x
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_roll); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2115, __pyx_L1_error)
    __pyx_v_self->val.z = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);

    /* "srctools/_math.pyx":2112
 *         """
 *         cdef tuple tup
 *         if isinstance(pitch, float) or isinstance(pitch, int):             # <<<<<<<<<<<<<<
 *             self.val.x = norm_ang(pitch)
 *             self.val.y = norm_ang(yaw)
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":2116
 *             self.val.y = norm_ang(yaw)
 *             self.val.z = norm_ang(roll)
 *         elif isinstance(pitch, Angle):             # <<<<<<<<<<<<<<
 *             self.val.x = (<Angle>pitch).val.x
 *             self.val.y = (<Angle>pitch).val.y
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_pitch, __pyx_ptype_8srctools_5_math_Angle); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":2117
 *             self.val.z = norm_ang(roll)
 *         elif isinstance(pitch, Angle):
 *             self.val.x = (<Angle>pitch).val.x             # <<<<<<<<<<<<<<
 *             self.val.y = (<Angle>pitch).val.y
 *             self.val.z = (<Angle>pitch).val.z
 */
    __pyx_t_4 = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_pitch)->val.x;
    __pyx_v_self->val.x = __pyx_t_4;

    /* "srctools/_math.pyx":2118
 *         elif isinstance(pitch, Angle):
 *             self.val.x = (<Angle>pitch).val.x
 *             self.val.y = (<Angle>pitch).val.y             # <<<<<<<<<<<<<<
 *             self.val.z = (<Angle>pitch).val.z
 *         elif isinstance(pitch, tuple):
 */
    __pyx_t_4 = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_pitch)->val.y;
    __pyx_v_self->val.y = __pyx_t_4;

    /* "srctools/_math.pyx":2119
 *             self.val.x = (<Angle>pitch).val.x
 *             self.val.y = (<Angle>pitch).val.y
 *             self.val.z = (<Angle>pitch).val.z             # <<<<<<<<<<<<<<
 *         elif isinstance(pitch, tuple):
 *             tup = <tuple>pitch
 */
    __pyx_t_4 = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_pitch)->val.z;
    __pyx_v_self->val.z = __pyx_t_4;

    /* "srctools/_math.pyx":2116
 *             self.val.y = norm_ang(yaw)
 *             self.val.z = norm_ang(roll)
 *         elif isinstance(pitch, Angle):             # <<<<<<<<<<<<<<
 *             self.val.x = (<Angle>pitch).val.x
 *             self.val.y = (<Angle>pitch).val.y
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":2120
 *             self.val.y = (<Angle>pitch).val.y
 *             self.val.z = (<Angle>pitch).val.z
 *         elif isinstance(pitch, tuple):             # <<<<<<<<<<<<<<
 *             tup = <tuple>pitch
 *             if len(tup) >= 1:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_pitch); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":2121
 *             self.val.z = (<Angle>pitch).val.z
 *         elif isinstance(pitch, tuple):
 *             tup = <tuple>pitch             # <<<<<<<<<<<<<<
 *             if len(tup) >= 1:
 *                 self.val.x = norm_ang(tup[0])
 */
    __pyx_t_5 = __pyx_v_pitch;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_v_tup = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "srctools/_math.pyx":2122
 *         elif isinstance(pitch, tuple):
 *             tup = <tuple>pitch
 *             if len(tup) >= 1:             # <<<<<<<<<<<<<<
 *                 self.val.x = norm_ang(tup[0])
 *             else:
 */
    if (unlikely(__pyx_v_tup == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 2122, __pyx_L1_error)
    }
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_tup); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2122, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_6 >= 1) != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":2123
 *             tup = <tuple>pitch
 *             if len(tup) >= 1:
 *                 self.val.x = norm_ang(tup[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 self.val.x = 0.0
 */
      if (unlikely(__pyx_v_tup == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 2123, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_tup, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2123, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_self->val.x = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);

      /* "srctools/_math.pyx":2122
 *         elif isinstance(pitch, tuple):
 *             tup = <tuple>pitch
 *             if len(tup) >= 1:             # <<<<<<<<<<<<<<
 *                 self.val.x = norm_ang(tup[0])
 *             else:
 */
      goto __pyx_L6;
    }

    /* "srctools/_math.pyx":2125
 *                 self.val.x = norm_ang(tup[0])
 *             else:
 *                 self.val.x = 0.0             # <<<<<<<<<<<<<<
 * 
 *             if len(tup) >= 2:
 */
    /*else*/ {
      __pyx_v_self->val.x = 0.0;
    }
    __pyx_L6:;

    /* "srctools/_math.pyx":2127
 *                 self.val.x = 0.0
 * 
 *             if len(tup) >= 2:             # <<<<<<<<<<<<<<
 *                 self.val.y = norm_ang(tup[1])
 *             else:
 */
    if (unlikely(__pyx_v_tup == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 2127, __pyx_L1_error)
    }
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_tup); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2127, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_6 >= 2) != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":2128
 * 
 *             if len(tup) >= 2:
 *                 self.val.y = norm_ang(tup[1])             # <<<<<<<<<<<<<<
 *             else:
 *                 self.val.y = norm_ang(yaw)
 */
      if (unlikely(__pyx_v_tup == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 2128, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_tup, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2128, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_self->val.y = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);

      /* "srctools/_math.pyx":2127
 *                 self.val.x = 0.0
 * 
 *             if len(tup) >= 2:             # <<<<<<<<<<<<<<
 *                 self.val.y = norm_ang(tup[1])
 *             else:
 */
      goto __pyx_L7;
    }

    /* "srctools/_math.pyx":2130
 *                 self.val.y = norm_ang(tup[1])
 *             else:
 *                 self.val.y = norm_ang(yaw)             # <<<<<<<<<<<<<<
 * 
 *             if len(tup) >= 3:
 */
    /*else*/ {
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_yaw); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2130, __pyx_L1_error)
      __pyx_v_self->val.y = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);
    }
    __pyx_L7:;

    /* "srctools/_math.pyx":2132
 *                 self.val.y = norm_ang(yaw)
 * 
 *             if len(tup) >= 3:             # <<<<<<<<<<<<<<
 *                 self.val.z = norm_ang(tup[2])
 *             else:
 */
    if (unlikely(__pyx_v_tup == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 2132, __pyx_L1_error)
    }
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_tup); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2132, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_6 >= 3) != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":2133
 * 
 *             if len(tup) >= 3:
 *                 self.val.z = norm_ang(tup[2])             # <<<<<<<<<<<<<<
 *             else:
 *                 self.val.z = norm_ang(roll)
 */
      if (unlikely(__pyx_v_tup == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 2133, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_tup, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2133, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_self->val.z = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);

      /* "srctools/_math.pyx":2132
 *                 self.val.y = norm_ang(yaw)
 * 
 *             if len(tup) >= 3:             # <<<<<<<<<<<<<<
 *                 self.val.z = norm_ang(tup[2])
 *             else:
 */
      goto __pyx_L8;
    }

    /* "srctools/_math.pyx":2135
 *                 self.val.z = norm_ang(tup[2])
 *             else:
 *                 self.val.z = norm_ang(roll)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    /*else*/ {
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_roll); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2135, __pyx_L1_error)
      __pyx_v_self->val.z = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);
    }
    __pyx_L8:;

    /* "srctools/_math.pyx":2120
 *             self.val.y = (<Angle>pitch).val.y
 *             self.val.z = (<Angle>pitch).val.z
 *         elif isinstance(pitch, tuple):             # <<<<<<<<<<<<<<
 *             tup = <tuple>pitch
 *             if len(tup) >= 1:
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":2138
 * 
 *         else:
 *             it = iter(pitch)             # <<<<<<<<<<<<<<
 *             try:
 *                 self.val.x = norm_ang(next(it))
 */
  /*else*/ {
    __pyx_t_5 = PyObject_GetIter(__pyx_v_pitch); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_it = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "srctools/_math.pyx":2139
 *         else:
 *             it = iter(pitch)
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.x = norm_ang(next(it))
 *             except StopIteration:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "srctools/_math.pyx":2140
 *             it = iter(pitch)
 *             try:
 *                 self.val.x = norm_ang(next(it))             # <<<<<<<<<<<<<<
 *             except StopIteration:
 *                 self.val.x = 0.0
 */
        __pyx_t_5 = __Pyx_PyIter_Next(__pyx_v_it); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2140, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2140, __pyx_L9_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_self->val.x = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);

        /* "srctools/_math.pyx":2139
 *         else:
 *             it = iter(pitch)
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.x = norm_ang(next(it))
 *             except StopIteration:
 */
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L14_try_end;
      __pyx_L9_error:;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "srctools/_math.pyx":2141
 *             try:
 *                 self.val.x = norm_ang(next(it))
 *             except StopIteration:             # <<<<<<<<<<<<<<
 *                 self.val.x = 0.0
 *                 self.val.y = norm_ang(yaw)
 */
      __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
      if (__pyx_t_10) {
        __Pyx_AddTraceback("srctools._math.Angle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(0, 2141, __pyx_L11_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_12);

        /* "srctools/_math.pyx":2142
 *                 self.val.x = norm_ang(next(it))
 *             except StopIteration:
 *                 self.val.x = 0.0             # <<<<<<<<<<<<<<
 *                 self.val.y = norm_ang(yaw)
 *                 self.val.z = norm_ang(roll)
 */
        __pyx_v_self->val.x = 0.0;

        /* "srctools/_math.pyx":2143
 *             except StopIteration:
 *                 self.val.x = 0.0
 *                 self.val.y = norm_ang(yaw)             # <<<<<<<<<<<<<<
 *                 self.val.z = norm_ang(roll)
 *                 return
 */
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_yaw); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2143, __pyx_L11_except_error)
        __pyx_v_self->val.y = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);

        /* "srctools/_math.pyx":2144
 *                 self.val.x = 0.0
 *                 self.val.y = norm_ang(yaw)
 *                 self.val.z = norm_ang(roll)             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_roll); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2144, __pyx_L11_except_error)
        __pyx_v_self->val.z = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);

        /* "srctools/_math.pyx":2145
 *                 self.val.y = norm_ang(yaw)
 *                 self.val.z = norm_ang(roll)
 *                 return             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
        __pyx_r = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L12_except_return;
      }
      goto __pyx_L11_except_error;
      __pyx_L11_except_error:;

      /* "srctools/_math.pyx":2139
 *         else:
 *             it = iter(pitch)
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.x = norm_ang(next(it))
 *             except StopIteration:
 */
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L12_except_return:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
      __pyx_L14_try_end:;
    }

    /* "srctools/_math.pyx":2147
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.y = norm_ang(next(it))
 *             except StopIteration:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "srctools/_math.pyx":2148
 * 
 *             try:
 *                 self.val.y = norm_ang(next(it))             # <<<<<<<<<<<<<<
 *             except StopIteration:
 *                 self.val.y = norm_ang(yaw)
 */
        __pyx_t_12 = __Pyx_PyIter_Next(__pyx_v_it); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2148, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2148, __pyx_L17_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_v_self->val.y = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);

        /* "srctools/_math.pyx":2147
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.y = norm_ang(next(it))
 *             except StopIteration:
 */
      }
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L22_try_end;
      __pyx_L17_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "srctools/_math.pyx":2149
 *             try:
 *                 self.val.y = norm_ang(next(it))
 *             except StopIteration:             # <<<<<<<<<<<<<<
 *                 self.val.y = norm_ang(yaw)
 *                 self.val.z = norm_ang(roll)
 */
      __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
      if (__pyx_t_10) {
        __Pyx_AddTraceback("srctools._math.Angle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_11, &__pyx_t_5) < 0) __PYX_ERR(0, 2149, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_5);

        /* "srctools/_math.pyx":2150
 *                 self.val.y = norm_ang(next(it))
 *             except StopIteration:
 *                 self.val.y = norm_ang(yaw)             # <<<<<<<<<<<<<<
 *                 self.val.z = norm_ang(roll)
 *                 return
 */
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_yaw); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2150, __pyx_L19_except_error)
        __pyx_v_self->val.y = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);

        /* "srctools/_math.pyx":2151
 *             except StopIteration:
 *                 self.val.y = norm_ang(yaw)
 *                 self.val.z = norm_ang(roll)             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_roll); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2151, __pyx_L19_except_error)
        __pyx_v_self->val.z = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);

        /* "srctools/_math.pyx":2152
 *                 self.val.y = norm_ang(yaw)
 *                 self.val.z = norm_ang(roll)
 *                 return             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
        __pyx_r = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L20_except_return;
      }
      goto __pyx_L19_except_error;
      __pyx_L19_except_error:;

      /* "srctools/_math.pyx":2147
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.y = norm_ang(next(it))
 *             except StopIteration:
 */
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L20_except_return:;
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L22_try_end:;
    }

    /* "srctools/_math.pyx":2154
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.z = norm_ang(next(it))
 *             except StopIteration:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "srctools/_math.pyx":2155
 * 
 *             try:
 *                 self.val.z = norm_ang(next(it))             # <<<<<<<<<<<<<<
 *             except StopIteration:
 *                 self.val.z = norm_ang(roll)
 */
        __pyx_t_5 = __Pyx_PyIter_Next(__pyx_v_it); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2155, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2155, __pyx_L25_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_self->val.z = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);

        /* "srctools/_math.pyx":2154
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.z = norm_ang(next(it))
 *             except StopIteration:
 */
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L30_try_end;
      __pyx_L25_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "srctools/_math.pyx":2156
 *             try:
 *                 self.val.z = norm_ang(next(it))
 *             except StopIteration:             # <<<<<<<<<<<<<<
 *                 self.val.z = norm_ang(roll)
 * 
 */
      __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
      if (__pyx_t_10) {
        __Pyx_AddTraceback("srctools._math.Angle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(0, 2156, __pyx_L27_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_12);

        /* "srctools/_math.pyx":2157
 *                 self.val.z = norm_ang(next(it))
 *             except StopIteration:
 *                 self.val.z = norm_ang(roll)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self) -> 'Angle':
 */
        __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_roll); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2157, __pyx_L27_except_error)
        __pyx_v_self->val.z = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L26_exception_handled;
      }
      goto __pyx_L27_except_error;
      __pyx_L27_except_error:;

      /* "srctools/_math.pyx":2154
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 self.val.z = norm_ang(next(it))
 *             except StopIteration:
 */
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L26_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_L30_try_end:;
    }
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":2103
 *     """
 * 
 *     def __init__(self, pitch=0.0, yaw=0.0, roll=0.0) -> None:             # <<<<<<<<<<<<<<
 *         """Create an Angle.
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("srctools._math.Angle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_it);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2159
 *                 self.val.z = norm_ang(roll)
 * 
 *     def copy(self) -> 'Angle':             # <<<<<<<<<<<<<<
 *         """Create a duplicate of this angle."""
 *         return _angle(self.val.x, self.val.y, self.val.z)
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pw_8srctools_5_math_5Angle_3copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_2copy[] = "Angle.copy(self) -> u'Angle'\nCreate a duplicate of this angle.";
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pw_8srctools_5_math_5Angle_3copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_2copy(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pf_8srctools_5_math_5Angle_2copy(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self) {
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "srctools/_math.pyx":2161
 *     def copy(self) -> 'Angle':
 *         """Create a duplicate of this angle."""
 *         return _angle(self.val.x, self.val.y, self.val.z)             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self) -> 'Angle':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_8srctools_5_math__angle(__pyx_v_self->val.x, __pyx_v_self->val.y, __pyx_v_self->val.z)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2159
 *                 self.val.z = norm_ang(roll)
 * 
 *     def copy(self) -> 'Angle':             # <<<<<<<<<<<<<<
 *         """Create a duplicate of this angle."""
 *         return _angle(self.val.x, self.val.y, self.val.z)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Angle.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2163
 *         return _angle(self.val.x, self.val.y, self.val.z)
 * 
 *     def __copy__(self) -> 'Angle':             # <<<<<<<<<<<<<<
 *         """Create a duplicate of this angle."""
 *         return _angle(self.val.x, self.val.y, self.val.z)
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pw_8srctools_5_math_5Angle_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_4__copy__[] = "Angle.__copy__(self) -> u'Angle'\nCreate a duplicate of this angle.";
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pw_8srctools_5_math_5Angle_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_4__copy__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pf_8srctools_5_math_5Angle_4__copy__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self) {
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "srctools/_math.pyx":2165
 *     def __copy__(self) -> 'Angle':
 *         """Create a duplicate of this angle."""
 *         return _angle(self.val.x, self.val.y, self.val.z)             # <<<<<<<<<<<<<<
 * 
 *     def __deepcopy__(self, dict memodict=None) -> 'Angle':
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_8srctools_5_math__angle(__pyx_v_self->val.x, __pyx_v_self->val.y, __pyx_v_self->val.z)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2163
 *         return _angle(self.val.x, self.val.y, self.val.z)
 * 
 *     def __copy__(self) -> 'Angle':             # <<<<<<<<<<<<<<
 *         """Create a duplicate of this angle."""
 *         return _angle(self.val.x, self.val.y, self.val.z)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Angle.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2167
 *         return _angle(self.val.x, self.val.y, self.val.z)
 * 
 *     def __deepcopy__(self, dict memodict=None) -> 'Angle':             # <<<<<<<<<<<<<<
 *         """Create a duplicate of this angle."""
 *         return _angle(self.val.x, self.val.y, self.val.z)
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pw_8srctools_5_math_5Angle_7__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_6__deepcopy__[] = "Angle.__deepcopy__(self, dict memodict=None) -> u'Angle'\nCreate a duplicate of this angle.";
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pw_8srctools_5_math_5Angle_7__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_memodict = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_memodict,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_memodict);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__deepcopy__") < 0)) __PYX_ERR(0, 2167, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_memodict = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__deepcopy__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2167, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Angle.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_memodict), (&PyDict_Type), 1, "memodict", 1))) __PYX_ERR(0, 2167, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_6__deepcopy__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self), __pyx_v_memodict);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pf_8srctools_5_math_5Angle_6__deepcopy__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict) {
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__deepcopy__", 0);

  /* "srctools/_math.pyx":2169
 *     def __deepcopy__(self, dict memodict=None) -> 'Angle':
 *         """Create a duplicate of this angle."""
 *         return _angle(self.val.x, self.val.y, self.val.z)             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_8srctools_5_math__angle(__pyx_v_self->val.x, __pyx_v_self->val.y, __pyx_v_self->val.z)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2167
 *         return _angle(self.val.x, self.val.y, self.val.z)
 * 
 *     def __deepcopy__(self, dict memodict=None) -> 'Angle':             # <<<<<<<<<<<<<<
 *         """Create a duplicate of this angle."""
 *         return _angle(self.val.x, self.val.y, self.val.z)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Angle.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2171
 *         return _angle(self.val.x, self.val.y, self.val.z)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return unpickle_ang, (self.val.x, self.val.y, self.val.z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_9__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_8__reduce__[] = "Angle.__reduce__(self)";
static PyObject *__pyx_pw_8srctools_5_math_5Angle_9__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_8__reduce__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_8__reduce__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "srctools/_math.pyx":2172
 * 
 *     def __reduce__(self):
 *         return unpickle_ang, (self.val.x, self.val.y, self.val.z)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_8srctools_5_math_unpickle_ang);
  __Pyx_GIVEREF(__pyx_v_8srctools_5_math_unpickle_ang);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_8srctools_5_math_unpickle_ang);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2171
 *         return _angle(self.val.x, self.val.y, self.val.z)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return unpickle_ang, (self.val.x, self.val.y, self.val.z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("srctools._math.Angle.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2175
 * 
 *     @classmethod
 *     def from_str(cls, val, double pitch=0.0, double yaw=0.0, double roll=0.0):             # <<<<<<<<<<<<<<
 *         """Convert a string in the form '(4 6 -4)' into an Angle.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_11from_str(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_10from_str[] = "Angle.from_str(type cls, val, double pitch=0.0, double yaw=0.0, double roll=0.0)\nConvert a string in the form '(4 6 -4)' into an Angle.\n\n        If the string is unparsable, this uses the defaults.\n        The string can start with any of the (), {}, [], <> bracket\n        types, or none.\n\n        If the value is already a Angle, a copy will be returned.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_5Angle_11from_str(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_val = 0;
  double __pyx_v_pitch;
  double __pyx_v_yaw;
  double __pyx_v_roll;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_str (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,&__pyx_n_s_pitch,&__pyx_n_s_yaw,&__pyx_n_s_roll,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pitch);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_yaw);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_roll);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_str") < 0)) __PYX_ERR(0, 2175, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_val = values[0];
    if (values[1]) {
      __pyx_v_pitch = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_pitch == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2175, __pyx_L3_error)
    } else {
      __pyx_v_pitch = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_yaw = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_yaw == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2175, __pyx_L3_error)
    } else {
      __pyx_v_yaw = ((double)0.0);
    }
    if (values[3]) {
      __pyx_v_roll = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_roll == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2175, __pyx_L3_error)
    } else {
      __pyx_v_roll = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_str", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2175, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Angle.from_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_10from_str(((PyTypeObject*)__pyx_v_cls), __pyx_v_val, __pyx_v_pitch, __pyx_v_yaw, __pyx_v_roll);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_10from_str(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_val, double __pyx_v_pitch, double __pyx_v_yaw, double __pyx_v_roll) {
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_str", 0);

  /* "srctools/_math.pyx":2184
 *         If the value is already a Angle, a copy will be returned.
 *         """
 *         cdef Angle ang = Angle.__new__(Angle)             # <<<<<<<<<<<<<<
 *         _parse_vec_str(&ang.val, val, pitch, yaw, roll)
 *         ang.val.x = norm_ang(ang.val.x)
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Angle(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Angle), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2184, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ang = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":2185
 *         """
 *         cdef Angle ang = Angle.__new__(Angle)
 *         _parse_vec_str(&ang.val, val, pitch, yaw, roll)             # <<<<<<<<<<<<<<
 *         ang.val.x = norm_ang(ang.val.x)
 *         ang.val.y = norm_ang(ang.val.y)
 */
  __pyx_t_2 = __pyx_f_8srctools_5_math__parse_vec_str((&__pyx_v_ang->val), __pyx_v_val, __pyx_v_pitch, __pyx_v_yaw, __pyx_v_roll); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 2185, __pyx_L1_error)

  /* "srctools/_math.pyx":2186
 *         cdef Angle ang = Angle.__new__(Angle)
 *         _parse_vec_str(&ang.val, val, pitch, yaw, roll)
 *         ang.val.x = norm_ang(ang.val.x)             # <<<<<<<<<<<<<<
 *         ang.val.y = norm_ang(ang.val.y)
 *         ang.val.z = norm_ang(ang.val.z)
 */
  __pyx_v_ang->val.x = __pyx_f_8srctools_5_math_norm_ang(__pyx_v_ang->val.x);

  /* "srctools/_math.pyx":2187
 *         _parse_vec_str(&ang.val, val, pitch, yaw, roll)
 *         ang.val.x = norm_ang(ang.val.x)
 *         ang.val.y = norm_ang(ang.val.y)             # <<<<<<<<<<<<<<
 *         ang.val.z = norm_ang(ang.val.z)
 *         return ang
 */
  __pyx_v_ang->val.y = __pyx_f_8srctools_5_math_norm_ang(__pyx_v_ang->val.y);

  /* "srctools/_math.pyx":2188
 *         ang.val.x = norm_ang(ang.val.x)
 *         ang.val.y = norm_ang(ang.val.y)
 *         ang.val.z = norm_ang(ang.val.z)             # <<<<<<<<<<<<<<
 *         return ang
 * 
 */
  __pyx_v_ang->val.z = __pyx_f_8srctools_5_math_norm_ang(__pyx_v_ang->val.z);

  /* "srctools/_math.pyx":2189
 *         ang.val.y = norm_ang(ang.val.y)
 *         ang.val.z = norm_ang(ang.val.z)
 *         return ang             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ang));
  __pyx_r = ((PyObject *)__pyx_v_ang);
  goto __pyx_L0;

  /* "srctools/_math.pyx":2175
 * 
 *     @classmethod
 *     def from_str(cls, val, double pitch=0.0, double yaw=0.0, double roll=0.0):             # <<<<<<<<<<<<<<
 *         """Convert a string in the form '(4 6 -4)' into an Angle.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Angle.from_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ang);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2192
 * 
 *     @property
 *     def pitch(self) -> float:             # <<<<<<<<<<<<<<
 *         """The Y-axis rotation, performed second."""
 *         return self.val.x
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_5pitch_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_5Angle_5pitch_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_5pitch___get__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_5pitch___get__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "srctools/_math.pyx":2194
 *     def pitch(self) -> float:
 *         """The Y-axis rotation, performed second."""
 *         return self.val.x             # <<<<<<<<<<<<<<
 * 
 *     @pitch.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2192
 * 
 *     @property
 *     def pitch(self) -> float:             # <<<<<<<<<<<<<<
 *         """The Y-axis rotation, performed second."""
 *         return self.val.x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Angle.pitch.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2197
 * 
 *     @pitch.setter
 *     def pitch(self, double pitch) -> None:             # <<<<<<<<<<<<<<
 *         self.val.x = norm_ang(pitch)
 * 
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_5Angle_5pitch_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pitch); /*proto*/
static int __pyx_pw_8srctools_5_math_5Angle_5pitch_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_pitch) {
  double __pyx_v_pitch;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_pitch); {
    __pyx_v_pitch = __pyx_PyFloat_AsDouble(__pyx_arg_pitch); if (unlikely((__pyx_v_pitch == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2197, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Angle.pitch.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_5pitch_2__set__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self), ((double)__pyx_v_pitch));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_5Angle_5pitch_2__set__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, double __pyx_v_pitch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "srctools/_math.pyx":2198
 *     @pitch.setter
 *     def pitch(self, double pitch) -> None:
 *         self.val.x = norm_ang(pitch)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->val.x = __pyx_f_8srctools_5_math_norm_ang(__pyx_v_pitch);

  /* "srctools/_math.pyx":2197
 * 
 *     @pitch.setter
 *     def pitch(self, double pitch) -> None:             # <<<<<<<<<<<<<<
 *         self.val.x = norm_ang(pitch)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2201
 * 
 *     @property
 *     def yaw(self) -> float:             # <<<<<<<<<<<<<<
 *         """The Z-axis rotation, performed last."""
 *         return self.val.y
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_3yaw_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_5Angle_3yaw_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_3yaw___get__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_3yaw___get__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "srctools/_math.pyx":2203
 *     def yaw(self) -> float:
 *         """The Z-axis rotation, performed last."""
 *         return self.val.y             # <<<<<<<<<<<<<<
 * 
 *     @yaw.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2201
 * 
 *     @property
 *     def yaw(self) -> float:             # <<<<<<<<<<<<<<
 *         """The Z-axis rotation, performed last."""
 *         return self.val.y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Angle.yaw.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2206
 * 
 *     @yaw.setter
 *     def yaw(self, double yaw) -> None:             # <<<<<<<<<<<<<<
 *         self.val.y = norm_ang(yaw)
 * 
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_5Angle_3yaw_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_yaw); /*proto*/
static int __pyx_pw_8srctools_5_math_5Angle_3yaw_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_yaw) {
  double __pyx_v_yaw;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_yaw); {
    __pyx_v_yaw = __pyx_PyFloat_AsDouble(__pyx_arg_yaw); if (unlikely((__pyx_v_yaw == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2206, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Angle.yaw.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_3yaw_2__set__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self), ((double)__pyx_v_yaw));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_5Angle_3yaw_2__set__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, double __pyx_v_yaw) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "srctools/_math.pyx":2207
 *     @yaw.setter
 *     def yaw(self, double yaw) -> None:
 *         self.val.y = norm_ang(yaw)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->val.y = __pyx_f_8srctools_5_math_norm_ang(__pyx_v_yaw);

  /* "srctools/_math.pyx":2206
 * 
 *     @yaw.setter
 *     def yaw(self, double yaw) -> None:             # <<<<<<<<<<<<<<
 *         self.val.y = norm_ang(yaw)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2210
 * 
 *     @property
 *     def roll(self) -> float:             # <<<<<<<<<<<<<<
 *         """The X-axis rotation, performed first."""
 *         return self.val.z
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_4roll_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_5Angle_4roll_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_4roll___get__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_4roll___get__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "srctools/_math.pyx":2212
 *     def roll(self) -> float:
 *         """The X-axis rotation, performed first."""
 *         return self.val.z             # <<<<<<<<<<<<<<
 * 
 *     @roll.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2210
 * 
 *     @property
 *     def roll(self) -> float:             # <<<<<<<<<<<<<<
 *         """The X-axis rotation, performed first."""
 *         return self.val.z
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Angle.roll.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2215
 * 
 *     @roll.setter
 *     def roll(self, double roll) -> None:             # <<<<<<<<<<<<<<
 *         self.val.z = norm_ang(roll)
 * 
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_5Angle_4roll_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_roll); /*proto*/
static int __pyx_pw_8srctools_5_math_5Angle_4roll_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_roll) {
  double __pyx_v_roll;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_roll); {
    __pyx_v_roll = __pyx_PyFloat_AsDouble(__pyx_arg_roll); if (unlikely((__pyx_v_roll == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2215, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Angle.roll.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_4roll_2__set__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self), ((double)__pyx_v_roll));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_5Angle_4roll_2__set__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, double __pyx_v_roll) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "srctools/_math.pyx":2216
 *     @roll.setter
 *     def roll(self, double roll) -> None:
 *         self.val.z = norm_ang(roll)             # <<<<<<<<<<<<<<
 * 
 *     def join(self, delim: str=', ') -> str:
 */
  __pyx_v_self->val.z = __pyx_f_8srctools_5_math_norm_ang(__pyx_v_roll);

  /* "srctools/_math.pyx":2215
 * 
 *     @roll.setter
 *     def roll(self, double roll) -> None:             # <<<<<<<<<<<<<<
 *         self.val.z = norm_ang(roll)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2218
 *         self.val.z = norm_ang(roll)
 * 
 *     def join(self, delim: str=', ') -> str:             # <<<<<<<<<<<<<<
 *         """Return a string with all numbers joined by the passed delimiter.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_13join(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_12join[] = "Angle.join(self, unicode delim: str = u', ') -> str\nReturn a string with all numbers joined by the passed delimiter.\n\n        This strips off the .0 if no decimal portion exists.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_5Angle_13join(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_delim = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("join (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_delim,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)__pyx_kp_u__8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delim);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "join") < 0)) __PYX_ERR(0, 2218, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_delim = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("join", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2218, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Angle.join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_delim), (&PyUnicode_Type), 1, "delim", 1))) __PYX_ERR(0, 2218, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_12join(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self), __pyx_v_delim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_12join(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, PyObject *__pyx_v_delim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("join", 0);

  /* "srctools/_math.pyx":2223
 *         This strips off the .0 if no decimal portion exists.
 *         """
 *         return f'{self.val.x:g}{delim}{self.val.y:g}{delim}{self.val.z:g}'             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_delim); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_5, __pyx_n_u_g); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_delim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2218
 *         self.val.z = norm_ang(roll)
 * 
 *     def join(self, delim: str=', ') -> str:             # <<<<<<<<<<<<<<
 *         """Return a string with all numbers joined by the passed delimiter.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("srctools._math.Angle.join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2225
 *         return f'{self.val.x:g}{delim}{self.val.y:g}{delim}{self.val.z:g}'
 * 
 *     def __str__(self) -> str:             # <<<<<<<<<<<<<<
 *         """Return the values, separated by spaces.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_15__str__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_14__str__[] = "Return the values, separated by spaces.\n\n        This is the main format in Valve's file formats, though identical to\n        vectors.\n        This strips off the .0 if no decimal portion exists.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_5Angle_14__str__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_5Angle_15__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_14__str__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_14__str__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "srctools/_math.pyx":2232
 *         This strips off the .0 if no decimal portion exists.
 *         """
 *         return f"{self.val.x:g} {self.val.y:g} {self.val.z:g}"             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u__14);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_5, __pyx_n_u_g); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u__14);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2225
 *         return f'{self.val.x:g}{delim}{self.val.y:g}{delim}{self.val.z:g}'
 * 
 *     def __str__(self) -> str:             # <<<<<<<<<<<<<<
 *         """Return the values, separated by spaces.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("srctools._math.Angle.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2234
 *         return f"{self.val.x:g} {self.val.y:g} {self.val.z:g}"
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         return f'Angle({self.val.x:g}, {self.val.y:g}, {self.val.z:g})'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_17__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_5Angle_17__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_16__repr__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_16__repr__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "srctools/_math.pyx":2235
 * 
 *     def __repr__(self) -> str:
 *         return f'Angle({self.val.x:g}, {self.val.y:g}, {self.val.z:g})'             # <<<<<<<<<<<<<<
 * 
 *     def __format__(self, format_spec: str) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Angle);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_Angle);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Angle);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__8);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__8);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__8);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_5, __pyx_n_u_g); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__8);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__8);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__8);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__15);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__15);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__15);
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2234
 *         return f"{self.val.x:g} {self.val.y:g} {self.val.z:g}"
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         return f'Angle({self.val.x:g}, {self.val.y:g}, {self.val.z:g})'
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("srctools._math.Angle.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2237
 *         return f'Angle({self.val.x:g}, {self.val.y:g}, {self.val.z:g})'
 * 
 *     def __format__(self, format_spec: str) -> str:             # <<<<<<<<<<<<<<
 *         """Control how the text is formatted."""
 *         if not format_spec:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_19__format__(PyObject *__pyx_v_self, PyObject *__pyx_v_format_spec); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_18__format__[] = "Angle.__format__(self, unicode format_spec: str) -> str\nControl how the text is formatted.";
static PyObject *__pyx_pw_8srctools_5_math_5Angle_19__format__(PyObject *__pyx_v_self, PyObject *__pyx_v_format_spec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__format__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_format_spec), (&PyUnicode_Type), 1, "format_spec", 1))) __PYX_ERR(0, 2237, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_18__format__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self), ((PyObject*)__pyx_v_format_spec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_18__format__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, PyObject *__pyx_v_format_spec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__format__", 0);
  __Pyx_INCREF(__pyx_v_format_spec);

  /* "srctools/_math.pyx":2239
 *     def __format__(self, format_spec: str) -> str:
 *         """Control how the text is formatted."""
 *         if not format_spec:             # <<<<<<<<<<<<<<
 *             format_spec = 'g'
 *         return f"{self.val.x:{format_spec}} {self.val.y:{format_spec}} {self.val.z:{format_spec}}"
 */
  __pyx_t_1 = (__pyx_v_format_spec != Py_None)&&(__Pyx_PyUnicode_IS_TRUE(__pyx_v_format_spec) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":2240
 *         """Control how the text is formatted."""
 *         if not format_spec:
 *             format_spec = 'g'             # <<<<<<<<<<<<<<
 *         return f"{self.val.x:{format_spec}} {self.val.y:{format_spec}} {self.val.z:{format_spec}}"
 * 
 */
    __Pyx_INCREF(__pyx_n_u_g);
    __Pyx_DECREF_SET(__pyx_v_format_spec, __pyx_n_u_g);

    /* "srctools/_math.pyx":2239
 *     def __format__(self, format_spec: str) -> str:
 *         """Control how the text is formatted."""
 *         if not format_spec:             # <<<<<<<<<<<<<<
 *             format_spec = 'g'
 *         return f"{self.val.x:{format_spec}} {self.val.y:{format_spec}} {self.val.z:{format_spec}}"
 */
  }

  /* "srctools/_math.pyx":2241
 *         if not format_spec:
 *             format_spec = 'g'
 *         return f"{self.val.x:{format_spec}} {self.val.y:{format_spec}} {self.val.z:{format_spec}}"             # <<<<<<<<<<<<<<
 * 
 *     def as_tuple(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_format_spec); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_Format(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_4 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_kp_u__14);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_format_spec); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_Format(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_kp_u__14);
  __pyx_t_4 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__14);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_kp_u__14);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_format_spec); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_Format(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2237
 *         return f'Angle({self.val.x:g}, {self.val.y:g}, {self.val.z:g})'
 * 
 *     def __format__(self, format_spec: str) -> str:             # <<<<<<<<<<<<<<
 *         """Control how the text is formatted."""
 *         if not format_spec:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srctools._math.Angle.__format__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format_spec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2243
 *         return f"{self.val.x:{format_spec}} {self.val.y:{format_spec}} {self.val.z:{format_spec}}"
 * 
 *     def as_tuple(self):             # <<<<<<<<<<<<<<
 *         """Return the Angle as a tuple."""
 *         return Vec_tuple(self.val.x, self.val.y, self.val.z)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_21as_tuple(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_20as_tuple[] = "Angle.as_tuple(self)\nReturn the Angle as a tuple.";
static PyObject *__pyx_pw_8srctools_5_math_5Angle_21as_tuple(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_tuple (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_20as_tuple(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_20as_tuple(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_tuple", 0);

  /* "srctools/_math.pyx":2245
 *     def as_tuple(self):
 *         """Return the Angle as a tuple."""
 *         return Vec_tuple(self.val.x, self.val.y, self.val.z)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self) -> AngleIter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_8srctools_5_math_Vec_tuple);
  __pyx_t_5 = __pyx_v_8srctools_5_math_Vec_tuple; __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_2, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2245, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_2, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2245, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2243
 *         return f"{self.val.x:{format_spec}} {self.val.y:{format_spec}} {self.val.z:{format_spec}}"
 * 
 *     def as_tuple(self):             # <<<<<<<<<<<<<<
 *         """Return the Angle as a tuple."""
 *         return Vec_tuple(self.val.x, self.val.y, self.val.z)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srctools._math.Angle.as_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2247
 *         return Vec_tuple(self.val.x, self.val.y, self.val.z)
 * 
 *     def __iter__(self) -> AngleIter:             # <<<<<<<<<<<<<<
 *         """Iterating over the angles returns each value in turn."""
 *         return AngleIter.__new__(AngleIter, self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_23__iter__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_22__iter__[] = "Iterating over the angles returns each value in turn.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_5Angle_22__iter__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_5Angle_23__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_22__iter__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_22__iter__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "srctools/_math.pyx":2249
 *     def __iter__(self) -> AngleIter:
 *         """Iterating over the angles returns each value in turn."""
 *         return AngleIter.__new__(AngleIter, self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_8srctools_5_math_AngleIter(((PyTypeObject *)__pyx_ptype_8srctools_5_math_AngleIter), __pyx_t_1, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2249, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2247
 *         return Vec_tuple(self.val.x, self.val.y, self.val.z)
 * 
 *     def __iter__(self) -> AngleIter:             # <<<<<<<<<<<<<<
 *         """Iterating over the angles returns each value in turn."""
 *         return AngleIter.__new__(AngleIter, self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srctools._math.Angle.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2254
 *     @classmethod
 *     @cython.boundscheck(False)
 *     def with_axes(cls, *args):             # <<<<<<<<<<<<<<
 *         """Create an Angle, given a number of axes and corresponding values.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_25with_axes(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_24with_axes[] = "Angle.with_axes(type cls, *args)\nCreate an Angle, given a number of axes and corresponding values.\n\n        This is a convenience for doing the following:\n            ang = Angle()\n            ang[axis1] = val1\n            ang[axis2] = val2\n            ang[axis3] = val3\n        The magnitudes can also be Angles, in which case the matching\n        axis will be used from the angle.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_5Angle_25with_axes(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("with_axes (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "with_axes", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_24with_axes(((PyTypeObject*)__pyx_v_cls), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_24with_axes(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_arg_count;
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang = 0;
  PyObject *__pyx_v_axis = 0;
  unsigned char __pyx_v_i;
  PyObject *__pyx_v_axis_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  unsigned char __pyx_t_8;
  long __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  double __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("with_axes", 0);

  /* "srctools/_math.pyx":2265
 *         axis will be used from the angle.
 *         """
 *         cdef Py_ssize_t arg_count = len(args)             # <<<<<<<<<<<<<<
 *         if arg_count not in (2, 4, 6):
 *             raise TypeError(
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2265, __pyx_L1_error)
  __pyx_v_arg_count = __pyx_t_1;

  /* "srctools/_math.pyx":2266
 *         """
 *         cdef Py_ssize_t arg_count = len(args)
 *         if arg_count not in (2, 4, 6):             # <<<<<<<<<<<<<<
 *             raise TypeError(
 *                 f'Angle.with_axis() takes 2, 4 or 6 positional arguments '
 */
  switch (__pyx_v_arg_count) {
    case 2:
    case 4:
    case 6:
    __pyx_t_2 = 0;
    break;
    default:
    __pyx_t_2 = 1;
    break;
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "srctools/_math.pyx":2268
 *         if arg_count not in (2, 4, 6):
 *             raise TypeError(
 *                 f'Angle.with_axis() takes 2, 4 or 6 positional arguments '             # <<<<<<<<<<<<<<
 *                 f'but {arg_count} were given'
 *             )
 */
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Angle_with_axis_takes_2_4_or_6_p);
    __pyx_t_1 += 59;
    __Pyx_GIVEREF(__pyx_kp_u_Angle_with_axis_takes_2_4_or_6_p);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Angle_with_axis_takes_2_4_or_6_p);

    /* "srctools/_math.pyx":2269
 *             raise TypeError(
 *                 f'Angle.with_axis() takes 2, 4 or 6 positional arguments '
 *                 f'but {arg_count} were given'             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_arg_count, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_were_given);
    __pyx_t_1 += 11;
    __Pyx_GIVEREF(__pyx_kp_u_were_given);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_were_given);

    /* "srctools/_math.pyx":2268
 *         if arg_count not in (2, 4, 6):
 *             raise TypeError(
 *                 f'Angle.with_axis() takes 2, 4 or 6 positional arguments '             # <<<<<<<<<<<<<<
 *                 f'but {arg_count} were given'
 *             )
 */
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "srctools/_math.pyx":2267
 *         cdef Py_ssize_t arg_count = len(args)
 *         if arg_count not in (2, 4, 6):
 *             raise TypeError(             # <<<<<<<<<<<<<<
 *                 f'Angle.with_axis() takes 2, 4 or 6 positional arguments '
 *                 f'but {arg_count} were given'
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 2267, __pyx_L1_error)

    /* "srctools/_math.pyx":2266
 *         """
 *         cdef Py_ssize_t arg_count = len(args)
 *         if arg_count not in (2, 4, 6):             # <<<<<<<<<<<<<<
 *             raise TypeError(
 *                 f'Angle.with_axis() takes 2, 4 or 6 positional arguments '
 */
  }

  /* "srctools/_math.pyx":2272
 *             )
 * 
 *         cdef Angle ang = Angle.__new__(Angle)             # <<<<<<<<<<<<<<
 *         cdef str axis
 *         cdef unsigned char i
 */
  __pyx_t_4 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Angle(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Angle), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2272, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __pyx_v_ang = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "srctools/_math.pyx":2275
 *         cdef str axis
 *         cdef unsigned char i
 *         for i in range(0, arg_count, 2):             # <<<<<<<<<<<<<<
 *             axis_val = args[i+1]
 *             axis = args[i]
 */
  __pyx_t_1 = __pyx_v_arg_count;
  __pyx_t_7 = __pyx_t_1;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=2) {
    __pyx_v_i = __pyx_t_8;

    /* "srctools/_math.pyx":2276
 *         cdef unsigned char i
 *         for i in range(0, arg_count, 2):
 *             axis_val = args[i+1]             # <<<<<<<<<<<<<<
 *             axis = args[i]
 *             if axis in ('p', 'pit', 'pitch'):
 */
    __pyx_t_9 = (__pyx_v_i + 1);
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, __pyx_t_9, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_axis_val, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "srctools/_math.pyx":2277
 *         for i in range(0, arg_count, 2):
 *             axis_val = args[i+1]
 *             axis = args[i]             # <<<<<<<<<<<<<<
 *             if axis in ('p', 'pit', 'pitch'):
 *                 if isinstance(axis_val, Angle):
 */
    if (!(likely(PyUnicode_CheckExact(PyTuple_GET_ITEM(__pyx_v_args, __pyx_v_i)))||((PyTuple_GET_ITEM(__pyx_v_args, __pyx_v_i)) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(PyTuple_GET_ITEM(__pyx_v_args, __pyx_v_i))->tp_name), 0))) __PYX_ERR(0, 2277, __pyx_L1_error)
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v_args, __pyx_v_i);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_axis, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "srctools/_math.pyx":2278
 *             axis_val = args[i+1]
 *             axis = args[i]
 *             if axis in ('p', 'pit', 'pitch'):             # <<<<<<<<<<<<<<
 *                 if isinstance(axis_val, Angle):
 *                     ang.val.x = (<Angle>axis_val).val.x
 */
    __Pyx_INCREF(__pyx_v_axis);
    __pyx_t_10 = __pyx_v_axis;
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_10, __pyx_n_u_p, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2278, __pyx_L1_error)
    __pyx_t_11 = (__pyx_t_2 != 0);
    if (!__pyx_t_11) {
    } else {
      __pyx_t_3 = __pyx_t_11;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_11 = (__Pyx_PyUnicode_Equals(__pyx_t_10, __pyx_n_u_pit, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 2278, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_11 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_10, __pyx_n_u_pitch, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2278, __pyx_L1_error)
    __pyx_t_11 = (__pyx_t_2 != 0);
    __pyx_t_3 = __pyx_t_11;
    __pyx_L7_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_11 = (__pyx_t_3 != 0);
    if (__pyx_t_11) {

      /* "srctools/_math.pyx":2279
 *             axis = args[i]
 *             if axis in ('p', 'pit', 'pitch'):
 *                 if isinstance(axis_val, Angle):             # <<<<<<<<<<<<<<
 *                     ang.val.x = (<Angle>axis_val).val.x
 *                 else:
 */
      __pyx_t_11 = __Pyx_TypeCheck(__pyx_v_axis_val, __pyx_ptype_8srctools_5_math_Angle); 
      __pyx_t_3 = (__pyx_t_11 != 0);
      if (__pyx_t_3) {

        /* "srctools/_math.pyx":2280
 *             if axis in ('p', 'pit', 'pitch'):
 *                 if isinstance(axis_val, Angle):
 *                     ang.val.x = (<Angle>axis_val).val.x             # <<<<<<<<<<<<<<
 *                 else:
 *                     ang.val.x = norm_ang(axis_val)
 */
        __pyx_t_12 = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_axis_val)->val.x;
        __pyx_v_ang->val.x = __pyx_t_12;

        /* "srctools/_math.pyx":2279
 *             axis = args[i]
 *             if axis in ('p', 'pit', 'pitch'):
 *                 if isinstance(axis_val, Angle):             # <<<<<<<<<<<<<<
 *                     ang.val.x = (<Angle>axis_val).val.x
 *                 else:
 */
        goto __pyx_L10;
      }

      /* "srctools/_math.pyx":2282
 *                     ang.val.x = (<Angle>axis_val).val.x
 *                 else:
 *                     ang.val.x = norm_ang(axis_val)             # <<<<<<<<<<<<<<
 *             elif axis in ('y', 'yaw'):
 *                 if isinstance(axis_val, Angle):
 */
      /*else*/ {
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_axis_val); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2282, __pyx_L1_error)
        __pyx_v_ang->val.x = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_12);
      }
      __pyx_L10:;

      /* "srctools/_math.pyx":2278
 *             axis_val = args[i+1]
 *             axis = args[i]
 *             if axis in ('p', 'pit', 'pitch'):             # <<<<<<<<<<<<<<
 *                 if isinstance(axis_val, Angle):
 *                     ang.val.x = (<Angle>axis_val).val.x
 */
      goto __pyx_L6;
    }

    /* "srctools/_math.pyx":2283
 *                 else:
 *                     ang.val.x = norm_ang(axis_val)
 *             elif axis in ('y', 'yaw'):             # <<<<<<<<<<<<<<
 *                 if isinstance(axis_val, Angle):
 *                     ang.val.y = (<Angle>axis_val).val.y
 */
    __Pyx_INCREF(__pyx_v_axis);
    __pyx_t_10 = __pyx_v_axis;
    __pyx_t_11 = (__Pyx_PyUnicode_Equals(__pyx_t_10, __pyx_n_u_y, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 2283, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_11 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_10, __pyx_n_u_yaw, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2283, __pyx_L1_error)
    __pyx_t_11 = (__pyx_t_2 != 0);
    __pyx_t_3 = __pyx_t_11;
    __pyx_L11_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_11 = (__pyx_t_3 != 0);
    if (__pyx_t_11) {

      /* "srctools/_math.pyx":2284
 *                     ang.val.x = norm_ang(axis_val)
 *             elif axis in ('y', 'yaw'):
 *                 if isinstance(axis_val, Angle):             # <<<<<<<<<<<<<<
 *                     ang.val.y = (<Angle>axis_val).val.y
 *                 else:
 */
      __pyx_t_11 = __Pyx_TypeCheck(__pyx_v_axis_val, __pyx_ptype_8srctools_5_math_Angle); 
      __pyx_t_3 = (__pyx_t_11 != 0);
      if (__pyx_t_3) {

        /* "srctools/_math.pyx":2285
 *             elif axis in ('y', 'yaw'):
 *                 if isinstance(axis_val, Angle):
 *                     ang.val.y = (<Angle>axis_val).val.y             # <<<<<<<<<<<<<<
 *                 else:
 *                     ang.val.y = norm_ang(axis_val)
 */
        __pyx_t_12 = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_axis_val)->val.y;
        __pyx_v_ang->val.y = __pyx_t_12;

        /* "srctools/_math.pyx":2284
 *                     ang.val.x = norm_ang(axis_val)
 *             elif axis in ('y', 'yaw'):
 *                 if isinstance(axis_val, Angle):             # <<<<<<<<<<<<<<
 *                     ang.val.y = (<Angle>axis_val).val.y
 *                 else:
 */
        goto __pyx_L13;
      }

      /* "srctools/_math.pyx":2287
 *                     ang.val.y = (<Angle>axis_val).val.y
 *                 else:
 *                     ang.val.y = norm_ang(axis_val)             # <<<<<<<<<<<<<<
 *             elif axis in ('r', 'rol', 'roll'):
 *                 if isinstance(axis_val, Angle):
 */
      /*else*/ {
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_axis_val); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2287, __pyx_L1_error)
        __pyx_v_ang->val.y = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_12);
      }
      __pyx_L13:;

      /* "srctools/_math.pyx":2283
 *                 else:
 *                     ang.val.x = norm_ang(axis_val)
 *             elif axis in ('y', 'yaw'):             # <<<<<<<<<<<<<<
 *                 if isinstance(axis_val, Angle):
 *                     ang.val.y = (<Angle>axis_val).val.y
 */
      goto __pyx_L6;
    }

    /* "srctools/_math.pyx":2288
 *                 else:
 *                     ang.val.y = norm_ang(axis_val)
 *             elif axis in ('r', 'rol', 'roll'):             # <<<<<<<<<<<<<<
 *                 if isinstance(axis_val, Angle):
 *                     ang.val.z = (<Angle>axis_val).val.z
 */
    __Pyx_INCREF(__pyx_v_axis);
    __pyx_t_10 = __pyx_v_axis;
    __pyx_t_11 = (__Pyx_PyUnicode_Equals(__pyx_t_10, __pyx_n_u_r, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 2288, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_11 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_10, __pyx_n_u_rol, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2288, __pyx_L1_error)
    __pyx_t_11 = (__pyx_t_2 != 0);
    if (!__pyx_t_11) {
    } else {
      __pyx_t_3 = __pyx_t_11;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_11 = (__Pyx_PyUnicode_Equals(__pyx_t_10, __pyx_n_u_roll, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 2288, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_11 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":2289
 *                     ang.val.y = norm_ang(axis_val)
 *             elif axis in ('r', 'rol', 'roll'):
 *                 if isinstance(axis_val, Angle):             # <<<<<<<<<<<<<<
 *                     ang.val.z = (<Angle>axis_val).val.z
 *                 else:
 */
      __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_axis_val, __pyx_ptype_8srctools_5_math_Angle); 
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {

        /* "srctools/_math.pyx":2290
 *             elif axis in ('r', 'rol', 'roll'):
 *                 if isinstance(axis_val, Angle):
 *                     ang.val.z = (<Angle>axis_val).val.z             # <<<<<<<<<<<<<<
 *                 else:
 *                     ang.val.z = norm_ang(axis_val)
 */
        __pyx_t_12 = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_axis_val)->val.z;
        __pyx_v_ang->val.z = __pyx_t_12;

        /* "srctools/_math.pyx":2289
 *                     ang.val.y = norm_ang(axis_val)
 *             elif axis in ('r', 'rol', 'roll'):
 *                 if isinstance(axis_val, Angle):             # <<<<<<<<<<<<<<
 *                     ang.val.z = (<Angle>axis_val).val.z
 *                 else:
 */
        goto __pyx_L17;
      }

      /* "srctools/_math.pyx":2292
 *                     ang.val.z = (<Angle>axis_val).val.z
 *                 else:
 *                     ang.val.z = norm_ang(axis_val)             # <<<<<<<<<<<<<<
 * 
 *         return ang
 */
      /*else*/ {
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_axis_val); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2292, __pyx_L1_error)
        __pyx_v_ang->val.z = __pyx_f_8srctools_5_math_norm_ang(__pyx_t_12);
      }
      __pyx_L17:;

      /* "srctools/_math.pyx":2288
 *                 else:
 *                     ang.val.y = norm_ang(axis_val)
 *             elif axis in ('r', 'rol', 'roll'):             # <<<<<<<<<<<<<<
 *                 if isinstance(axis_val, Angle):
 *                     ang.val.z = (<Angle>axis_val).val.z
 */
    }
    __pyx_L6:;
  }

  /* "srctools/_math.pyx":2294
 *                     ang.val.z = norm_ang(axis_val)
 * 
 *         return ang             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ang));
  __pyx_r = ((PyObject *)__pyx_v_ang);
  goto __pyx_L0;

  /* "srctools/_math.pyx":2254
 *     @classmethod
 *     @cython.boundscheck(False)
 *     def with_axes(cls, *args):             # <<<<<<<<<<<<<<
 *         """Create an Angle, given a number of axes and corresponding values.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("srctools._math.Angle.with_axes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ang);
  __Pyx_XDECREF(__pyx_v_axis);
  __Pyx_XDECREF(__pyx_v_axis_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2297
 * 
 *     @classmethod
 *     def from_basis(             # <<<<<<<<<<<<<<
 *         cls, *,
 *         x: Vec=None,
 */

/* Python wrapper */
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pw_8srctools_5_math_5Angle_27from_basis(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_26from_basis[] = "Angle.from_basis(type cls, *, Vec x: Vec = None, Vec y: Vec = None, Vec z: Vec = None) -> u'Angle'\nReturn the rotation which results in the specified local axes.\n\n        At least two must be specified, with the third computed if necessary.\n        ";
static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pw_8srctools_5_math_5Angle_27from_basis(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_x = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_y = 0;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_z = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_basis (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};

    /* "srctools/_math.pyx":2299
 *     def from_basis(
 *         cls, *,
 *         x: Vec=None,             # <<<<<<<<<<<<<<
 *         y: Vec=None,
 *         z: Vec=None,
 */
    values[0] = (PyObject *)((struct __pyx_obj_8srctools_5_math_Vec *)Py_None);

    /* "srctools/_math.pyx":2300
 *         cls, *,
 *         x: Vec=None,
 *         y: Vec=None,             # <<<<<<<<<<<<<<
 *         z: Vec=None,
 *     ) -> 'Angle':
 */
    values[1] = (PyObject *)((struct __pyx_obj_8srctools_5_math_Vec *)Py_None);

    /* "srctools/_math.pyx":2301
 *         x: Vec=None,
 *         y: Vec=None,
 *         z: Vec=None,             # <<<<<<<<<<<<<<
 *     ) -> 'Angle':
 *         """Return the rotation which results in the specified local axes.
 */
    values[2] = (PyObject *)((struct __pyx_obj_8srctools_5_math_Vec *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      if (kw_args > 0 && likely(kw_args <= 3)) {
        Py_ssize_t index;
        for (index = 0; index < 3 && kw_args > 0; index++) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, 0, "from_basis") < 0)) __PYX_ERR(0, 2297, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 0) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_x = ((struct __pyx_obj_8srctools_5_math_Vec *)values[0]);
    __pyx_v_y = ((struct __pyx_obj_8srctools_5_math_Vec *)values[1]);
    __pyx_v_z = ((struct __pyx_obj_8srctools_5_math_Vec *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_basis", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2297, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Angle.from_basis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_8srctools_5_math_Vec, 1, "x", 0))) __PYX_ERR(0, 2299, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_8srctools_5_math_Vec, 1, "y", 0))) __PYX_ERR(0, 2300, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_z), __pyx_ptype_8srctools_5_math_Vec, 1, "z", 0))) __PYX_ERR(0, 2301, __pyx_L1_error)
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_26from_basis(((PyTypeObject*)__pyx_v_cls), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* "srctools/_math.pyx":2297
 * 
 *     @classmethod
 *     def from_basis(             # <<<<<<<<<<<<<<
 *         cls, *,
 *         x: Vec=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Angle *__pyx_pf_8srctools_5_math_5Angle_26from_basis(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_x, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_y, struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_z) {
  __pyx_t_8srctools_5_math_mat_t __pyx_v_mat;
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_ang = 0;
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_basis", 0);

  /* "srctools/_math.pyx":2308
 *         """
 *         cdef mat_t mat
 *         cdef Angle ang = Angle.__new__(Angle)             # <<<<<<<<<<<<<<
 *         _mat_from_basis(mat, x, y, z)
 *         _mat_to_angle(&ang.val, mat)
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Angle(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Angle), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2308, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ang = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "srctools/_math.pyx":2309
 *         cdef mat_t mat
 *         cdef Angle ang = Angle.__new__(Angle)
 *         _mat_from_basis(mat, x, y, z)             # <<<<<<<<<<<<<<
 *         _mat_to_angle(&ang.val, mat)
 *         return ang
 */
  __pyx_t_2 = __pyx_f_8srctools_5_math__mat_from_basis(__pyx_v_mat, __pyx_v_x, __pyx_v_y, __pyx_v_z); if (unlikely(__pyx_t_2 == ((int)1))) __PYX_ERR(0, 2309, __pyx_L1_error)

  /* "srctools/_math.pyx":2310
 *         cdef Angle ang = Angle.__new__(Angle)
 *         _mat_from_basis(mat, x, y, z)
 *         _mat_to_angle(&ang.val, mat)             # <<<<<<<<<<<<<<
 *         return ang
 * 
 */
  __pyx_f_8srctools_5_math__mat_to_angle((&__pyx_v_ang->val), __pyx_v_mat);

  /* "srctools/_math.pyx":2311
 *         _mat_from_basis(mat, x, y, z)
 *         _mat_to_angle(&ang.val, mat)
 *         return ang             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_ang));
  __pyx_r = __pyx_v_ang;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2297
 * 
 *     @classmethod
 *     def from_basis(             # <<<<<<<<<<<<<<
 *         cls, *,
 *         x: Vec=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srctools._math.Angle.from_basis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ang);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2314
 * 
 * 
 *     def __getitem__(self, pos):             # <<<<<<<<<<<<<<
 *         """Allow reading values by index instead of name if desired.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_29__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pos); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_28__getitem__[] = "Allow reading values by index instead of name if desired.\n\n        This accepts the following indexes to read values:\n        - 0, 1, 2\n        - pitch, yaw, roll\n        - pit, yaw, rol\n        - p, y, r\n        Useful in conjunction with a loop to apply commands to all values.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_5Angle_28__getitem__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_5Angle_29__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pos) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_28__getitem__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self), ((PyObject *)__pyx_v_pos));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_28__getitem__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, PyObject *__pyx_v_pos) {
  PyObject *__pyx_v_key = 0;
  int __pyx_v_index;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "srctools/_math.pyx":2327
 *         cdef int index
 * 
 *         if isinstance(pos, int):             # <<<<<<<<<<<<<<
 *             index = <int>pos
 *             if index == 0:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_pos); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":2328
 * 
 *         if isinstance(pos, int):
 *             index = <int>pos             # <<<<<<<<<<<<<<
 *             if index == 0:
 *                 return self.val.x
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_pos); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2328, __pyx_L1_error)
    __pyx_v_index = ((int)__pyx_t_3);

    /* "srctools/_math.pyx":2329
 *         if isinstance(pos, int):
 *             index = <int>pos
 *             if index == 0:             # <<<<<<<<<<<<<<
 *                 return self.val.x
 *             if index == 1:
 */
    __pyx_t_2 = ((__pyx_v_index == 0) != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":2330
 *             index = <int>pos
 *             if index == 0:
 *                 return self.val.x             # <<<<<<<<<<<<<<
 *             if index == 1:
 *                 return self.val.y
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "srctools/_math.pyx":2329
 *         if isinstance(pos, int):
 *             index = <int>pos
 *             if index == 0:             # <<<<<<<<<<<<<<
 *                 return self.val.x
 *             if index == 1:
 */
    }

    /* "srctools/_math.pyx":2331
 *             if index == 0:
 *                 return self.val.x
 *             if index == 1:             # <<<<<<<<<<<<<<
 *                 return self.val.y
 *             if index == 2:
 */
    __pyx_t_2 = ((__pyx_v_index == 1) != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":2332
 *                 return self.val.x
 *             if index == 1:
 *                 return self.val.y             # <<<<<<<<<<<<<<
 *             if index == 2:
 *                 return self.val.z
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "srctools/_math.pyx":2331
 *             if index == 0:
 *                 return self.val.x
 *             if index == 1:             # <<<<<<<<<<<<<<
 *                 return self.val.y
 *             if index == 2:
 */
    }

    /* "srctools/_math.pyx":2333
 *             if index == 1:
 *                 return self.val.y
 *             if index == 2:             # <<<<<<<<<<<<<<
 *                 return self.val.z
 *         elif isinstance(pos, str):
 */
    __pyx_t_2 = ((__pyx_v_index == 2) != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":2334
 *                 return self.val.y
 *             if index == 2:
 *                 return self.val.z             # <<<<<<<<<<<<<<
 *         elif isinstance(pos, str):
 *             key = <str>pos
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "srctools/_math.pyx":2333
 *             if index == 1:
 *                 return self.val.y
 *             if index == 2:             # <<<<<<<<<<<<<<
 *                 return self.val.z
 *         elif isinstance(pos, str):
 */
    }

    /* "srctools/_math.pyx":2327
 *         cdef int index
 * 
 *         if isinstance(pos, int):             # <<<<<<<<<<<<<<
 *             index = <int>pos
 *             if index == 0:
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":2335
 *             if index == 2:
 *                 return self.val.z
 *         elif isinstance(pos, str):             # <<<<<<<<<<<<<<
 *             key = <str>pos
 *             if key in ('p', 'pit', 'pitch'):
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_pos); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":2336
 *                 return self.val.z
 *         elif isinstance(pos, str):
 *             key = <str>pos             # <<<<<<<<<<<<<<
 *             if key in ('p', 'pit', 'pitch'):
 *                 return self.val.x
 */
    __pyx_t_4 = __pyx_v_pos;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_v_key = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "srctools/_math.pyx":2337
 *         elif isinstance(pos, str):
 *             key = <str>pos
 *             if key in ('p', 'pit', 'pitch'):             # <<<<<<<<<<<<<<
 *                 return self.val.x
 *             elif key in ('y', 'yaw'):
 */
    __Pyx_INCREF(__pyx_v_key);
    __pyx_t_5 = __pyx_v_key;
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_p, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2337, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_1 = __pyx_t_6;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_pit, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2337, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_6 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_pitch, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2337, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_6;
    __pyx_L8_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (__pyx_t_1 != 0);
    if (__pyx_t_6) {

      /* "srctools/_math.pyx":2338
 *             key = <str>pos
 *             if key in ('p', 'pit', 'pitch'):
 *                 return self.val.x             # <<<<<<<<<<<<<<
 *             elif key in ('y', 'yaw'):
 *                 return self.val.y
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "srctools/_math.pyx":2337
 *         elif isinstance(pos, str):
 *             key = <str>pos
 *             if key in ('p', 'pit', 'pitch'):             # <<<<<<<<<<<<<<
 *                 return self.val.x
 *             elif key in ('y', 'yaw'):
 */
    }

    /* "srctools/_math.pyx":2339
 *             if key in ('p', 'pit', 'pitch'):
 *                 return self.val.x
 *             elif key in ('y', 'yaw'):             # <<<<<<<<<<<<<<
 *                 return self.val.y
 *             elif key in ('r', 'rol', 'roll'):
 */
    __Pyx_INCREF(__pyx_v_key);
    __pyx_t_5 = __pyx_v_key;
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_y, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2339, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_6 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_yaw, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2339, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    __pyx_t_6 = __pyx_t_1;
    __pyx_L11_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = (__pyx_t_6 != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":2340
 *                 return self.val.x
 *             elif key in ('y', 'yaw'):
 *                 return self.val.y             # <<<<<<<<<<<<<<
 *             elif key in ('r', 'rol', 'roll'):
 *                 return self.val.z
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "srctools/_math.pyx":2339
 *             if key in ('p', 'pit', 'pitch'):
 *                 return self.val.x
 *             elif key in ('y', 'yaw'):             # <<<<<<<<<<<<<<
 *                 return self.val.y
 *             elif key in ('r', 'rol', 'roll'):
 */
    }

    /* "srctools/_math.pyx":2341
 *             elif key in ('y', 'yaw'):
 *                 return self.val.y
 *             elif key in ('r', 'rol', 'roll'):             # <<<<<<<<<<<<<<
 *                 return self.val.z
 *         raise KeyError(f'Invalid axis: {pos!r}')
 */
    __Pyx_INCREF(__pyx_v_key);
    __pyx_t_5 = __pyx_v_key;
    __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_r, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2341, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_6 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_rol, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2341, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_1 = __pyx_t_6;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_roll, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2341, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_6 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L13_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":2342
 *                 return self.val.y
 *             elif key in ('r', 'rol', 'roll'):
 *                 return self.val.z             # <<<<<<<<<<<<<<
 *         raise KeyError(f'Invalid axis: {pos!r}')
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->val.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "srctools/_math.pyx":2341
 *             elif key in ('y', 'yaw'):
 *                 return self.val.y
 *             elif key in ('r', 'rol', 'roll'):             # <<<<<<<<<<<<<<
 *                 return self.val.z
 *         raise KeyError(f'Invalid axis: {pos!r}')
 */
    }

    /* "srctools/_math.pyx":2335
 *             if index == 2:
 *                 return self.val.z
 *         elif isinstance(pos, str):             # <<<<<<<<<<<<<<
 *             key = <str>pos
 *             if key in ('p', 'pit', 'pitch'):
 */
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":2343
 *             elif key in ('r', 'rol', 'roll'):
 *                 return self.val.z
 *         raise KeyError(f'Invalid axis: {pos!r}')             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, pos, double val) -> None:
 */
  __pyx_t_4 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_pos), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Invalid_axis_2, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(0, 2343, __pyx_L1_error)

  /* "srctools/_math.pyx":2314
 * 
 * 
 *     def __getitem__(self, pos):             # <<<<<<<<<<<<<<
 *         """Allow reading values by index instead of name if desired.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("srctools._math.Angle.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2345
 *         raise KeyError(f'Invalid axis: {pos!r}')
 * 
 *     def __setitem__(self, pos, double val) -> None:             # <<<<<<<<<<<<<<
 *         """Allow editing values by index instead of name if desired.
 * 
 */

/* Python wrapper */
static int __pyx_pw_8srctools_5_math_5Angle_31__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pos, PyObject *__pyx_arg_val); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_30__setitem__[] = "Allow editing values by index instead of name if desired.\n\n        This accepts either 0,1,2 or 'x','y','z' to edit values.\n        Useful in conjunction with a loop to apply commands to all values.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_5Angle_30__setitem__;
#endif
static int __pyx_pw_8srctools_5_math_5Angle_31__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pos, PyObject *__pyx_arg_val) {
  double __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  assert(__pyx_arg_val); {
    __pyx_v_val = __pyx_PyFloat_AsDouble(__pyx_arg_val); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2345, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("srctools._math.Angle.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_30__setitem__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self), ((PyObject *)__pyx_v_pos), ((double)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8srctools_5_math_5Angle_30__setitem__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, PyObject *__pyx_v_pos, double __pyx_v_val) {
  PyObject *__pyx_v_key = 0;
  int __pyx_v_index;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "srctools/_math.pyx":2353
 *         cdef str key
 *         cdef int index
 *         val = norm_ang(val)             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(pos, int):
 */
  __pyx_v_val = __pyx_f_8srctools_5_math_norm_ang(__pyx_v_val);

  /* "srctools/_math.pyx":2355
 *         val = norm_ang(val)
 * 
 *         if isinstance(pos, int):             # <<<<<<<<<<<<<<
 *             index = <int>pos
 *             if index == 0:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_pos); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":2356
 * 
 *         if isinstance(pos, int):
 *             index = <int>pos             # <<<<<<<<<<<<<<
 *             if index == 0:
 *                 self.val.x = val
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_pos); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2356, __pyx_L1_error)
    __pyx_v_index = ((int)__pyx_t_3);

    /* "srctools/_math.pyx":2357
 *         if isinstance(pos, int):
 *             index = <int>pos
 *             if index == 0:             # <<<<<<<<<<<<<<
 *                 self.val.x = val
 *             if index == 1:
 */
    __pyx_t_2 = ((__pyx_v_index == 0) != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":2358
 *             index = <int>pos
 *             if index == 0:
 *                 self.val.x = val             # <<<<<<<<<<<<<<
 *             if index == 1:
 *                 self.val.y = val
 */
      __pyx_v_self->val.x = __pyx_v_val;

      /* "srctools/_math.pyx":2357
 *         if isinstance(pos, int):
 *             index = <int>pos
 *             if index == 0:             # <<<<<<<<<<<<<<
 *                 self.val.x = val
 *             if index == 1:
 */
    }

    /* "srctools/_math.pyx":2359
 *             if index == 0:
 *                 self.val.x = val
 *             if index == 1:             # <<<<<<<<<<<<<<
 *                 self.val.y = val
 *             if index == 2:
 */
    __pyx_t_2 = ((__pyx_v_index == 1) != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":2360
 *                 self.val.x = val
 *             if index == 1:
 *                 self.val.y = val             # <<<<<<<<<<<<<<
 *             if index == 2:
 *                 self.val.z = val
 */
      __pyx_v_self->val.y = __pyx_v_val;

      /* "srctools/_math.pyx":2359
 *             if index == 0:
 *                 self.val.x = val
 *             if index == 1:             # <<<<<<<<<<<<<<
 *                 self.val.y = val
 *             if index == 2:
 */
    }

    /* "srctools/_math.pyx":2361
 *             if index == 1:
 *                 self.val.y = val
 *             if index == 2:             # <<<<<<<<<<<<<<
 *                 self.val.z = val
 *         elif isinstance(pos, str):
 */
    __pyx_t_2 = ((__pyx_v_index == 2) != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":2362
 *                 self.val.y = val
 *             if index == 2:
 *                 self.val.z = val             # <<<<<<<<<<<<<<
 *         elif isinstance(pos, str):
 *             key = <str>pos
 */
      __pyx_v_self->val.z = __pyx_v_val;

      /* "srctools/_math.pyx":2361
 *             if index == 1:
 *                 self.val.y = val
 *             if index == 2:             # <<<<<<<<<<<<<<
 *                 self.val.z = val
 *         elif isinstance(pos, str):
 */
    }

    /* "srctools/_math.pyx":2355
 *         val = norm_ang(val)
 * 
 *         if isinstance(pos, int):             # <<<<<<<<<<<<<<
 *             index = <int>pos
 *             if index == 0:
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":2363
 *             if index == 2:
 *                 self.val.z = val
 *         elif isinstance(pos, str):             # <<<<<<<<<<<<<<
 *             key = <str>pos
 *             if key in ('p', 'pit', 'pitch'):
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_pos); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":2364
 *                 self.val.z = val
 *         elif isinstance(pos, str):
 *             key = <str>pos             # <<<<<<<<<<<<<<
 *             if key in ('p', 'pit', 'pitch'):
 *                 self.val.x = val
 */
    __pyx_t_4 = __pyx_v_pos;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_v_key = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "srctools/_math.pyx":2365
 *         elif isinstance(pos, str):
 *             key = <str>pos
 *             if key in ('p', 'pit', 'pitch'):             # <<<<<<<<<<<<<<
 *                 self.val.x = val
 *             elif key in ('y', 'yaw'):
 */
    __Pyx_INCREF(__pyx_v_key);
    __pyx_t_5 = __pyx_v_key;
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_p, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2365, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_1 = __pyx_t_6;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_pit, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2365, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_6 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_pitch, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2365, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_6;
    __pyx_L8_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (__pyx_t_1 != 0);
    if (__pyx_t_6) {

      /* "srctools/_math.pyx":2366
 *             key = <str>pos
 *             if key in ('p', 'pit', 'pitch'):
 *                 self.val.x = val             # <<<<<<<<<<<<<<
 *             elif key in ('y', 'yaw'):
 *                 self.val.y = val
 */
      __pyx_v_self->val.x = __pyx_v_val;

      /* "srctools/_math.pyx":2365
 *         elif isinstance(pos, str):
 *             key = <str>pos
 *             if key in ('p', 'pit', 'pitch'):             # <<<<<<<<<<<<<<
 *                 self.val.x = val
 *             elif key in ('y', 'yaw'):
 */
      goto __pyx_L7;
    }

    /* "srctools/_math.pyx":2367
 *             if key in ('p', 'pit', 'pitch'):
 *                 self.val.x = val
 *             elif key in ('y', 'yaw'):             # <<<<<<<<<<<<<<
 *                 self.val.y = val
 *             elif key in ('r', 'rol', 'roll'):
 */
    __Pyx_INCREF(__pyx_v_key);
    __pyx_t_5 = __pyx_v_key;
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_y, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2367, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_6 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_yaw, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2367, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    __pyx_t_6 = __pyx_t_1;
    __pyx_L11_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = (__pyx_t_6 != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":2368
 *                 self.val.x = val
 *             elif key in ('y', 'yaw'):
 *                 self.val.y = val             # <<<<<<<<<<<<<<
 *             elif key in ('r', 'rol', 'roll'):
 *                 self.val.z = val
 */
      __pyx_v_self->val.y = __pyx_v_val;

      /* "srctools/_math.pyx":2367
 *             if key in ('p', 'pit', 'pitch'):
 *                 self.val.x = val
 *             elif key in ('y', 'yaw'):             # <<<<<<<<<<<<<<
 *                 self.val.y = val
 *             elif key in ('r', 'rol', 'roll'):
 */
      goto __pyx_L7;
    }

    /* "srctools/_math.pyx":2369
 *             elif key in ('y', 'yaw'):
 *                 self.val.y = val
 *             elif key in ('r', 'rol', 'roll'):             # <<<<<<<<<<<<<<
 *                 self.val.z = val
 *         raise KeyError(f'Invalid axis: {pos!r}')
 */
    __Pyx_INCREF(__pyx_v_key);
    __pyx_t_5 = __pyx_v_key;
    __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_r, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2369, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_6 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_rol, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2369, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_1 = __pyx_t_6;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_roll, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2369, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_6 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L13_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":2370
 *                 self.val.y = val
 *             elif key in ('r', 'rol', 'roll'):
 *                 self.val.z = val             # <<<<<<<<<<<<<<
 *         raise KeyError(f'Invalid axis: {pos!r}')
 * 
 */
      __pyx_v_self->val.z = __pyx_v_val;

      /* "srctools/_math.pyx":2369
 *             elif key in ('y', 'yaw'):
 *                 self.val.y = val
 *             elif key in ('r', 'rol', 'roll'):             # <<<<<<<<<<<<<<
 *                 self.val.z = val
 *         raise KeyError(f'Invalid axis: {pos!r}')
 */
    }
    __pyx_L7:;

    /* "srctools/_math.pyx":2363
 *             if index == 2:
 *                 self.val.z = val
 *         elif isinstance(pos, str):             # <<<<<<<<<<<<<<
 *             key = <str>pos
 *             if key in ('p', 'pit', 'pitch'):
 */
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":2371
 *             elif key in ('r', 'rol', 'roll'):
 *                 self.val.z = val
 *         raise KeyError(f'Invalid axis: {pos!r}')             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other_obj, int op):
 */
  __pyx_t_4 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_pos), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Invalid_axis_2, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(0, 2371, __pyx_L1_error)

  /* "srctools/_math.pyx":2345
 *         raise KeyError(f'Invalid axis: {pos!r}')
 * 
 *     def __setitem__(self, pos, double val) -> None:             # <<<<<<<<<<<<<<
 *         """Allow editing values by index instead of name if desired.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("srctools._math.Angle.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2373
 *         raise KeyError(f'Invalid axis: {pos!r}')
 * 
 *     def __richcmp__(self, other_obj, int op):             # <<<<<<<<<<<<<<
 *         """Rich Comparisons.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_33__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_obj, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_5Angle_33__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other_obj, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_32__richcmp__(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self), ((PyObject *)__pyx_v_other_obj), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_32__richcmp__(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self, PyObject *__pyx_v_other_obj, int __pyx_v_op) {
  struct __pyx_t_8srctools_5_math_vec_t __pyx_v_other;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned char __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_UCS4 __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "srctools/_math.pyx":2379
 *         """
 *         cdef vec_t other
 *         try:             # <<<<<<<<<<<<<<
 *             conv_angles(&other, other_obj)
 *         except (TypeError, ValueError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "srctools/_math.pyx":2380
 *         cdef vec_t other
 *         try:
 *             conv_angles(&other, other_obj)             # <<<<<<<<<<<<<<
 *         except (TypeError, ValueError):
 *             return NotImplemented
 */
      __pyx_t_4 = __pyx_f_8srctools_5_math_conv_angles((&__pyx_v_other), __pyx_v_other_obj); if (unlikely(__pyx_t_4 == ((unsigned char)0))) __PYX_ERR(0, 2380, __pyx_L3_error)

      /* "srctools/_math.pyx":2379
 *         """
 *         cdef vec_t other
 *         try:             # <<<<<<<<<<<<<<
 *             conv_angles(&other, other_obj)
 *         except (TypeError, ValueError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "srctools/_math.pyx":2381
 *         try:
 *             conv_angles(&other, other_obj)
 *         except (TypeError, ValueError):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 * 
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("srctools._math.Angle.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 2381, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "srctools/_math.pyx":2382
 *             conv_angles(&other, other_obj)
 *         except (TypeError, ValueError):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *         # 'redundant' == True prevents the individual comparisons from
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_builtin_NotImplemented);
      __pyx_r = __pyx_builtin_NotImplemented;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "srctools/_math.pyx":2379
 *         """
 *         cdef vec_t other
 *         try:             # <<<<<<<<<<<<<<
 *             conv_angles(&other, other_obj)
 *         except (TypeError, ValueError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "srctools/_math.pyx":2388
 *         # to convert the result individually on failure.
 *         # Use subtraction so that values within TOL are accepted.
 *         if op == Py_EQ:             # <<<<<<<<<<<<<<
 *             return (
 *                 abs(self.val.x - other.x) <= TOL and
 */
  __pyx_t_9 = ((__pyx_v_op == Py_EQ) != 0);
  if (__pyx_t_9) {

    /* "srctools/_math.pyx":2389
 *         # Use subtraction so that values within TOL are accepted.
 *         if op == Py_EQ:
 *             return (             # <<<<<<<<<<<<<<
 *                 abs(self.val.x - other.x) <= TOL and
 *                 abs(self.val.y - other.y) <= TOL and
 */
    __Pyx_XDECREF(__pyx_r);

    /* "srctools/_math.pyx":2390
 *         if op == Py_EQ:
 *             return (
 *                 abs(self.val.x - other.x) <= TOL and             # <<<<<<<<<<<<<<
 *                 abs(self.val.y - other.y) <= TOL and
 *                 abs(self.val.z - other.z) <= TOL
 */
    __pyx_t_10 = (fabs((__pyx_v_self->val.x - __pyx_v_other.x)) <= 1e-06);
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L12_bool_binop_done;
    }

    /* "srctools/_math.pyx":2391
 *             return (
 *                 abs(self.val.x - other.x) <= TOL and
 *                 abs(self.val.y - other.y) <= TOL and             # <<<<<<<<<<<<<<
 *                 abs(self.val.z - other.z) <= TOL
 *             ) == True
 */
    __pyx_t_10 = (fabs((__pyx_v_self->val.y - __pyx_v_other.y)) <= 1e-06);
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L12_bool_binop_done;
    }

    /* "srctools/_math.pyx":2392
 *                 abs(self.val.x - other.x) <= TOL and
 *                 abs(self.val.y - other.y) <= TOL and
 *                 abs(self.val.z - other.z) <= TOL             # <<<<<<<<<<<<<<
 *             ) == True
 *         elif op == Py_NE:
 */
    __pyx_t_10 = (fabs((__pyx_v_self->val.z - __pyx_v_other.z)) <= 1e-06);
    __pyx_t_9 = __pyx_t_10;
    __pyx_L12_bool_binop_done:;

    /* "srctools/_math.pyx":2393
 *                 abs(self.val.y - other.y) <= TOL and
 *                 abs(self.val.z - other.z) <= TOL
 *             ) == True             # <<<<<<<<<<<<<<
 *         elif op == Py_NE:
 *             return (
 */
    __pyx_t_8 = __Pyx_PyBool_FromLong((__pyx_t_9 == 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":2388
 *         # to convert the result individually on failure.
 *         # Use subtraction so that values within TOL are accepted.
 *         if op == Py_EQ:             # <<<<<<<<<<<<<<
 *             return (
 *                 abs(self.val.x - other.x) <= TOL and
 */
  }

  /* "srctools/_math.pyx":2394
 *                 abs(self.val.z - other.z) <= TOL
 *             ) == True
 *         elif op == Py_NE:             # <<<<<<<<<<<<<<
 *             return (
 *                 abs(self.val.x - other.x) > TOL or
 */
  __pyx_t_9 = ((__pyx_v_op == Py_NE) != 0);
  if (__pyx_t_9) {

    /* "srctools/_math.pyx":2395
 *             ) == True
 *         elif op == Py_NE:
 *             return (             # <<<<<<<<<<<<<<
 *                 abs(self.val.x - other.x) > TOL or
 *                 abs(self.val.y - other.y) > TOL or
 */
    __Pyx_XDECREF(__pyx_r);

    /* "srctools/_math.pyx":2396
 *         elif op == Py_NE:
 *             return (
 *                 abs(self.val.x - other.x) > TOL or             # <<<<<<<<<<<<<<
 *                 abs(self.val.y - other.y) > TOL or
 *                 abs(self.val.z - other.z) > TOL
 */
    __pyx_t_10 = (fabs((__pyx_v_self->val.x - __pyx_v_other.x)) > 1e-06);
    if (!__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L15_bool_binop_done;
    }

    /* "srctools/_math.pyx":2397
 *             return (
 *                 abs(self.val.x - other.x) > TOL or
 *                 abs(self.val.y - other.y) > TOL or             # <<<<<<<<<<<<<<
 *                 abs(self.val.z - other.z) > TOL
 *             ) == True
 */
    __pyx_t_10 = (fabs((__pyx_v_self->val.y - __pyx_v_other.y)) > 1e-06);
    if (!__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L15_bool_binop_done;
    }

    /* "srctools/_math.pyx":2398
 *                 abs(self.val.x - other.x) > TOL or
 *                 abs(self.val.y - other.y) > TOL or
 *                 abs(self.val.z - other.z) > TOL             # <<<<<<<<<<<<<<
 *             ) == True
 *         elif op in [Py_LT, Py_GT, Py_GE, Py_LE]:
 */
    __pyx_t_10 = (fabs((__pyx_v_self->val.z - __pyx_v_other.z)) > 1e-06);
    __pyx_t_9 = __pyx_t_10;
    __pyx_L15_bool_binop_done:;

    /* "srctools/_math.pyx":2399
 *                 abs(self.val.y - other.y) > TOL or
 *                 abs(self.val.z - other.z) > TOL
 *             ) == True             # <<<<<<<<<<<<<<
 *         elif op in [Py_LT, Py_GT, Py_GE, Py_LE]:
 *             return NotImplemented
 */
    __pyx_t_8 = __Pyx_PyBool_FromLong((__pyx_t_9 == 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "srctools/_math.pyx":2394
 *                 abs(self.val.z - other.z) <= TOL
 *             ) == True
 *         elif op == Py_NE:             # <<<<<<<<<<<<<<
 *             return (
 *                 abs(self.val.x - other.x) > TOL or
 */
  }

  /* "srctools/_math.pyx":2400
 *                 abs(self.val.z - other.z) > TOL
 *             ) == True
 *         elif op in [Py_LT, Py_GT, Py_GE, Py_LE]:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         else:
 */
  __pyx_t_5 = __pyx_v_op;
  __pyx_t_10 = ((__pyx_t_5 == Py_LT) != 0);
  if (!__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L18_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_t_5 == Py_GT) != 0);
  if (!__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L18_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_t_5 == Py_GE) != 0);
  if (!__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L18_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_t_5 == Py_LE) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L18_bool_binop_done:;
  __pyx_t_10 = (__pyx_t_9 != 0);
  if (likely(__pyx_t_10)) {

    /* "srctools/_math.pyx":2401
 *             ) == True
 *         elif op in [Py_LT, Py_GT, Py_GE, Py_LE]:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         else:
 *             raise SystemError(f'Unknown operation {op!r}' '!')
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "srctools/_math.pyx":2400
 *                 abs(self.val.z - other.z) > TOL
 *             ) == True
 *         elif op in [Py_LT, Py_GT, Py_GE, Py_LE]:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         else:
 */
  }

  /* "srctools/_math.pyx":2403
 *             return NotImplemented
 *         else:
 *             raise SystemError(f'Unknown operation {op!r}' '!')             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(first, second):
 */
  /*else*/ {
    __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = 0;
    __pyx_t_12 = 127;
    __Pyx_INCREF(__pyx_kp_u_Unknown_operation);
    __pyx_t_11 += 18;
    __Pyx_GIVEREF(__pyx_kp_u_Unknown_operation);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_Unknown_operation);
    __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_v_op, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__4);
    __pyx_t_11 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__4);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u__4);
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_8, 3, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SystemError, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(0, 2403, __pyx_L1_error)
  }

  /* "srctools/_math.pyx":2373
 *         raise KeyError(f'Invalid axis: {pos!r}')
 * 
 *     def __richcmp__(self, other_obj, int op):             # <<<<<<<<<<<<<<
 *         """Rich Comparisons.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srctools._math.Angle.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2405
 *             raise SystemError(f'Unknown operation {op!r}' '!')
 * 
 *     def __mul__(first, second):             # <<<<<<<<<<<<<<
 *         """Angle * float multiplies each value."""
 *         cdef double scalar
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_35__mul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_34__mul__[] = "Angle * float multiplies each value.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8srctools_5_math_5Angle_34__mul__;
#endif
static PyObject *__pyx_pw_8srctools_5_math_5Angle_35__mul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_34__mul__(((PyObject *)__pyx_v_first), ((PyObject *)__pyx_v_second));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_34__mul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second) {
  double __pyx_v_scalar;
  struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_angle = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "srctools/_math.pyx":2409
 *         cdef double scalar
 *         cdef Angle angle
 *         if isinstance(first, Angle) and isinstance(second, (int, float)):             # <<<<<<<<<<<<<<
 *             scalar = second
 *             angle = first
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_first, __pyx_ptype_8srctools_5_math_Angle); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_v_second); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_second); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_3 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":2410
 *         cdef Angle angle
 *         if isinstance(first, Angle) and isinstance(second, (int, float)):
 *             scalar = second             # <<<<<<<<<<<<<<
 *             angle = first
 *         elif isinstance(first, (int, float)) and isinstance(second, Angle):
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_second); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2410, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_5;

    /* "srctools/_math.pyx":2411
 *         if isinstance(first, Angle) and isinstance(second, (int, float)):
 *             scalar = second
 *             angle = first             # <<<<<<<<<<<<<<
 *         elif isinstance(first, (int, float)) and isinstance(second, Angle):
 *             scalar = first
 */
    if (!(likely(((__pyx_v_first) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_first, __pyx_ptype_8srctools_5_math_Angle))))) __PYX_ERR(0, 2411, __pyx_L1_error)
    __pyx_t_6 = __pyx_v_first;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_v_angle = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "srctools/_math.pyx":2409
 *         cdef double scalar
 *         cdef Angle angle
 *         if isinstance(first, Angle) and isinstance(second, (int, float)):             # <<<<<<<<<<<<<<
 *             scalar = second
 *             angle = first
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":2412
 *             scalar = second
 *             angle = first
 *         elif isinstance(first, (int, float)) and isinstance(second, Angle):             # <<<<<<<<<<<<<<
 *             scalar = first
 *             angle = second
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_first); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_first); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L10_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_second, __pyx_ptype_8srctools_5_math_Angle); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":2413
 *             angle = first
 *         elif isinstance(first, (int, float)) and isinstance(second, Angle):
 *             scalar = first             # <<<<<<<<<<<<<<
 *             angle = second
 *         else:
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_first); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2413, __pyx_L1_error)
    __pyx_v_scalar = __pyx_t_5;

    /* "srctools/_math.pyx":2414
 *         elif isinstance(first, (int, float)) and isinstance(second, Angle):
 *             scalar = first
 *             angle = second             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
    if (!(likely(((__pyx_v_second) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_second, __pyx_ptype_8srctools_5_math_Angle))))) __PYX_ERR(0, 2414, __pyx_L1_error)
    __pyx_t_6 = __pyx_v_second;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_v_angle = ((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "srctools/_math.pyx":2412
 *             scalar = second
 *             angle = first
 *         elif isinstance(first, (int, float)) and isinstance(second, Angle):             # <<<<<<<<<<<<<<
 *             scalar = first
 *             angle = second
 */
    goto __pyx_L3;
  }

  /* "srctools/_math.pyx":2416
 *             angle = second
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         return _angle(
 *             norm_ang(angle.val.x * scalar),
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "srctools/_math.pyx":2417
 *         else:
 *             return NotImplemented
 *         return _angle(             # <<<<<<<<<<<<<<
 *             norm_ang(angle.val.x * scalar),
 *             norm_ang(angle.val.y * scalar),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "srctools/_math.pyx":2420
 *             norm_ang(angle.val.x * scalar),
 *             norm_ang(angle.val.y * scalar),
 *             norm_ang(angle.val.z * scalar),             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_6 = ((PyObject *)__pyx_f_8srctools_5_math__angle(__pyx_f_8srctools_5_math_norm_ang((__pyx_v_angle->val.x * __pyx_v_scalar)), __pyx_f_8srctools_5_math_norm_ang((__pyx_v_angle->val.y * __pyx_v_scalar)), __pyx_f_8srctools_5_math_norm_ang((__pyx_v_angle->val.z * __pyx_v_scalar)))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2405
 *             raise SystemError(f'Unknown operation {op!r}' '!')
 * 
 *     def __mul__(first, second):             # <<<<<<<<<<<<<<
 *         """Angle * float multiplies each value."""
 *         cdef double scalar
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("srctools._math.Angle.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_angle);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2423
 *         )
 * 
 *     def __matmul__(first, second):             # <<<<<<<<<<<<<<
 *         cdef mat_t temp1, temp2
 *         if isinstance(first, Angle):
 */

/* Python wrapper */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pw_8srctools_5_math_5Angle_37__matmul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second); /*proto*/
static PyObject *__pyx_pw_8srctools_5_math_5Angle_37__matmul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__matmul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_36__matmul__(((PyObject *)__pyx_v_first), ((PyObject *)__pyx_v_second));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_8srctools_5_math_5Angle_36__matmul__(PyObject *__pyx_v_first, PyObject *__pyx_v_second) {
  __pyx_t_8srctools_5_math_mat_t __pyx_v_temp1;
  __pyx_t_8srctools_5_math_mat_t __pyx_v_temp2;
  PyObject *__pyx_v_res = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__matmul__", 0);

  /* "srctools/_math.pyx":2425
 *     def __matmul__(first, second):
 *         cdef mat_t temp1, temp2
 *         if isinstance(first, Angle):             # <<<<<<<<<<<<<<
 *             _mat_from_angle(temp1, &(<Angle>first).val)
 *             if isinstance(second, Angle):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_first, __pyx_ptype_8srctools_5_math_Angle); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srctools/_math.pyx":2426
 *         cdef mat_t temp1, temp2
 *         if isinstance(first, Angle):
 *             _mat_from_angle(temp1, &(<Angle>first).val)             # <<<<<<<<<<<<<<
 *             if isinstance(second, Angle):
 *                 _mat_from_angle(temp2, &(<Angle>second).val)
 */
    __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_temp1, (&((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_first)->val));

    /* "srctools/_math.pyx":2427
 *         if isinstance(first, Angle):
 *             _mat_from_angle(temp1, &(<Angle>first).val)
 *             if isinstance(second, Angle):             # <<<<<<<<<<<<<<
 *                 _mat_from_angle(temp2, &(<Angle>second).val)
 *                 mat_mul(temp1, temp2)
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_second, __pyx_ptype_8srctools_5_math_Angle); 
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":2428
 *             _mat_from_angle(temp1, &(<Angle>first).val)
 *             if isinstance(second, Angle):
 *                 _mat_from_angle(temp2, &(<Angle>second).val)             # <<<<<<<<<<<<<<
 *                 mat_mul(temp1, temp2)
 *             elif isinstance(second, Matrix):
 */
      __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_temp2, (&((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_second)->val));

      /* "srctools/_math.pyx":2429
 *             if isinstance(second, Angle):
 *                 _mat_from_angle(temp2, &(<Angle>second).val)
 *                 mat_mul(temp1, temp2)             # <<<<<<<<<<<<<<
 *             elif isinstance(second, Matrix):
 *                 mat_mul(temp1, (<Matrix>second).mat)
 */
      __pyx_f_8srctools_5_math_mat_mul(__pyx_v_temp1, __pyx_v_temp2);

      /* "srctools/_math.pyx":2427
 *         if isinstance(first, Angle):
 *             _mat_from_angle(temp1, &(<Angle>first).val)
 *             if isinstance(second, Angle):             # <<<<<<<<<<<<<<
 *                 _mat_from_angle(temp2, &(<Angle>second).val)
 *                 mat_mul(temp1, temp2)
 */
      goto __pyx_L4;
    }

    /* "srctools/_math.pyx":2430
 *                 _mat_from_angle(temp2, &(<Angle>second).val)
 *                 mat_mul(temp1, temp2)
 *             elif isinstance(second, Matrix):             # <<<<<<<<<<<<<<
 *                 mat_mul(temp1, (<Matrix>second).mat)
 *             else:
 */
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_second, __pyx_ptype_8srctools_5_math_Matrix); 
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":2431
 *                 mat_mul(temp1, temp2)
 *             elif isinstance(second, Matrix):
 *                 mat_mul(temp1, (<Matrix>second).mat)             # <<<<<<<<<<<<<<
 *             else:
 *                 return NotImplemented
 */
      __pyx_f_8srctools_5_math_mat_mul(__pyx_v_temp1, ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_second)->mat);

      /* "srctools/_math.pyx":2430
 *                 _mat_from_angle(temp2, &(<Angle>second).val)
 *                 mat_mul(temp1, temp2)
 *             elif isinstance(second, Matrix):             # <<<<<<<<<<<<<<
 *                 mat_mul(temp1, (<Matrix>second).mat)
 *             else:
 */
      goto __pyx_L4;
    }

    /* "srctools/_math.pyx":2433
 *                 mat_mul(temp1, (<Matrix>second).mat)
 *             else:
 *                 return NotImplemented             # <<<<<<<<<<<<<<
 *             res = Angle.__new__(Angle)
 *             _mat_to_angle(&(<Angle>res).val, temp1)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_builtin_NotImplemented);
      __pyx_r = __pyx_builtin_NotImplemented;
      goto __pyx_L0;
    }
    __pyx_L4:;

    /* "srctools/_math.pyx":2434
 *             else:
 *                 return NotImplemented
 *             res = Angle.__new__(Angle)             # <<<<<<<<<<<<<<
 *             _mat_to_angle(&(<Angle>res).val, temp1)
 *             return res
 */
    __pyx_t_3 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Angle(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Angle), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2434, __pyx_L1_error)
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_v_res = ((PyObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "srctools/_math.pyx":2435
 *                 return NotImplemented
 *             res = Angle.__new__(Angle)
 *             _mat_to_angle(&(<Angle>res).val, temp1)             # <<<<<<<<<<<<<<
 *             return res
 *         elif isinstance(second, Angle):
 */
    __pyx_f_8srctools_5_math__mat_to_angle((&((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_res)->val), __pyx_v_temp1);

    /* "srctools/_math.pyx":2436
 *             res = Angle.__new__(Angle)
 *             _mat_to_angle(&(<Angle>res).val, temp1)
 *             return res             # <<<<<<<<<<<<<<
 *         elif isinstance(second, Angle):
 *             # These classes should do this themselves, but this is here for
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_res);
    __pyx_r = __pyx_v_res;
    goto __pyx_L0;

    /* "srctools/_math.pyx":2425
 *     def __matmul__(first, second):
 *         cdef mat_t temp1, temp2
 *         if isinstance(first, Angle):             # <<<<<<<<<<<<<<
 *             _mat_from_angle(temp1, &(<Angle>first).val)
 *             if isinstance(second, Angle):
 */
  }

  /* "srctools/_math.pyx":2437
 *             _mat_to_angle(&(<Angle>res).val, temp1)
 *             return res
 *         elif isinstance(second, Angle):             # <<<<<<<<<<<<<<
 *             # These classes should do this themselves, but this is here for
 *             # completeness.
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_second, __pyx_ptype_8srctools_5_math_Angle); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srctools/_math.pyx":2440
 *             # These classes should do this themselves, but this is here for
 *             # completeness.
 *             _mat_from_angle(temp2, &(<Angle>second).val)             # <<<<<<<<<<<<<<
 *             if isinstance(first, Matrix):
 *                 res = Matrix.__new__(Matrix)
 */
    __pyx_f_8srctools_5_math__mat_from_angle(__pyx_v_temp2, (&((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_second)->val));

    /* "srctools/_math.pyx":2441
 *             # completeness.
 *             _mat_from_angle(temp2, &(<Angle>second).val)
 *             if isinstance(first, Matrix):             # <<<<<<<<<<<<<<
 *                 res = Matrix.__new__(Matrix)
 *                 memcpy((<Matrix>res).mat, (<Matrix>first).mat, sizeof(mat_t))
 */
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_first, __pyx_ptype_8srctools_5_math_Matrix); 
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "srctools/_math.pyx":2442
 *             _mat_from_angle(temp2, &(<Angle>second).val)
 *             if isinstance(first, Matrix):
 *                 res = Matrix.__new__(Matrix)             # <<<<<<<<<<<<<<
 *                 memcpy((<Matrix>res).mat, (<Matrix>first).mat, sizeof(mat_t))
 *                 mat_mul((<Matrix>res).mat, temp2)
 */
      __pyx_t_3 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Matrix(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Matrix), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2442, __pyx_L1_error)
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __pyx_v_res = ((PyObject *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "srctools/_math.pyx":2443
 *             if isinstance(first, Matrix):
 *                 res = Matrix.__new__(Matrix)
 *                 memcpy((<Matrix>res).mat, (<Matrix>first).mat, sizeof(mat_t))             # <<<<<<<<<<<<<<
 *                 mat_mul((<Matrix>res).mat, temp2)
 *                 return res
 */
      (void)(memcpy(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_res)->mat, ((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_first)->mat, (sizeof(__pyx_t_8srctools_5_math_mat_t))));

      /* "srctools/_math.pyx":2444
 *                 res = Matrix.__new__(Matrix)
 *                 memcpy((<Matrix>res).mat, (<Matrix>first).mat, sizeof(mat_t))
 *                 mat_mul((<Matrix>res).mat, temp2)             # <<<<<<<<<<<<<<
 *                 return res
 *             elif isinstance(first, Vec):
 */
      __pyx_f_8srctools_5_math_mat_mul(((struct __pyx_obj_8srctools_5_math_Matrix *)__pyx_v_res)->mat, __pyx_v_temp2);

      /* "srctools/_math.pyx":2445
 *                 memcpy((<Matrix>res).mat, (<Matrix>first).mat, sizeof(mat_t))
 *                 mat_mul((<Matrix>res).mat, temp2)
 *                 return res             # <<<<<<<<<<<<<<
 *             elif isinstance(first, Vec):
 *                 res = Vec.__new__(Vec)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_res);
      __pyx_r = __pyx_v_res;
      goto __pyx_L0;

      /* "srctools/_math.pyx":2441
 *             # completeness.
 *             _mat_from_angle(temp2, &(<Angle>second).val)
 *             if isinstance(first, Matrix):             # <<<<<<<<<<<<<<
 *                 res = Matrix.__new__(Matrix)
 *                 memcpy((<Matrix>res).mat, (<Matrix>first).mat, sizeof(mat_t))
 */
    }

    /* "srctools/_math.pyx":2446
 *                 mat_mul((<Matrix>res).mat, temp2)
 *                 return res
 *             elif isinstance(first, Vec):             # <<<<<<<<<<<<<<
 *                 res = Vec.__new__(Vec)
 *                 memcpy(&(<Vec>res).val, &(<Vec>first).val, sizeof(vec_t))
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_first, __pyx_ptype_8srctools_5_math_Vec); 
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "srctools/_math.pyx":2447
 *                 return res
 *             elif isinstance(first, Vec):
 *                 res = Vec.__new__(Vec)             # <<<<<<<<<<<<<<
 *                 memcpy(&(<Vec>res).val, &(<Vec>first).val, sizeof(vec_t))
 *                 vec_rot(&(<Vec>res).val, temp2)
 */
      __pyx_t_3 = ((PyObject *)__pyx_tp_new_8srctools_5_math_Vec(((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2447, __pyx_L1_error)
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __pyx_v_res = ((PyObject *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "srctools/_math.pyx":2448
 *             elif isinstance(first, Vec):
 *                 res = Vec.__new__(Vec)
 *                 memcpy(&(<Vec>res).val, &(<Vec>first).val, sizeof(vec_t))             # <<<<<<<<<<<<<<
 *                 vec_rot(&(<Vec>res).val, temp2)
 *                 return res
 */
      (void)(memcpy((&((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_res)->val), (&((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_first)->val), (sizeof(struct __pyx_t_8srctools_5_math_vec_t))));

      /* "srctools/_math.pyx":2449
 *                 res = Vec.__new__(Vec)
 *                 memcpy(&(<Vec>res).val, &(<Vec>first).val, sizeof(vec_t))
 *                 vec_rot(&(<Vec>res).val, temp2)             # <<<<<<<<<<<<<<
 *                 return res
 * 
 */
      __pyx_f_8srctools_5_math_vec_rot((&((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_v_res)->val), __pyx_v_temp2);

      /* "srctools/_math.pyx":2450
 *                 memcpy(&(<Vec>res).val, &(<Vec>first).val, sizeof(vec_t))
 *                 vec_rot(&(<Vec>res).val, temp2)
 *                 return res             # <<<<<<<<<<<<<<
 * 
 *         return NotImplemented
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_res);
      __pyx_r = __pyx_v_res;
      goto __pyx_L0;

      /* "srctools/_math.pyx":2446
 *                 mat_mul((<Matrix>res).mat, temp2)
 *                 return res
 *             elif isinstance(first, Vec):             # <<<<<<<<<<<<<<
 *                 res = Vec.__new__(Vec)
 *                 memcpy(&(<Vec>res).val, &(<Vec>first).val, sizeof(vec_t))
 */
    }

    /* "srctools/_math.pyx":2437
 *             _mat_to_angle(&(<Angle>res).val, temp1)
 *             return res
 *         elif isinstance(second, Angle):             # <<<<<<<<<<<<<<
 *             # These classes should do this themselves, but this is here for
 *             # completeness.
 */
  }

  /* "srctools/_math.pyx":2452
 *                 return res
 * 
 *         return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     def transform(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_builtin_NotImplemented);
  __pyx_r = __pyx_builtin_NotImplemented;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2423
 *         )
 * 
 *     def __matmul__(first, second):             # <<<<<<<<<<<<<<
 *         cdef mat_t temp1, temp2
 *         if isinstance(first, Angle):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("srctools._math.Angle.__matmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

/* "srctools/_math.pyx":2454
 *         return NotImplemented
 * 
 *     def transform(self):             # <<<<<<<<<<<<<<
 *         """Perform transformations on this angle.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_5Angle_39transform(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8srctools_5_math_5Angle_38transform[] = "Angle.transform(self)\nPerform transformations on this angle.\n\n        Used as a context manager, which returns a matrix.\n        When the body is exited safely, the matrix is applied to\n        the angle.\n        ";
static PyObject *__pyx_pw_8srctools_5_math_5Angle_39transform(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_5Angle_38transform(((struct __pyx_obj_8srctools_5_math_Angle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_5Angle_38transform(struct __pyx_obj_8srctools_5_math_Angle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform", 0);

  /* "srctools/_math.pyx":2461
 *         the angle.
 *         """
 *         return AngleTransform.__new__(AngleTransform, self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_8srctools_5_math_AngleTransform(((PyTypeObject *)__pyx_ptype_8srctools_5_math_AngleTransform), __pyx_t_1, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2461, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2454
 *         return NotImplemented
 * 
 *     def transform(self):             # <<<<<<<<<<<<<<
 *         """Perform transformations on this angle.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srctools._math.Angle.transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srctools/_math.pyx":2464
 * 
 * 
 * def quickhull(vertexes: 'Iterable[Vec]') -> 'list[tuple[Vec, Vec, Vec]]':             # <<<<<<<<<<<<<<
 *     """Use the quickhull algorithm to construct a convex hull around the provided points."""
 *     cdef size_t v1, v2, v3, ind
 */

/* Python wrapper */
static PyObject *__pyx_pw_8srctools_5_math_7quickhull(PyObject *__pyx_self, PyObject *__pyx_v_vertexes); /*proto*/
static char __pyx_doc_8srctools_5_math_6quickhull[] = "quickhull(vertexes: u'Iterable[Vec]') -> u'list[tuple[Vec, Vec, Vec]]'\nUse the quickhull algorithm to construct a convex hull around the provided points.";
static PyMethodDef __pyx_mdef_8srctools_5_math_7quickhull = {"quickhull", (PyCFunction)__pyx_pw_8srctools_5_math_7quickhull, METH_O, __pyx_doc_8srctools_5_math_6quickhull};
static PyObject *__pyx_pw_8srctools_5_math_7quickhull(PyObject *__pyx_self, PyObject *__pyx_v_vertexes) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quickhull (wrapper)", 0);
  __pyx_r = __pyx_pf_8srctools_5_math_6quickhull(__pyx_self, ((PyObject *)__pyx_v_vertexes));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8srctools_5_math_6quickhull(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vertexes) {
  size_t __pyx_v_v1;
  size_t __pyx_v_v2;
  size_t __pyx_v_v3;
  size_t __pyx_v_ind;
  std::vector<quickhull::Vector3<double> >  __pyx_v_values;
  struct __pyx_obj_8srctools_5_math_Vec *__pyx_v_vecobj = 0;
  quickhull::QuickHull<double>  __pyx_v_qhull;
  quickhull::ConvexHull<double>  __pyx_v_result_hull;
  PyObject *__pyx_v_vectors = 0;
  std::vector<size_t>  __pyx_v_indices;
  PyObject *__pyx_v_res = NULL;
  quickhull::Vector3<double>  __pyx_7genexpr__pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<quickhull::Vector3<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  quickhull::Vector3<double>  const *__pyx_t_6;
  quickhull::VertexDataSource<double>  *__pyx_t_7;
  quickhull::Vector3<double>  __pyx_t_8;
  std::vector<size_t> ::size_type __pyx_t_9;
  std::vector<size_t> ::size_type __pyx_t_10;
  size_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("quickhull", 0);

  /* "srctools/_math.pyx":2467
 *     """Use the quickhull algorithm to construct a convex hull around the provided points."""
 *     cdef size_t v1, v2, v3, ind
 *     cdef vector[quickhull.Vector3[double]] values = vector[quickhull.Vector3[double]]()             # <<<<<<<<<<<<<<
 *     cdef list vert_list, result
 *     cdef Vec vecobj
 */
  try {
    __pyx_t_1 = std::vector<quickhull::Vector3<double> > ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2467, __pyx_L1_error)
  }
  __pyx_v_values = __pyx_t_1;

  /* "srctools/_math.pyx":2470
 *     cdef list vert_list, result
 *     cdef Vec vecobj
 *     cdef quickhull.QuickHull[double] qhull = quickhull.QuickHull[double]()             # <<<<<<<<<<<<<<
 * 
 *     for vecobj in vertexes:
 */
  __pyx_v_qhull = quickhull::QuickHull<double> ();

  /* "srctools/_math.pyx":2472
 *     cdef quickhull.QuickHull[double] qhull = quickhull.QuickHull[double]()
 * 
 *     for vecobj in vertexes:             # <<<<<<<<<<<<<<
 *         values.push_back(quickhull.Vector3[double](vecobj.val.x, vecobj.val.y, vecobj.val.z))
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_vertexes)) || PyTuple_CheckExact(__pyx_v_vertexes)) {
    __pyx_t_2 = __pyx_v_vertexes; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_vertexes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2472, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2472, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2472, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2472, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2472, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2472, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_8srctools_5_math_Vec))))) __PYX_ERR(0, 2472, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_vecobj, ((struct __pyx_obj_8srctools_5_math_Vec *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "srctools/_math.pyx":2473
 * 
 *     for vecobj in vertexes:
 *         values.push_back(quickhull.Vector3[double](vecobj.val.x, vecobj.val.y, vecobj.val.z))             # <<<<<<<<<<<<<<
 * 
 *     cdef quickhull.ConvexHull[double] result_hull = qhull.getConvexHull(values, False, False)
 */
    try {
      __pyx_v_values.push_back(quickhull::Vector3<double> (__pyx_v_vecobj->val.x, __pyx_v_vecobj->val.y, __pyx_v_vecobj->val.z));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2473, __pyx_L1_error)
    }

    /* "srctools/_math.pyx":2472
 *     cdef quickhull.QuickHull[double] qhull = quickhull.QuickHull[double]()
 * 
 *     for vecobj in vertexes:             # <<<<<<<<<<<<<<
 *         values.push_back(quickhull.Vector3[double](vecobj.val.x, vecobj.val.y, vecobj.val.z))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srctools/_math.pyx":2475
 *         values.push_back(quickhull.Vector3[double](vecobj.val.x, vecobj.val.y, vecobj.val.z))
 * 
 *     cdef quickhull.ConvexHull[double] result_hull = qhull.getConvexHull(values, False, False)             # <<<<<<<<<<<<<<
 * 
 *     cdef list vectors = [
 */
  __pyx_v_result_hull = __pyx_v_qhull.getConvexHull(__pyx_v_values, 0, 0);

  /* "srctools/_math.pyx":2477
 *     cdef quickhull.ConvexHull[double] result_hull = qhull.getConvexHull(values, False, False)
 * 
 *     cdef list vectors = [             # <<<<<<<<<<<<<<
 *         _vector(v.x, v.y, v.z)
 *         for v in result_hull.getVertexBuffer()
 */
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "srctools/_math.pyx":2479
 *     cdef list vectors = [
 *         _vector(v.x, v.y, v.z)
 *         for v in result_hull.getVertexBuffer()             # <<<<<<<<<<<<<<
 *     ]
 *     cdef vector[size_t] indices = result_hull.getIndexBuffer()
 */
    __pyx_t_7 = &__pyx_v_result_hull.getVertexBuffer();
    __pyx_t_6 = __pyx_t_7->begin();
    for (;;) {
      if (!(__pyx_t_6 != __pyx_t_7->end())) break;
      __pyx_t_8 = *__pyx_t_6;
      ++__pyx_t_6;
      __pyx_7genexpr__pyx_v_v = __pyx_t_8;

      /* "srctools/_math.pyx":2478
 * 
 *     cdef list vectors = [
 *         _vector(v.x, v.y, v.z)             # <<<<<<<<<<<<<<
 *         for v in result_hull.getVertexBuffer()
 *     ]
 */
      __pyx_t_5 = ((PyObject *)__pyx_f_8srctools_5_math__vector(__pyx_7genexpr__pyx_v_v.x, __pyx_7genexpr__pyx_v_v.y, __pyx_7genexpr__pyx_v_v.z)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2478, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 2477, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "srctools/_math.pyx":2479
 *     cdef list vectors = [
 *         _vector(v.x, v.y, v.z)
 *         for v in result_hull.getVertexBuffer()             # <<<<<<<<<<<<<<
 *     ]
 *     cdef vector[size_t] indices = result_hull.getIndexBuffer()
 */
    }
  } /* exit inner scope */
  __pyx_v_vectors = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "srctools/_math.pyx":2481
 *         for v in result_hull.getVertexBuffer()
 *     ]
 *     cdef vector[size_t] indices = result_hull.getIndexBuffer()             # <<<<<<<<<<<<<<
 *     res = []
 *     for ind in range(0, indices.size(), 3):
 */
  __pyx_v_indices = __pyx_v_result_hull.getIndexBuffer();

  /* "srctools/_math.pyx":2482
 *     ]
 *     cdef vector[size_t] indices = result_hull.getIndexBuffer()
 *     res = []             # <<<<<<<<<<<<<<
 *     for ind in range(0, indices.size(), 3):
 *         v1 = indices[ind + 0]
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_res = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "srctools/_math.pyx":2483
 *     cdef vector[size_t] indices = result_hull.getIndexBuffer()
 *     res = []
 *     for ind in range(0, indices.size(), 3):             # <<<<<<<<<<<<<<
 *         v1 = indices[ind + 0]
 *         v2 = indices[ind + 1]
 */
  __pyx_t_9 = __pyx_v_indices.size();
  __pyx_t_10 = __pyx_t_9;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=3) {
    __pyx_v_ind = __pyx_t_11;

    /* "srctools/_math.pyx":2484
 *     res = []
 *     for ind in range(0, indices.size(), 3):
 *         v1 = indices[ind + 0]             # <<<<<<<<<<<<<<
 *         v2 = indices[ind + 1]
 *         v3 = indices[ind + 2]
 */
    __pyx_v_v1 = (__pyx_v_indices[(__pyx_v_ind + 0)]);

    /* "srctools/_math.pyx":2485
 *     for ind in range(0, indices.size(), 3):
 *         v1 = indices[ind + 0]
 *         v2 = indices[ind + 1]             # <<<<<<<<<<<<<<
 *         v3 = indices[ind + 2]
 *         res.append((vectors[v1], vectors[v2], vectors[v3]))
 */
    __pyx_v_v2 = (__pyx_v_indices[(__pyx_v_ind + 1)]);

    /* "srctools/_math.pyx":2486
 *         v1 = indices[ind + 0]
 *         v2 = indices[ind + 1]
 *         v3 = indices[ind + 2]             # <<<<<<<<<<<<<<
 *         res.append((vectors[v1], vectors[v2], vectors[v3]))
 *     return res
 */
    __pyx_v_v3 = (__pyx_v_indices[(__pyx_v_ind + 2)]);

    /* "srctools/_math.pyx":2487
 *         v2 = indices[ind + 1]
 *         v3 = indices[ind + 2]
 *         res.append((vectors[v1], vectors[v2], vectors[v3]))             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_vectors, __pyx_v_v1, size_t, 0, __Pyx_PyInt_FromSize_t, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_vectors, __pyx_v_v2, size_t, 0, __Pyx_PyInt_FromSize_t, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = __Pyx_GetItemInt_List(__pyx_v_vectors, __pyx_v_v3, size_t, 0, __Pyx_PyInt_FromSize_t, 1, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_12);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_12 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_13); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 2487, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  }

  /* "srctools/_math.pyx":2488
 *         v3 = indices[ind + 2]
 *         res.append((vectors[v1], vectors[v2], vectors[v3]))
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "srctools/_math.pyx":2464
 * 
 * 
 * def quickhull(vertexes: 'Iterable[Vec]') -> 'list[tuple[Vec, Vec, Vec]]':             # <<<<<<<<<<<<<<
 *     """Use the quickhull algorithm to construct a convex hull around the provided points."""
 *     cdef size_t v1, v2, v3, ind
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("srctools._math.quickhull", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vecobj);
  __Pyx_XDECREF(__pyx_v_vectors);
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_8srctools_5_math_Vec *__pyx_freelist_8srctools_5_math_Vec[16];
static int __pyx_freecount_8srctools_5_math_Vec = 0;

static PyObject *__pyx_tp_new_8srctools_5_math_Vec(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8srctools_5_math_Vec > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8srctools_5_math_Vec)))) {
    o = (PyObject*)__pyx_freelist_8srctools_5_math_Vec[--__pyx_freecount_8srctools_5_math_Vec];
    memset(o, 0, sizeof(struct __pyx_obj_8srctools_5_math_Vec));
    (void) PyObject_INIT(o, t);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8srctools_5_math_Vec(PyObject *o) {
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8srctools_5_math_Vec < 16) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8srctools_5_math_Vec)))) {
    __pyx_freelist_8srctools_5_math_Vec[__pyx_freecount_8srctools_5_math_Vec++] = ((struct __pyx_obj_8srctools_5_math_Vec *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
static PyObject *__pyx_sq_item_8srctools_5_math_Vec(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_8srctools_5_math_Vec(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_8srctools_5_math_3Vec_123__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop_8srctools_5_math_3Vec_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8srctools_5_math_3Vec_1x_1__get__(o);
}

static int __pyx_setprop_8srctools_5_math_3Vec_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8srctools_5_math_3Vec_1x_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8srctools_5_math_3Vec_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8srctools_5_math_3Vec_1y_1__get__(o);
}

static int __pyx_setprop_8srctools_5_math_3Vec_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8srctools_5_math_3Vec_1y_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8srctools_5_math_3Vec_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8srctools_5_math_3Vec_1z_1__get__(o);
}

static int __pyx_setprop_8srctools_5_math_3Vec_z(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8srctools_5_math_3Vec_1z_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_8srctools_5_math_Vec[] = {
  {"copy", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_3copy, METH_NOARGS, __pyx_doc_8srctools_5_math_3Vec_2copy},
  {"__copy__", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_5__copy__, METH_NOARGS, __pyx_doc_8srctools_5_math_3Vec_4__copy__},
  {"__deepcopy__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_7__deepcopy__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_6__deepcopy__},
  {"__reduce__", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_9__reduce__, METH_NOARGS, __pyx_doc_8srctools_5_math_3Vec_8__reduce__},
  {"from_str", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_11from_str, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_10from_str},
  {"with_axes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_13with_axes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_12with_axes},
  {"rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_15rotate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_14rotate},
  {"rotate_by_str", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_17rotate_by_str, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_16rotate_by_str},
  {"bbox", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_19bbox, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_18bbox},
  {"iter_grid", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_21iter_grid, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_20iter_grid},
  {"iter_line", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_23iter_line, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_22iter_line},
  {"axis", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_25axis, METH_NOARGS, __pyx_doc_8srctools_5_math_3Vec_24axis},
  {"other_axes", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_27other_axes, METH_O, __pyx_doc_8srctools_5_math_3Vec_26other_axes},
  {"in_bbox", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_29in_bbox, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_28in_bbox},
  {"bbox_intersect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_31bbox_intersect, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_30bbox_intersect},
  {"as_tuple", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_33as_tuple, METH_NOARGS, __pyx_doc_8srctools_5_math_3Vec_32as_tuple},
  {"to_angle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_35to_angle, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_34to_angle},
  {"to_angle_roll", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_37to_angle_roll, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_36to_angle_roll},
  {"rotation_around", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_39rotation_around, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_38rotation_around},
  {"max", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_87max, METH_O, __pyx_doc_8srctools_5_math_3Vec_86max},
  {"min", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_89min, METH_O, __pyx_doc_8srctools_5_math_3Vec_88min},
  {"__round__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_91__round__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_90__round__},
  {"mag_sq", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_93mag_sq, METH_NOARGS, __pyx_doc_8srctools_5_math_3Vec_92mag_sq},
  {"len_sq", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_95len_sq, METH_NOARGS, __pyx_doc_8srctools_5_math_3Vec_94len_sq},
  {"mag", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_97mag, METH_NOARGS, __pyx_doc_8srctools_5_math_3Vec_96mag},
  {"len", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_99len, METH_NOARGS, __pyx_doc_8srctools_5_math_3Vec_98len},
  {"norm", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_101norm, METH_NOARGS, __pyx_doc_8srctools_5_math_3Vec_100norm},
  {"norm_mask", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_103norm_mask, METH_O, __pyx_doc_8srctools_5_math_3Vec_102norm_mask},
  {"dot", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_105dot, METH_O, __pyx_doc_8srctools_5_math_3Vec_104dot},
  {"cross", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_107cross, METH_O, __pyx_doc_8srctools_5_math_3Vec_106cross},
  {"localise", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_109localise, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_108localise},
  {"join", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_3Vec_111join, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_3Vec_110join},
  {"__format__", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_117__format__, METH_O, __pyx_doc_8srctools_5_math_3Vec_116__format__},
  {"transform", (PyCFunction)__pyx_pw_8srctools_5_math_3Vec_125transform, METH_NOARGS, __pyx_doc_8srctools_5_math_3Vec_124transform},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8srctools_5_math_Vec[] = {
  {(char *)"x", __pyx_getprop_8srctools_5_math_3Vec_x, __pyx_setprop_8srctools_5_math_3Vec_x, (char *)"The X axis of the vector.", 0},
  {(char *)"y", __pyx_getprop_8srctools_5_math_3Vec_y, __pyx_setprop_8srctools_5_math_3Vec_y, (char *)"The Y axis of the vector.", 0},
  {(char *)"z", __pyx_getprop_8srctools_5_math_3Vec_z, __pyx_setprop_8srctools_5_math_3Vec_z, (char *)"The Z axis of the vector.", 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Vec = {
  __pyx_pw_8srctools_5_math_3Vec_49__add__, /*nb_add*/
  __pyx_pw_8srctools_5_math_3Vec_51__sub__, /*nb_subtract*/
  __pyx_pw_8srctools_5_math_3Vec_53__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  __pyx_pw_8srctools_5_math_3Vec_59__mod__, /*nb_remainder*/
  __pyx_pw_8srctools_5_math_3Vec_79__divmod__, /*nb_divmod*/
  0, /*nb_power*/
  __pyx_pw_8srctools_5_math_3Vec_43__neg__, /*nb_negative*/
  __pyx_pw_8srctools_5_math_3Vec_45__pos__, /*nb_positive*/
  __pyx_pw_8srctools_5_math_3Vec_41__abs__, /*nb_absolute*/
  __pyx_pw_8srctools_5_math_3Vec_81__bool__, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  __pyx_pw_8srctools_5_math_3Vec_63__iadd__, /*nb_inplace_add*/
  __pyx_pw_8srctools_5_math_3Vec_65__isub__, /*nb_inplace_subtract*/
  __pyx_pw_8srctools_5_math_3Vec_67__imul__, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  __pyx_pw_8srctools_5_math_3Vec_73__imod__, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  __pyx_pw_8srctools_5_math_3Vec_57__floordiv__, /*nb_floor_divide*/
  __pyx_pw_8srctools_5_math_3Vec_55__truediv__, /*nb_true_divide*/
  __pyx_pw_8srctools_5_math_3Vec_71__ifloordiv__, /*nb_inplace_floor_divide*/
  __pyx_pw_8srctools_5_math_3Vec_69__itruediv__, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  __pyx_pw_8srctools_5_math_3Vec_75__matmul__, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  __pyx_pw_8srctools_5_math_3Vec_77__imatmul__, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Vec = {
  __pyx_pw_8srctools_5_math_3Vec_83__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8srctools_5_math_Vec, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_8srctools_5_math_3Vec_47__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Vec = {
  __pyx_pw_8srctools_5_math_3Vec_83__len__, /*mp_length*/
  __pyx_pw_8srctools_5_math_3Vec_121__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_8srctools_5_math_Vec, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8srctools_5_math_Vec = {
  PyVarObject_HEAD_INIT(0, 0)
  "srctools._math.Vec", /*tp_name*/
  sizeof(struct __pyx_obj_8srctools_5_math_Vec), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8srctools_5_math_Vec, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8srctools_5_math_3Vec_115__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Vec, /*tp_as_number*/
  &__pyx_tp_as_sequence_Vec, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Vec, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_8srctools_5_math_3Vec_113__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  "Vec(x=0.0, y=0.0, z=0.0) -> None\nA 3D Vector. This has most standard Vector functions.\n\n    Many of the functions will accept a 3-tuple for comparison purposes.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_8srctools_5_math_3Vec_85__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8srctools_5_math_3Vec_119__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8srctools_5_math_Vec, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8srctools_5_math_Vec, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8srctools_5_math_3Vec_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8srctools_5_math_Vec, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_8srctools_5_math_Matrix *__pyx_freelist_8srctools_5_math_Matrix[16];
static int __pyx_freecount_8srctools_5_math_Matrix = 0;

static PyObject *__pyx_tp_new_8srctools_5_math_Matrix(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8srctools_5_math_Matrix > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8srctools_5_math_Matrix)))) {
    o = (PyObject*)__pyx_freelist_8srctools_5_math_Matrix[--__pyx_freecount_8srctools_5_math_Matrix];
    memset(o, 0, sizeof(struct __pyx_obj_8srctools_5_math_Matrix));
    (void) PyObject_INIT(o, t);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8srctools_5_math_Matrix(PyObject *o) {
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8srctools_5_math_Matrix < 16) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8srctools_5_math_Matrix)))) {
    __pyx_freelist_8srctools_5_math_Matrix[__pyx_freecount_8srctools_5_math_Matrix++] = ((struct __pyx_obj_8srctools_5_math_Matrix *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
static PyObject *__pyx_sq_item_8srctools_5_math_Matrix(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_8srctools_5_math_Matrix(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_8srctools_5_math_6Matrix_35__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_richcompare_8srctools_5_math_Matrix(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_8srctools_5_math_6Matrix_3__eq__(o1, o2);
    }
    case Py_NE: {
      return __pyx_pw_8srctools_5_math_6Matrix_5__ne__(o1, o2);
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyMethodDef __pyx_methods_8srctools_5_math_Matrix[] = {
  {"copy", (PyCFunction)__pyx_pw_8srctools_5_math_6Matrix_9copy, METH_NOARGS, __pyx_doc_8srctools_5_math_6Matrix_8copy},
  {"__copy__", (PyCFunction)__pyx_pw_8srctools_5_math_6Matrix_11__copy__, METH_NOARGS, __pyx_doc_8srctools_5_math_6Matrix_10__copy__},
  {"__deepcopy__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_6Matrix_13__deepcopy__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_6Matrix_12__deepcopy__},
  {"__reduce__", (PyCFunction)__pyx_pw_8srctools_5_math_6Matrix_15__reduce__, METH_NOARGS, __pyx_doc_8srctools_5_math_6Matrix_14__reduce__},
  {"from_pitch", (PyCFunction)__pyx_pw_8srctools_5_math_6Matrix_17from_pitch, METH_O, __pyx_doc_8srctools_5_math_6Matrix_16from_pitch},
  {"from_yaw", (PyCFunction)__pyx_pw_8srctools_5_math_6Matrix_19from_yaw, METH_O, __pyx_doc_8srctools_5_math_6Matrix_18from_yaw},
  {"from_roll", (PyCFunction)__pyx_pw_8srctools_5_math_6Matrix_21from_roll, METH_O, __pyx_doc_8srctools_5_math_6Matrix_20from_roll},
  {"from_angle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_6Matrix_23from_angle, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_6Matrix_22from_angle},
  {"axis_angle", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_6Matrix_25axis_angle, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_6Matrix_24axis_angle},
  {"forward", (PyCFunction)__pyx_pw_8srctools_5_math_6Matrix_27forward, METH_NOARGS, __pyx_doc_8srctools_5_math_6Matrix_26forward},
  {"left", (PyCFunction)__pyx_pw_8srctools_5_math_6Matrix_29left, METH_NOARGS, __pyx_doc_8srctools_5_math_6Matrix_28left},
  {"up", (PyCFunction)__pyx_pw_8srctools_5_math_6Matrix_31up, METH_NOARGS, __pyx_doc_8srctools_5_math_6Matrix_30up},
  {"to_angle", (PyCFunction)__pyx_pw_8srctools_5_math_6Matrix_37to_angle, METH_NOARGS, __pyx_doc_8srctools_5_math_6Matrix_36to_angle},
  {"transpose", (PyCFunction)__pyx_pw_8srctools_5_math_6Matrix_39transpose, METH_NOARGS, __pyx_doc_8srctools_5_math_6Matrix_38transpose},
  {"from_basis", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_6Matrix_41from_basis, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_6Matrix_40from_basis},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Matrix = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  __pyx_pw_8srctools_5_math_6Matrix_43__matmul__, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  __pyx_pw_8srctools_5_math_6Matrix_45__imatmul__, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Matrix = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8srctools_5_math_Matrix, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Matrix = {
  0, /*mp_length*/
  __pyx_pw_8srctools_5_math_6Matrix_33__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_8srctools_5_math_Matrix, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8srctools_5_math_Matrix = {
  PyVarObject_HEAD_INIT(0, 0)
  "srctools._math.Matrix", /*tp_name*/
  sizeof(struct __pyx_obj_8srctools_5_math_Matrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8srctools_5_math_Matrix, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8srctools_5_math_6Matrix_7__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Matrix, /*tp_as_number*/
  &__pyx_tp_as_sequence_Matrix, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Matrix, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  "Matrix() -> None\nRepresents a matrix via a transformation matrix.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_8srctools_5_math_Matrix, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8srctools_5_math_Matrix, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8srctools_5_math_6Matrix_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8srctools_5_math_Matrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_8srctools_5_math_Angle *__pyx_freelist_8srctools_5_math_Angle[16];
static int __pyx_freecount_8srctools_5_math_Angle = 0;

static PyObject *__pyx_tp_new_8srctools_5_math_Angle(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8srctools_5_math_Angle > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8srctools_5_math_Angle)))) {
    o = (PyObject*)__pyx_freelist_8srctools_5_math_Angle[--__pyx_freecount_8srctools_5_math_Angle];
    memset(o, 0, sizeof(struct __pyx_obj_8srctools_5_math_Angle));
    (void) PyObject_INIT(o, t);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8srctools_5_math_Angle(PyObject *o) {
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8srctools_5_math_Angle < 16) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8srctools_5_math_Angle)))) {
    __pyx_freelist_8srctools_5_math_Angle[__pyx_freecount_8srctools_5_math_Angle++] = ((struct __pyx_obj_8srctools_5_math_Angle *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
static PyObject *__pyx_sq_item_8srctools_5_math_Angle(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_8srctools_5_math_Angle(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_8srctools_5_math_5Angle_31__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop_8srctools_5_math_5Angle_pitch(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8srctools_5_math_5Angle_5pitch_1__get__(o);
}

static int __pyx_setprop_8srctools_5_math_5Angle_pitch(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8srctools_5_math_5Angle_5pitch_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8srctools_5_math_5Angle_yaw(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8srctools_5_math_5Angle_3yaw_1__get__(o);
}

static int __pyx_setprop_8srctools_5_math_5Angle_yaw(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8srctools_5_math_5Angle_3yaw_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8srctools_5_math_5Angle_roll(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8srctools_5_math_5Angle_4roll_1__get__(o);
}

static int __pyx_setprop_8srctools_5_math_5Angle_roll(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8srctools_5_math_5Angle_4roll_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_8srctools_5_math_Angle[] = {
  {"copy", (PyCFunction)__pyx_pw_8srctools_5_math_5Angle_3copy, METH_NOARGS, __pyx_doc_8srctools_5_math_5Angle_2copy},
  {"__copy__", (PyCFunction)__pyx_pw_8srctools_5_math_5Angle_5__copy__, METH_NOARGS, __pyx_doc_8srctools_5_math_5Angle_4__copy__},
  {"__deepcopy__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_5Angle_7__deepcopy__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_5Angle_6__deepcopy__},
  {"__reduce__", (PyCFunction)__pyx_pw_8srctools_5_math_5Angle_9__reduce__, METH_NOARGS, __pyx_doc_8srctools_5_math_5Angle_8__reduce__},
  {"from_str", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_5Angle_11from_str, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_5Angle_10from_str},
  {"join", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_5Angle_13join, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_5Angle_12join},
  {"__format__", (PyCFunction)__pyx_pw_8srctools_5_math_5Angle_19__format__, METH_O, __pyx_doc_8srctools_5_math_5Angle_18__format__},
  {"as_tuple", (PyCFunction)__pyx_pw_8srctools_5_math_5Angle_21as_tuple, METH_NOARGS, __pyx_doc_8srctools_5_math_5Angle_20as_tuple},
  {"with_axes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_5Angle_25with_axes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_5Angle_24with_axes},
  {"from_basis", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_5Angle_27from_basis, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_5Angle_26from_basis},
  {"transform", (PyCFunction)__pyx_pw_8srctools_5_math_5Angle_39transform, METH_NOARGS, __pyx_doc_8srctools_5_math_5Angle_38transform},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8srctools_5_math_Angle[] = {
  {(char *)"pitch", __pyx_getprop_8srctools_5_math_5Angle_pitch, __pyx_setprop_8srctools_5_math_5Angle_pitch, (char *)"The Y-axis rotation, performed second.", 0},
  {(char *)"yaw", __pyx_getprop_8srctools_5_math_5Angle_yaw, __pyx_setprop_8srctools_5_math_5Angle_yaw, (char *)"The Z-axis rotation, performed last.", 0},
  {(char *)"roll", __pyx_getprop_8srctools_5_math_5Angle_roll, __pyx_setprop_8srctools_5_math_5Angle_roll, (char *)"The X-axis rotation, performed first.", 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Angle = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8srctools_5_math_5Angle_35__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  __pyx_pw_8srctools_5_math_5Angle_37__matmul__, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Angle = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8srctools_5_math_Angle, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Angle = {
  0, /*mp_length*/
  __pyx_pw_8srctools_5_math_5Angle_29__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_8srctools_5_math_Angle, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8srctools_5_math_Angle = {
  PyVarObject_HEAD_INIT(0, 0)
  "srctools._math.Angle", /*tp_name*/
  sizeof(struct __pyx_obj_8srctools_5_math_Angle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8srctools_5_math_Angle, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8srctools_5_math_5Angle_17__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Angle, /*tp_as_number*/
  &__pyx_tp_as_sequence_Angle, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Angle, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_8srctools_5_math_5Angle_15__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  "Angle(pitch=0.0, yaw=0.0, roll=0.0) -> None\nRepresents a pitch-yaw-roll Euler angle.\n\n    All values are remapped to between 0-360 when set.\n    Addition and subtraction modify values, matrix-multiplication with\n    Vec, Angle or Matrix rotates (RHS rotating LHS).\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_8srctools_5_math_5Angle_33__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8srctools_5_math_5Angle_23__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8srctools_5_math_Angle, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8srctools_5_math_Angle, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8srctools_5_math_5Angle_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8srctools_5_math_Angle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8srctools_5_math_VecIter(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8srctools_5_math_VecIter *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8srctools_5_math_VecIter *)o);
  p->vec = ((struct __pyx_obj_8srctools_5_math_Vec *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8srctools_5_math_7VecIter_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8srctools_5_math_VecIter(PyObject *o) {
  struct __pyx_obj_8srctools_5_math_VecIter *p = (struct __pyx_obj_8srctools_5_math_VecIter *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->vec);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8srctools_5_math_VecIter(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8srctools_5_math_VecIter *p = (struct __pyx_obj_8srctools_5_math_VecIter *)o;
  if (p->vec) {
    e = (*v)(((PyObject *)p->vec), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8srctools_5_math_VecIter(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8srctools_5_math_VecIter *p = (struct __pyx_obj_8srctools_5_math_VecIter *)o;
  tmp = ((PyObject*)p->vec);
  p->vec = ((struct __pyx_obj_8srctools_5_math_Vec *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_8srctools_5_math_7VecIter_5__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {return __pyx_pw_8srctools_5_math_7VecIter_5__next__(self);}

static PyMethodDef __pyx_methods_8srctools_5_math_VecIter[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_8srctools_5_math_7VecIter_5__next__, METH_NOARGS|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8srctools_5_math_VecIter = {
  PyVarObject_HEAD_INIT(0, 0)
  "srctools._math.VecIter", /*tp_name*/
  sizeof(struct __pyx_obj_8srctools_5_math_VecIter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8srctools_5_math_VecIter, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Implements iter(Vec).", /*tp_doc*/
  __pyx_tp_traverse_8srctools_5_math_VecIter, /*tp_traverse*/
  __pyx_tp_clear_8srctools_5_math_VecIter, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8srctools_5_math_7VecIter_3__iter__, /*tp_iter*/
  __pyx_pw_8srctools_5_math_7VecIter_5__next__, /*tp_iternext*/
  __pyx_methods_8srctools_5_math_VecIter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8srctools_5_math_VecIter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8srctools_5_math_VecIterGrid(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8srctools_5_math_VecIterGrid(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_8srctools_5_math_11VecIterGrid_3__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {return __pyx_pw_8srctools_5_math_11VecIterGrid_3__next__(self);}

static PyMethodDef __pyx_methods_8srctools_5_math_VecIterGrid[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_8srctools_5_math_11VecIterGrid_3__next__, METH_NOARGS|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8srctools_5_math_VecIterGrid = {
  PyVarObject_HEAD_INIT(0, 0)
  "srctools._math.VecIterGrid", /*tp_name*/
  sizeof(struct __pyx_obj_8srctools_5_math_VecIterGrid), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8srctools_5_math_VecIterGrid, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  "Implements Vec.iter_grid().", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8srctools_5_math_11VecIterGrid_1__iter__, /*tp_iter*/
  __pyx_pw_8srctools_5_math_11VecIterGrid_3__next__, /*tp_iternext*/
  __pyx_methods_8srctools_5_math_VecIterGrid, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8srctools_5_math_VecIterGrid, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8srctools_5_math_VecIterLine(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8srctools_5_math_VecIterLine(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_8srctools_5_math_11VecIterLine_3__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {return __pyx_pw_8srctools_5_math_11VecIterLine_3__next__(self);}

static PyMethodDef __pyx_methods_8srctools_5_math_VecIterLine[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_8srctools_5_math_11VecIterLine_3__next__, METH_NOARGS|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8srctools_5_math_VecIterLine = {
  PyVarObject_HEAD_INIT(0, 0)
  "srctools._math.VecIterLine", /*tp_name*/
  sizeof(struct __pyx_obj_8srctools_5_math_VecIterLine), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8srctools_5_math_VecIterLine, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  "Implements Vec.iter_line().", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8srctools_5_math_11VecIterLine_1__iter__, /*tp_iter*/
  __pyx_pw_8srctools_5_math_11VecIterLine_3__next__, /*tp_iternext*/
  __pyx_methods_8srctools_5_math_VecIterLine, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8srctools_5_math_VecIterLine, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8srctools_5_math_AngleIter(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8srctools_5_math_AngleIter *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8srctools_5_math_AngleIter *)o);
  p->ang = ((struct __pyx_obj_8srctools_5_math_Angle *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8srctools_5_math_9AngleIter_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8srctools_5_math_AngleIter(PyObject *o) {
  struct __pyx_obj_8srctools_5_math_AngleIter *p = (struct __pyx_obj_8srctools_5_math_AngleIter *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->ang);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8srctools_5_math_AngleIter(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8srctools_5_math_AngleIter *p = (struct __pyx_obj_8srctools_5_math_AngleIter *)o;
  if (p->ang) {
    e = (*v)(((PyObject *)p->ang), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8srctools_5_math_AngleIter(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8srctools_5_math_AngleIter *p = (struct __pyx_obj_8srctools_5_math_AngleIter *)o;
  tmp = ((PyObject*)p->ang);
  p->ang = ((struct __pyx_obj_8srctools_5_math_Angle *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_8srctools_5_math_9AngleIter_5__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {return __pyx_pw_8srctools_5_math_9AngleIter_5__next__(self);}

static PyMethodDef __pyx_methods_8srctools_5_math_AngleIter[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_8srctools_5_math_9AngleIter_5__next__, METH_NOARGS|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8srctools_5_math_AngleIter = {
  PyVarObject_HEAD_INIT(0, 0)
  "srctools._math.AngleIter", /*tp_name*/
  sizeof(struct __pyx_obj_8srctools_5_math_AngleIter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8srctools_5_math_AngleIter, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Implements iter(Angle).", /*tp_doc*/
  __pyx_tp_traverse_8srctools_5_math_AngleIter, /*tp_traverse*/
  __pyx_tp_clear_8srctools_5_math_AngleIter, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8srctools_5_math_9AngleIter_3__iter__, /*tp_iter*/
  __pyx_pw_8srctools_5_math_9AngleIter_5__next__, /*tp_iternext*/
  __pyx_methods_8srctools_5_math_AngleIter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8srctools_5_math_AngleIter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8srctools_5_math_VecTransform(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8srctools_5_math_VecTransform *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8srctools_5_math_VecTransform *)o);
  p->mat = ((struct __pyx_obj_8srctools_5_math_Matrix *)Py_None); Py_INCREF(Py_None);
  p->vec = ((struct __pyx_obj_8srctools_5_math_Vec *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8srctools_5_math_12VecTransform_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8srctools_5_math_VecTransform(PyObject *o) {
  struct __pyx_obj_8srctools_5_math_VecTransform *p = (struct __pyx_obj_8srctools_5_math_VecTransform *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->mat);
  Py_CLEAR(p->vec);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8srctools_5_math_VecTransform(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8srctools_5_math_VecTransform *p = (struct __pyx_obj_8srctools_5_math_VecTransform *)o;
  if (p->mat) {
    e = (*v)(((PyObject *)p->mat), a); if (e) return e;
  }
  if (p->vec) {
    e = (*v)(((PyObject *)p->vec), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8srctools_5_math_VecTransform(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8srctools_5_math_VecTransform *p = (struct __pyx_obj_8srctools_5_math_VecTransform *)o;
  tmp = ((PyObject*)p->mat);
  p->mat = ((struct __pyx_obj_8srctools_5_math_Matrix *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->vec);
  p->vec = ((struct __pyx_obj_8srctools_5_math_Vec *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8srctools_5_math_VecTransform[] = {
  {"__enter__", (PyCFunction)__pyx_pw_8srctools_5_math_12VecTransform_3__enter__, METH_NOARGS, __pyx_doc_8srctools_5_math_12VecTransform_2__enter__},
  {"__exit__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_12VecTransform_5__exit__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_12VecTransform_4__exit__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8srctools_5_math_VecTransform = {
  PyVarObject_HEAD_INIT(0, 0)
  "srctools._math.VecTransform", /*tp_name*/
  sizeof(struct __pyx_obj_8srctools_5_math_VecTransform), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8srctools_5_math_VecTransform, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Implements Vec.transform().", /*tp_doc*/
  __pyx_tp_traverse_8srctools_5_math_VecTransform, /*tp_traverse*/
  __pyx_tp_clear_8srctools_5_math_VecTransform, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8srctools_5_math_VecTransform, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8srctools_5_math_VecTransform, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8srctools_5_math_AngleTransform(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8srctools_5_math_AngleTransform *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8srctools_5_math_AngleTransform *)o);
  p->mat = ((struct __pyx_obj_8srctools_5_math_Matrix *)Py_None); Py_INCREF(Py_None);
  p->ang = ((struct __pyx_obj_8srctools_5_math_Angle *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8srctools_5_math_14AngleTransform_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8srctools_5_math_AngleTransform(PyObject *o) {
  struct __pyx_obj_8srctools_5_math_AngleTransform *p = (struct __pyx_obj_8srctools_5_math_AngleTransform *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->mat);
  Py_CLEAR(p->ang);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8srctools_5_math_AngleTransform(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8srctools_5_math_AngleTransform *p = (struct __pyx_obj_8srctools_5_math_AngleTransform *)o;
  if (p->mat) {
    e = (*v)(((PyObject *)p->mat), a); if (e) return e;
  }
  if (p->ang) {
    e = (*v)(((PyObject *)p->ang), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8srctools_5_math_AngleTransform(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8srctools_5_math_AngleTransform *p = (struct __pyx_obj_8srctools_5_math_AngleTransform *)o;
  tmp = ((PyObject*)p->mat);
  p->mat = ((struct __pyx_obj_8srctools_5_math_Matrix *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ang);
  p->ang = ((struct __pyx_obj_8srctools_5_math_Angle *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8srctools_5_math_AngleTransform[] = {
  {"__enter__", (PyCFunction)__pyx_pw_8srctools_5_math_14AngleTransform_3__enter__, METH_NOARGS, __pyx_doc_8srctools_5_math_14AngleTransform_2__enter__},
  {"__exit__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8srctools_5_math_14AngleTransform_5__exit__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8srctools_5_math_14AngleTransform_4__exit__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8srctools_5_math_AngleTransform = {
  PyVarObject_HEAD_INIT(0, 0)
  "srctools._math.AngleTransform", /*tp_name*/
  sizeof(struct __pyx_obj_8srctools_5_math_AngleTransform), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8srctools_5_math_AngleTransform, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Implements Angle.transform().", /*tp_doc*/
  __pyx_tp_traverse_8srctools_5_math_AngleTransform, /*tp_traverse*/
  __pyx_tp_clear_8srctools_5_math_AngleTransform, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8srctools_5_math_AngleTransform, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8srctools_5_math_AngleTransform, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__math(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__math},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_math",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 1, 0, 0},
  {&__pyx_kp_u_Angle, __pyx_k_Angle, sizeof(__pyx_k_Angle), 0, 1, 0, 0},
  {&__pyx_n_s_Angle_2, __pyx_k_Angle_2, sizeof(__pyx_k_Angle_2), 0, 0, 1, 1},
  {&__pyx_kp_u_Angle_with_axis_takes_2_4_or_6_p, __pyx_k_Angle_with_axis_takes_2_4_or_6_p, sizeof(__pyx_k_Angle_with_axis_takes_2_4_or_6_p), 0, 1, 0, 0},
  {&__pyx_kp_u_At_least_two_vectors_must_be_pro, __pyx_k_At_least_two_vectors_must_be_pro, sizeof(__pyx_k_At_least_two_vectors_must_be_pro), 0, 1, 0, 0},
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_kp_u_Called_with_non_vectors, __pyx_k_Called_with_non_vectors, sizeof(__pyx_k_Called_with_non_vectors), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_convert_scalars_to_an_Ang, __pyx_k_Cannot_convert_scalars_to_an_Ang, sizeof(__pyx_k_Cannot_convert_scalars_to_an_Ang), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_divide_2_Vectors, __pyx_k_Cannot_divide_2_Vectors, sizeof(__pyx_k_Cannot_divide_2_Vectors), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_floor_divide_2_Vectors, __pyx_k_Cannot_floor_divide_2_Vectors, sizeof(__pyx_k_Cannot_floor_divide_2_Vectors), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_modulus_2_Vectors, __pyx_k_Cannot_modulus_2_Vectors, sizeof(__pyx_k_Cannot_modulus_2_Vectors), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_multiply_2_Vectors, __pyx_k_Cannot_multiply_2_Vectors, sizeof(__pyx_k_Cannot_multiply_2_Vectors), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_use_scalars_here, __pyx_k_Cannot_use_scalars_here, sizeof(__pyx_k_Cannot_use_scalars_here), 0, 1, 0, 0},
  {&__pyx_n_s_DeprecationWarning, __pyx_k_DeprecationWarning, sizeof(__pyx_k_DeprecationWarning), 0, 0, 1, 1},
  {&__pyx_n_s_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 0, 1, 1},
  {&__pyx_kp_u_Empty_iterator, __pyx_k_Empty_iterator, sizeof(__pyx_k_Empty_iterator), 0, 1, 0, 0},
  {&__pyx_n_s_INV_AXIS, __pyx_k_INV_AXIS, sizeof(__pyx_k_INV_AXIS), 0, 0, 1, 1},
  {&__pyx_kp_u_Invalid_axis, __pyx_k_Invalid_axis, sizeof(__pyx_k_Invalid_axis), 0, 1, 0, 0},
  {&__pyx_kp_u_Invalid_axis_2, __pyx_k_Invalid_axis_2, sizeof(__pyx_k_Invalid_axis_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Invalid_coordinate, __pyx_k_Invalid_coordinate, sizeof(__pyx_k_Invalid_coordinate), 0, 1, 0, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_kp_u_Matrix, __pyx_k_Matrix, sizeof(__pyx_k_Matrix), 0, 1, 0, 0},
  {&__pyx_n_s_Matrix_2, __pyx_k_Matrix_2, sizeof(__pyx_k_Matrix_2), 0, 0, 1, 1},
  {&__pyx_kp_u_Matrix_from_angles_accepts_a_sin, __pyx_k_Matrix_from_angles_accepts_a_sin, sizeof(__pyx_k_Matrix_from_angles_accepts_a_sin), 0, 1, 0, 0},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_kp_u_Neither_are_Matrices, __pyx_k_Neither_are_Matrices, sizeof(__pyx_k_Neither_are_Matrices), 0, 1, 0, 0},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_n_s_OverflowError, __pyx_k_OverflowError, sizeof(__pyx_k_OverflowError), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_SystemError, __pyx_k_SystemError, sizeof(__pyx_k_SystemError), 0, 0, 1, 1},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Unknown_operation, __pyx_k_Unknown_operation, sizeof(__pyx_k_Unknown_operation), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u_Vec, __pyx_k_Vec, sizeof(__pyx_k_Vec), 0, 1, 0, 0},
  {&__pyx_n_s_Vec_2, __pyx_k_Vec_2, sizeof(__pyx_k_Vec_2), 0, 0, 1, 1},
  {&__pyx_kp_u_Vec_bbox_expected_at_least_1_arg, __pyx_k_Vec_bbox_expected_at_least_1_arg, sizeof(__pyx_k_Vec_bbox_expected_at_least_1_arg), 0, 1, 0, 0},
  {&__pyx_n_s_Vec_tuple, __pyx_k_Vec_tuple, sizeof(__pyx_k_Vec_tuple), 0, 0, 1, 1},
  {&__pyx_kp_u_Vec_tuple_is_not_a_tuple_subclas, __pyx_k_Vec_tuple_is_not_a_tuple_subclas, sizeof(__pyx_k_Vec_tuple_is_not_a_tuple_subclas), 0, 1, 0, 0},
  {&__pyx_kp_u_Vec_with_axis_takes_2_4_or_6_pos, __pyx_k_Vec_with_axis_takes_2_4_or_6_pos, sizeof(__pyx_k_Vec_with_axis_takes_2_4_or_6_pos), 0, 1, 0, 0},
  {&__pyx_n_s_W, __pyx_k_W, sizeof(__pyx_k_W), 0, 0, 1, 1},
  {&__pyx_kp_u__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 0},
  {&__pyx_kp_u__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 0},
  {&__pyx_kp_u__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},
  {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_ang, __pyx_k_ang, sizeof(__pyx_k_ang), 0, 0, 1, 1},
  {&__pyx_n_s_angle, __pyx_k_angle, sizeof(__pyx_k_angle), 0, 0, 1, 1},
  {&__pyx_n_s_angles, __pyx_k_angles, sizeof(__pyx_k_angles), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_axis_angle, __pyx_k_axis_angle, sizeof(__pyx_k_axis_angle), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_bbox, __pyx_k_bbox, sizeof(__pyx_k_bbox), 0, 0, 1, 1},
  {&__pyx_n_s_bbox_intersect, __pyx_k_bbox_intersect, sizeof(__pyx_k_bbox_intersect), 0, 0, 1, 1},
  {&__pyx_n_s_bottom, __pyx_k_bottom, sizeof(__pyx_k_bottom), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_delim, __pyx_k_delim, sizeof(__pyx_k_delim), 0, 0, 1, 1},
  {&__pyx_n_s_east, __pyx_k_east, sizeof(__pyx_k_east), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_exc_tb, __pyx_k_exc_tb, sizeof(__pyx_k_exc_tb), 0, 0, 1, 1},
  {&__pyx_n_s_exc_type, __pyx_k_exc_type, sizeof(__pyx_k_exc_type), 0, 0, 1, 1},
  {&__pyx_n_s_exc_val, __pyx_k_exc_val, sizeof(__pyx_k_exc_val), 0, 0, 1, 1},
  {&__pyx_n_s_from_angle, __pyx_k_from_angle, sizeof(__pyx_k_from_angle), 0, 0, 1, 1},
  {&__pyx_n_s_from_basis, __pyx_k_from_basis, sizeof(__pyx_k_from_basis), 0, 0, 1, 1},
  {&__pyx_n_s_from_pitch, __pyx_k_from_pitch, sizeof(__pyx_k_from_pitch), 0, 0, 1, 1},
  {&__pyx_n_s_from_roll, __pyx_k_from_roll, sizeof(__pyx_k_from_roll), 0, 0, 1, 1},
  {&__pyx_n_s_from_str, __pyx_k_from_str, sizeof(__pyx_k_from_str), 0, 0, 1, 1},
  {&__pyx_n_s_from_yaw, __pyx_k_from_yaw, sizeof(__pyx_k_from_yaw), 0, 0, 1, 1},
  {&__pyx_n_u_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 1, 0, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_max, __pyx_k_in_max, sizeof(__pyx_k_in_max), 0, 0, 1, 1},
  {&__pyx_n_s_in_min, __pyx_k_in_min, sizeof(__pyx_k_in_min), 0, 0, 1, 1},
  {&__pyx_n_s_ind, __pyx_k_ind, sizeof(__pyx_k_ind), 0, 0, 1, 1},
  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
  {&__pyx_kp_u_is_not_a_Vec_like_object, __pyx_k_is_not_a_Vec_like_object, sizeof(__pyx_k_is_not_a_Vec_like_object), 0, 1, 0, 0},
  {&__pyx_kp_u_is_not_an_Angle_like_object, __pyx_k_is_not_an_Angle_like_object, sizeof(__pyx_k_is_not_an_Angle_like_object), 0, 1, 0, 0},
  {&__pyx_kp_u_is_not_an_on_axis_vector, __pyx_k_is_not_an_on_axis_vector, sizeof(__pyx_k_is_not_an_on_axis_vector), 0, 1, 0, 0},
  {&__pyx_n_s_iter_grid, __pyx_k_iter_grid, sizeof(__pyx_k_iter_grid), 0, 0, 1, 1},
  {&__pyx_n_s_lerp, __pyx_k_lerp, sizeof(__pyx_k_lerp), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max1, __pyx_k_max1, sizeof(__pyx_k_max1), 0, 0, 1, 1},
  {&__pyx_n_s_max2, __pyx_k_max2, sizeof(__pyx_k_max2), 0, 0, 1, 1},
  {&__pyx_n_s_max_pos, __pyx_k_max_pos, sizeof(__pyx_k_max_pos), 0, 0, 1, 1},
  {&__pyx_n_s_memodict, __pyx_k_memodict, sizeof(__pyx_k_memodict), 0, 0, 1, 1},
  {&__pyx_n_s_min1, __pyx_k_min1, sizeof(__pyx_k_min1), 0, 0, 1, 1},
  {&__pyx_n_s_min2, __pyx_k_min2, sizeof(__pyx_k_min2), 0, 0, 1, 1},
  {&__pyx_n_s_min_pos, __pyx_k_min_pos, sizeof(__pyx_k_min_pos), 0, 0, 1, 1},
  {&__pyx_n_s_mk_ang, __pyx_k_mk_ang, sizeof(__pyx_k_mk_ang), 0, 0, 1, 1},
  {&__pyx_n_s_mk_mat, __pyx_k_mk_mat, sizeof(__pyx_k_mk_mat), 0, 0, 1, 1},
  {&__pyx_n_s_mk_vec, __pyx_k_mk_vec, sizeof(__pyx_k_mk_vec), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_north, __pyx_k_north, sizeof(__pyx_k_north), 0, 0, 1, 1},
  {&__pyx_n_s_origin, __pyx_k_origin, sizeof(__pyx_k_origin), 0, 0, 1, 1},
  {&__pyx_n_s_out_max, __pyx_k_out_max, sizeof(__pyx_k_out_max), 0, 0, 1, 1},
  {&__pyx_n_s_out_min, __pyx_k_out_min, sizeof(__pyx_k_out_min), 0, 0, 1, 1},
  {&__pyx_n_u_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 1, 0, 1},
  {&__pyx_n_s_parse_vec_str, __pyx_k_parse_vec_str, sizeof(__pyx_k_parse_vec_str), 0, 0, 1, 1},
  {&__pyx_n_u_pit, __pyx_k_pit, sizeof(__pyx_k_pit), 0, 1, 0, 1},
  {&__pyx_n_s_pitch, __pyx_k_pitch, sizeof(__pyx_k_pitch), 0, 0, 1, 1},
  {&__pyx_n_u_pitch, __pyx_k_pitch, sizeof(__pyx_k_pitch), 0, 1, 0, 1},
  {&__pyx_n_s_qhull, __pyx_k_qhull, sizeof(__pyx_k_qhull), 0, 0, 1, 1},
  {&__pyx_n_s_quickhull, __pyx_k_quickhull, sizeof(__pyx_k_quickhull), 0, 0, 1, 1},
  {&__pyx_n_u_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 1, 0, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_result_hull, __pyx_k_result_hull, sizeof(__pyx_k_result_hull), 0, 0, 1, 1},
  {&__pyx_n_u_rol, __pyx_k_rol, sizeof(__pyx_k_rol), 0, 1, 0, 1},
  {&__pyx_n_s_roll, __pyx_k_roll, sizeof(__pyx_k_roll), 0, 0, 1, 1},
  {&__pyx_n_u_roll, __pyx_k_roll, sizeof(__pyx_k_roll), 0, 1, 0, 1},
  {&__pyx_n_s_rot, __pyx_k_rot, sizeof(__pyx_k_rot), 0, 0, 1, 1},
  {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {&__pyx_n_s_round_vals, __pyx_k_round_vals, sizeof(__pyx_k_round_vals), 0, 0, 1, 1},
  {&__pyx_n_s_south, __pyx_k_south, sizeof(__pyx_k_south), 0, 0, 1, 1},
  {&__pyx_n_s_srctools__math, __pyx_k_srctools__math, sizeof(__pyx_k_srctools__math), 0, 0, 1, 1},
  {&__pyx_kp_s_srctools__math_pyx, __pyx_k_srctools__math_pyx, sizeof(__pyx_k_srctools__math_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_srctools_math, __pyx_k_srctools_math, sizeof(__pyx_k_srctools_math), 0, 0, 1, 1},
  {&__pyx_kp_u_srctools_math, __pyx_k_srctools_math, sizeof(__pyx_k_srctools_math), 0, 1, 0, 0},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_stride, __pyx_k_stride, sizeof(__pyx_k_stride), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_to_matrix, __pyx_k_to_matrix, sizeof(__pyx_k_to_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_top, __pyx_k_top, sizeof(__pyx_k_top), 0, 0, 1, 1},
  {&__pyx_n_s_tup, __pyx_k_tup, sizeof(__pyx_k_tup), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_v1, __pyx_k_v1, sizeof(__pyx_k_v1), 0, 0, 1, 1},
  {&__pyx_n_s_v2, __pyx_k_v2, sizeof(__pyx_k_v2), 0, 0, 1, 1},
  {&__pyx_n_s_v3, __pyx_k_v3, sizeof(__pyx_k_v3), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_vec, __pyx_k_vec, sizeof(__pyx_k_vec), 0, 0, 1, 1},
  {&__pyx_n_s_vecobj, __pyx_k_vecobj, sizeof(__pyx_k_vecobj), 0, 0, 1, 1},
  {&__pyx_n_s_vectors, __pyx_k_vectors, sizeof(__pyx_k_vectors), 0, 0, 1, 1},
  {&__pyx_n_s_vert_list, __pyx_k_vert_list, sizeof(__pyx_k_vert_list), 0, 0, 1, 1},
  {&__pyx_n_s_vertexes, __pyx_k_vertexes, sizeof(__pyx_k_vertexes), 0, 0, 1, 1},
  {&__pyx_kp_u_were_given, __pyx_k_were_given, sizeof(__pyx_k_were_given), 0, 1, 0, 0},
  {&__pyx_n_s_west, __pyx_k_west, sizeof(__pyx_k_west), 0, 0, 1, 1},
  {&__pyx_n_s_with_axes, __pyx_k_with_axes, sizeof(__pyx_k_with_axes), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_u_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 1, 0, 1},
  {&__pyx_n_s_x_neg, __pyx_k_x_neg, sizeof(__pyx_k_x_neg), 0, 0, 1, 1},
  {&__pyx_n_s_x_pos, __pyx_k_x_pos, sizeof(__pyx_k_x_pos), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_u_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 1, 0, 1},
  {&__pyx_n_s_y_neg, __pyx_k_y_neg, sizeof(__pyx_k_y_neg), 0, 0, 1, 1},
  {&__pyx_n_s_y_pos, __pyx_k_y_pos, sizeof(__pyx_k_y_pos), 0, 0, 1, 1},
  {&__pyx_n_s_yaw, __pyx_k_yaw, sizeof(__pyx_k_yaw), 0, 0, 1, 1},
  {&__pyx_n_u_yaw, __pyx_k_yaw, sizeof(__pyx_k_yaw), 0, 1, 0, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_u_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 1, 0, 1},
  {&__pyx_n_s_z_neg, __pyx_k_z_neg, sizeof(__pyx_k_z_neg), 0, 0, 1, 1},
  {&__pyx_n_s_z_norm, __pyx_k_z_norm, sizeof(__pyx_k_z_norm), 0, 0, 1, 1},
  {&__pyx_n_s_z_pos, __pyx_k_z_pos, sizeof(__pyx_k_z_pos), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 1051, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 202, __pyx_L1_error)
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(0, 210, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 419, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 766, __pyx_L1_error)
  __pyx_builtin_DeprecationWarning = __Pyx_GetBuiltinName(__pyx_n_s_DeprecationWarning); if (!__pyx_builtin_DeprecationWarning) __PYX_ERR(0, 806, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 876, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(0, 1175, __pyx_L1_error)
  __pyx_builtin_SystemError = __Pyx_GetBuiltinName(__pyx_n_s_SystemError); if (!__pyx_builtin_SystemError) __PYX_ERR(0, 1578, __pyx_L1_error)
  __pyx_builtin_OverflowError = __Pyx_GetBuiltinName(__pyx_n_s_OverflowError); if (!__pyx_builtin_OverflowError) __PYX_ERR(0, 1745, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "srctools/_math.pyx":202
 *         else:
 *             # No need to do argument checks.
 *             raise TypeError('Cannot use scalars here.')             # <<<<<<<<<<<<<<
 *     elif isinstance(vec, tuple):
 *         result.x, result.y, result.z = <tuple>vec
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Cannot_use_scalars_here); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "srctools/_math.pyx":225
 *         result.z = (<Angle>ang).val.z
 *     elif isinstance(ang, float) or isinstance(ang, int):
 *         raise TypeError('Cannot convert scalars to an Angle!')             # <<<<<<<<<<<<<<
 *     elif isinstance(ang, tuple):
 *         x, y, z = <tuple>ang
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Cannot_convert_scalars_to_an_Ang); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "srctools/_math.pyx":334
 *             _vec_cross(&res, &y.val, &z.val)
 *         else:
 *             raise TypeError('At least two vectors must be provided!')             # <<<<<<<<<<<<<<
 *     else:
 *         res = x.val
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_At_least_two_vectors_must_be_pro); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "srctools/_math.pyx":876
 *                 first = next(points_iter)
 *             except StopIteration:
 *                 raise ValueError('Empty iterator!') from None             # <<<<<<<<<<<<<<
 * 
 *             conv_vec(&bbox_min.val, first, scalar=False)
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Empty_iterator); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "srctools/_math.pyx":906
 *                 pass
 *         elif len(points) == 0:
 *             raise TypeError(             # <<<<<<<<<<<<<<
 *                 'Vec.bbox() expected at '
 *                 'least 1 argument, got 0.'
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Vec_bbox_expected_at_least_1_arg); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "srctools/_math.pyx":1223
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 *             raise TypeError('Cannot multiply 2 Vectors.')             # <<<<<<<<<<<<<<
 *         else:
 *             # Both vector-like or vector * something else.
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Cannot_multiply_2_Vectors); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "srctools/_math.pyx":1250
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 *             raise TypeError('Cannot divide 2 Vectors.')             # <<<<<<<<<<<<<<
 *         else:
 *             # Both vector-like or vector * something else.
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Cannot_divide_2_Vectors); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "srctools/_math.pyx":1277
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 *             raise TypeError('Cannot floor-divide 2 Vectors.')             # <<<<<<<<<<<<<<
 *         else:
 *             # Both vector-like or vector * something else.
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_Cannot_floor_divide_2_Vectors); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "srctools/_math.pyx":1304
 * 
 *         elif isinstance(obj_a, Vec) and isinstance(obj_b, Vec):
 *             raise TypeError('Cannot modulus 2 Vectors.')             # <<<<<<<<<<<<<<
 *         else:
 *             # Both vector-like or vector * something else.
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_Cannot_modulus_2_Vectors); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "srctools/_math.pyx":1501
 *             res_1.val.z = other_d // vec.val.z
 *         else:
 *             raise TypeError("Called with non-vectors??")             # <<<<<<<<<<<<<<
 * 
 *         return res_1, res_2
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_Called_with_non_vectors); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "srctools/_math.pyx":1937
 *             ang = (<Angle>pitch).val
 *         elif yaw is None or roll is None:
 *             raise TypeError('Matrix.from_angles() accepts a single Angle or 3 floats!')             # <<<<<<<<<<<<<<
 *         else:
 *             ang.x = float(pitch)
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_Matrix_from_angles_accepts_a_sin); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "srctools/_math.pyx":2077
 *                 return NotImplemented
 *         else:
 *             raise SystemError('Neither are Matrices?')             # <<<<<<<<<<<<<<
 * 
 *     def __imatmul__(self, other):
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_Neither_are_Matrices); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "srctools/_math.pyx":48
 * # Sanity check.
 * if not issubclass(Vec_tuple, tuple):
 *     raise RuntimeError('Vec_tuple is not a tuple subclass!')             # <<<<<<<<<<<<<<
 * 
 * # If we don't directly construct this is the fallback.
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_Vec_tuple_is_not_a_tuple_subclas); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "srctools/_math.pyx":150
 * 
 * 
 * def parse_vec_str(object val, object x=0.0, object y=0.0, object z=0.0):             # <<<<<<<<<<<<<<
 *     """Convert a string in the form '(4 6 -4)' into a set of floats.
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(6, __pyx_n_s_val, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_vec, __pyx_n_s_tup); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_srctools__math_pyx, __pyx_n_s_parse_vec_str, 150, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 150, __pyx_L1_error)

  /* "srctools/_math.pyx":176
 * 
 * @cython.cdivision(False)  # ZeroDivisionError is needed.
 * def lerp(x: float, in_min: float, in_max: float, out_min: float, out_max: float) -> float:             # <<<<<<<<<<<<<<
 *     """Linearly interpolate from in to out.
 * 
 */
  __pyx_tuple__22 = PyTuple_Pack(5, __pyx_n_s_x, __pyx_n_s_in_min, __pyx_n_s_in_max, __pyx_n_s_out_min, __pyx_n_s_out_max); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_srctools__math_pyx, __pyx_n_s_lerp, 176, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 176, __pyx_L1_error)

  /* "srctools/_math.pyx":393
 * 
 * 
 * def to_matrix(value) -> Matrix:             # <<<<<<<<<<<<<<
 *     """Convert various values to a rotation matrix.
 * 
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_n_s_value, __pyx_n_s_result); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_srctools__math_pyx, __pyx_n_s_to_matrix, 393, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 393, __pyx_L1_error)

  /* "srctools/_math.pyx":599
 *     # Various constants.
 *     INV_AXIS = {
 *         'x': ('y', 'z'),             # <<<<<<<<<<<<<<
 *         'y': ('x', 'z'),
 *         'z': ('x', 'y'),
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_n_u_y, __pyx_n_u_z); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "srctools/_math.pyx":600
 *     INV_AXIS = {
 *         'x': ('y', 'z'),
 *         'y': ('x', 'z'),             # <<<<<<<<<<<<<<
 *         'z': ('x', 'y'),
 * 
 */
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_n_u_x, __pyx_n_u_z); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "srctools/_math.pyx":601
 *         'x': ('y', 'z'),
 *         'y': ('x', 'z'),
 *         'z': ('x', 'y'),             # <<<<<<<<<<<<<<
 * 
 *         ('y', 'z'): 'x',
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_n_u_x, __pyx_n_u_y); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "srctools/_math.pyx":607
 *         ('x', 'y'): 'z',
 * 
 *         ('z', 'y'): 'x',             # <<<<<<<<<<<<<<
 *         ('z', 'x'): 'y',
 *         ('y', 'x'): 'z',
 */
  __pyx_tuple__29 = PyTuple_Pack(2, __pyx_n_u_z, __pyx_n_u_y); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "srctools/_math.pyx":608
 * 
 *         ('z', 'y'): 'x',
 *         ('z', 'x'): 'y',             # <<<<<<<<<<<<<<
 *         ('y', 'x'): 'z',
 *     }
 */
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_n_u_z, __pyx_n_u_x); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "srctools/_math.pyx":609
 *         ('z', 'y'): 'x',
 *         ('z', 'x'): 'y',
 *         ('y', 'x'): 'z',             # <<<<<<<<<<<<<<
 *     }
 *     # Vectors pointing in all cardinal directions.
 */
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_n_u_y, __pyx_n_u_x); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "srctools/_math.pyx":1052
 * 
 *     @staticmethod
 *     def bbox_intersect(min1: Vec, max1: Vec, min2: Vec, max2: Vec) -> bool:             # <<<<<<<<<<<<<<
 *         """Check if the (min1, max1) bbox intersects the (min2, max2) bbox."""
 *         return not (
 */
  __pyx_tuple__32 = PyTuple_Pack(4, __pyx_n_s_min1, __pyx_n_s_max1, __pyx_n_s_min2, __pyx_n_s_max2); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_srctools__math_pyx, __pyx_n_s_bbox_intersect, 1052, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 1052, __pyx_L1_error)

  /* "srctools/_math.pyx":2464
 * 
 * 
 * def quickhull(vertexes: 'Iterable[Vec]') -> 'list[tuple[Vec, Vec, Vec]]':             # <<<<<<<<<<<<<<
 *     """Use the quickhull algorithm to construct a convex hull around the provided points."""
 *     cdef size_t v1, v2, v3, ind
 */
  __pyx_tuple__34 = PyTuple_Pack(15, __pyx_n_s_vertexes, __pyx_n_s_v1, __pyx_n_s_v2, __pyx_n_s_v3, __pyx_n_s_ind, __pyx_n_s_values, __pyx_n_s_vert_list, __pyx_n_s_result, __pyx_n_s_vecobj, __pyx_n_s_qhull, __pyx_n_s_result_hull, __pyx_n_s_vectors, __pyx_n_s_indices, __pyx_n_s_res, __pyx_n_s_v); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 2464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_srctools__math_pyx, __pyx_n_s_quickhull, 2464, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 2464, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_8srctools_5_math_unpickle_vec = Py_None; Py_INCREF(Py_None);
  __pyx_v_8srctools_5_math_unpickle_ang = Py_None; Py_INCREF(Py_None);
  __pyx_v_8srctools_5_math_unpickle_mat = Py_None; Py_INCREF(Py_None);
  __pyx_v_8srctools_5_math_Vec_tuple = Py_None; Py_INCREF(Py_None);
  __pyx_v_8srctools_5_math_tuple_new = Py_None; Py_INCREF(Py_None);
  __pyx_v_8srctools_5_math_EMPTY_ITER = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("_parse_vec_str", (void (*)(void))__pyx_f_8srctools_5_math__parse_vec_str, "int (struct __pyx_t_8srctools_5_math_vec_t *, PyObject *, double, double, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("conv_vec", (void (*)(void))__pyx_f_8srctools_5_math_conv_vec, "unsigned char (struct __pyx_t_8srctools_5_math_vec_t *, PyObject *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("conv_angles", (void (*)(void))__pyx_f_8srctools_5_math_conv_angles, "unsigned char (struct __pyx_t_8srctools_5_math_vec_t *, PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("mat_mul", (void (*)(void))__pyx_f_8srctools_5_math_mat_mul, "void (double (*)[3], double (*)[3])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("vec_rot", (void (*)(void))__pyx_f_8srctools_5_math_vec_rot, "void (struct __pyx_t_8srctools_5_math_vec_t *, double (*)[3])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_8srctools_5_math_Vec) < 0) __PYX_ERR(0, 592, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8srctools_5_math_Vec.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8srctools_5_math_Vec.tp_dictoffset && __pyx_type_8srctools_5_math_Vec.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8srctools_5_math_Vec.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec___init__.doc = __pyx_doc_8srctools_5_math_3Vec___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec___init__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__abs__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_40__abs__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_40__abs__.doc = __pyx_doc_8srctools_5_math_3Vec_40__abs__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_40__abs__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__neg__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_42__neg__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_42__neg__.doc = __pyx_doc_8srctools_5_math_3Vec_42__neg__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_42__neg__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__pos__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_44__pos__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_44__pos__.doc = __pyx_doc_8srctools_5_math_3Vec_44__pos__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_44__pos__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__contains__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_46__contains__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_46__contains__.doc = __pyx_doc_8srctools_5_math_3Vec_46__contains__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_46__contains__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__add__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_48__add__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_48__add__.doc = __pyx_doc_8srctools_5_math_3Vec_48__add__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_48__add__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__sub__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_50__sub__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_50__sub__.doc = __pyx_doc_8srctools_5_math_3Vec_50__sub__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_50__sub__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__mul__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_52__mul__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_52__mul__.doc = __pyx_doc_8srctools_5_math_3Vec_52__mul__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_52__mul__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__truediv__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_54__truediv__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_54__truediv__.doc = __pyx_doc_8srctools_5_math_3Vec_54__truediv__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_54__truediv__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__floordiv__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_56__floordiv__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_56__floordiv__.doc = __pyx_doc_8srctools_5_math_3Vec_56__floordiv__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_56__floordiv__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__mod__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_58__mod__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_58__mod__.doc = __pyx_doc_8srctools_5_math_3Vec_58__mod__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_58__mod__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__iadd__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_62__iadd__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_62__iadd__.doc = __pyx_doc_8srctools_5_math_3Vec_62__iadd__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_62__iadd__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__isub__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_64__isub__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_64__isub__.doc = __pyx_doc_8srctools_5_math_3Vec_64__isub__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_64__isub__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__imul__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_66__imul__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_66__imul__.doc = __pyx_doc_8srctools_5_math_3Vec_66__imul__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_66__imul__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__itruediv__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_68__itruediv__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_68__itruediv__.doc = __pyx_doc_8srctools_5_math_3Vec_68__itruediv__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_68__itruediv__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__ifloordiv__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_70__ifloordiv__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_70__ifloordiv__.doc = __pyx_doc_8srctools_5_math_3Vec_70__ifloordiv__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_70__ifloordiv__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__imod__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_72__imod__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_72__imod__.doc = __pyx_doc_8srctools_5_math_3Vec_72__imod__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_72__imod__;
    }
  }
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__matmul__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_74__matmul__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_74__matmul__.doc = __pyx_doc_8srctools_5_math_3Vec_74__matmul__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_74__matmul__;
    }
  }
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__imatmul__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_76__imatmul__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_76__imatmul__.doc = __pyx_doc_8srctools_5_math_3Vec_76__imatmul__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_76__imatmul__;
    }
  }
  #endif
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__divmod__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_78__divmod__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_78__divmod__.doc = __pyx_doc_8srctools_5_math_3Vec_78__divmod__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_78__divmod__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__len__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_82__len__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_82__len__.doc = __pyx_doc_8srctools_5_math_3Vec_82__len__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_82__len__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__str__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_112__str__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_112__str__.doc = __pyx_doc_8srctools_5_math_3Vec_112__str__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_112__str__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__repr__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_114__repr__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_114__repr__.doc = __pyx_doc_8srctools_5_math_3Vec_114__repr__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_114__repr__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__getitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_120__getitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_120__getitem__.doc = __pyx_doc_8srctools_5_math_3Vec_120__getitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_120__getitem__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Vec, "__setitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 592, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_3Vec_122__setitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_3Vec_122__setitem__.doc = __pyx_doc_8srctools_5_math_3Vec_122__setitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_3Vec_122__setitem__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Vec_2, (PyObject *)&__pyx_type_8srctools_5_math_Vec) < 0) __PYX_ERR(0, 592, __pyx_L1_error)
  __pyx_ptype_8srctools_5_math_Vec = &__pyx_type_8srctools_5_math_Vec;
  if (PyType_Ready(&__pyx_type_8srctools_5_math_Matrix) < 0) __PYX_ERR(0, 1821, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8srctools_5_math_Matrix.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8srctools_5_math_Matrix.tp_dictoffset && __pyx_type_8srctools_5_math_Matrix.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8srctools_5_math_Matrix.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Matrix, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 1821, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_6Matrix___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_6Matrix___init__.doc = __pyx_doc_8srctools_5_math_6Matrix___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_6Matrix___init__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Matrix, "__getitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 1821, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_6Matrix_32__getitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_6Matrix_32__getitem__.doc = __pyx_doc_8srctools_5_math_6Matrix_32__getitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_6Matrix_32__getitem__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Matrix, "__setitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 1821, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_6Matrix_34__setitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_6Matrix_34__setitem__.doc = __pyx_doc_8srctools_5_math_6Matrix_34__setitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_6Matrix_34__setitem__;
    }
  }
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Matrix, "__matmul__"); if (unlikely(!wrapper)) __PYX_ERR(0, 1821, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_6Matrix_42__matmul__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_6Matrix_42__matmul__.doc = __pyx_doc_8srctools_5_math_6Matrix_42__matmul__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_6Matrix_42__matmul__;
    }
  }
  #endif
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Matrix_2, (PyObject *)&__pyx_type_8srctools_5_math_Matrix) < 0) __PYX_ERR(0, 1821, __pyx_L1_error)
  __pyx_ptype_8srctools_5_math_Matrix = &__pyx_type_8srctools_5_math_Matrix;
  if (PyType_Ready(&__pyx_type_8srctools_5_math_Angle) < 0) __PYX_ERR(0, 2095, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8srctools_5_math_Angle.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8srctools_5_math_Angle.tp_dictoffset && __pyx_type_8srctools_5_math_Angle.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8srctools_5_math_Angle.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Angle, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 2095, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_5Angle___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_5Angle___init__.doc = __pyx_doc_8srctools_5_math_5Angle___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_5Angle___init__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Angle, "__str__"); if (unlikely(!wrapper)) __PYX_ERR(0, 2095, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_5Angle_14__str__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_5Angle_14__str__.doc = __pyx_doc_8srctools_5_math_5Angle_14__str__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_5Angle_14__str__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Angle, "__iter__"); if (unlikely(!wrapper)) __PYX_ERR(0, 2095, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_5Angle_22__iter__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_5Angle_22__iter__.doc = __pyx_doc_8srctools_5_math_5Angle_22__iter__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_5Angle_22__iter__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Angle, "__getitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 2095, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_5Angle_28__getitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_5Angle_28__getitem__.doc = __pyx_doc_8srctools_5_math_5Angle_28__getitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_5Angle_28__getitem__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Angle, "__setitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 2095, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_5Angle_30__setitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_5Angle_30__setitem__.doc = __pyx_doc_8srctools_5_math_5Angle_30__setitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_5Angle_30__setitem__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8srctools_5_math_Angle, "__mul__"); if (unlikely(!wrapper)) __PYX_ERR(0, 2095, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8srctools_5_math_5Angle_34__mul__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8srctools_5_math_5Angle_34__mul__.doc = __pyx_doc_8srctools_5_math_5Angle_34__mul__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8srctools_5_math_5Angle_34__mul__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Angle_2, (PyObject *)&__pyx_type_8srctools_5_math_Angle) < 0) __PYX_ERR(0, 2095, __pyx_L1_error)
  __pyx_ptype_8srctools_5_math_Angle = &__pyx_type_8srctools_5_math_Angle;
  if (PyType_Ready(&__pyx_type_8srctools_5_math_VecIter) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8srctools_5_math_VecIter.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8srctools_5_math_VecIter.tp_dictoffset && __pyx_type_8srctools_5_math_VecIter.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8srctools_5_math_VecIter.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8srctools_5_math_VecIter = &__pyx_type_8srctools_5_math_VecIter;
  if (PyType_Ready(&__pyx_type_8srctools_5_math_VecIterGrid) < 0) __PYX_ERR(0, 434, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8srctools_5_math_VecIterGrid.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8srctools_5_math_VecIterGrid.tp_dictoffset && __pyx_type_8srctools_5_math_VecIterGrid.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8srctools_5_math_VecIterGrid.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8srctools_5_math_VecIterGrid = &__pyx_type_8srctools_5_math_VecIterGrid;
  if (PyType_Ready(&__pyx_type_8srctools_5_math_VecIterLine) < 0) __PYX_ERR(0, 475, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8srctools_5_math_VecIterLine.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8srctools_5_math_VecIterLine.tp_dictoffset && __pyx_type_8srctools_5_math_VecIterLine.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8srctools_5_math_VecIterLine.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8srctools_5_math_VecIterLine = &__pyx_type_8srctools_5_math_VecIterLine;
  if (PyType_Ready(&__pyx_type_8srctools_5_math_AngleIter) < 0) __PYX_ERR(0, 510, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8srctools_5_math_AngleIter.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8srctools_5_math_AngleIter.tp_dictoffset && __pyx_type_8srctools_5_math_AngleIter.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8srctools_5_math_AngleIter.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8srctools_5_math_AngleIter = &__pyx_type_8srctools_5_math_AngleIter;
  if (PyType_Ready(&__pyx_type_8srctools_5_math_VecTransform) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8srctools_5_math_VecTransform.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8srctools_5_math_VecTransform.tp_dictoffset && __pyx_type_8srctools_5_math_VecTransform.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8srctools_5_math_VecTransform.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8srctools_5_math_VecTransform = &__pyx_type_8srctools_5_math_VecTransform;
  if (PyType_Ready(&__pyx_type_8srctools_5_math_AngleTransform) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8srctools_5_math_AngleTransform.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8srctools_5_math_AngleTransform.tp_dictoffset && __pyx_type_8srctools_5_math_AngleTransform.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8srctools_5_math_AngleTransform.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8srctools_5_math_AngleTransform = &__pyx_type_8srctools_5_math_AngleTransform;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_math(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_math(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__math(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__math(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__math(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_math' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__math(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_math", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_srctools___math) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "srctools._math")) {
      if (unlikely(PyDict_SetItemString(modules, "srctools._math", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "srctools/_math.pyx":44
 * # Grab the Vec_Tuple class for quick construction as well
 * cdef object Vec_tuple
 * from srctools.math import Vec_tuple, _mk_vec as unpickle_vec, _mk_ang as unpickle_ang, _mk_mat as unpickle_mat             # <<<<<<<<<<<<<<
 * 
 * # Sanity check.
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Vec_tuple);
  __Pyx_GIVEREF(__pyx_n_s_Vec_tuple);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Vec_tuple);
  __Pyx_INCREF(__pyx_n_s_mk_vec);
  __Pyx_GIVEREF(__pyx_n_s_mk_vec);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_mk_vec);
  __Pyx_INCREF(__pyx_n_s_mk_ang);
  __Pyx_GIVEREF(__pyx_n_s_mk_ang);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_mk_ang);
  __Pyx_INCREF(__pyx_n_s_mk_mat);
  __Pyx_GIVEREF(__pyx_n_s_mk_mat);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_mk_mat);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_srctools_math, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Vec_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_8srctools_5_math_Vec_tuple);
  __Pyx_DECREF_SET(__pyx_v_8srctools_5_math_Vec_tuple, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_mk_vec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_8srctools_5_math_unpickle_vec);
  __Pyx_DECREF_SET(__pyx_v_8srctools_5_math_unpickle_vec, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_mk_ang); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_8srctools_5_math_unpickle_ang);
  __Pyx_DECREF_SET(__pyx_v_8srctools_5_math_unpickle_ang, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_mk_mat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_8srctools_5_math_unpickle_mat);
  __Pyx_DECREF_SET(__pyx_v_8srctools_5_math_unpickle_mat, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srctools/_math.pyx":47
 * 
 * # Sanity check.
 * if not issubclass(Vec_tuple, tuple):             # <<<<<<<<<<<<<<
 *     raise RuntimeError('Vec_tuple is not a tuple subclass!')
 * 
 */
  __pyx_t_2 = __pyx_v_8srctools_5_math_Vec_tuple;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = PyObject_IsSubclass(__pyx_t_2, ((PyObject *)(&PyTuple_Type))); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "srctools/_math.pyx":48
 * # Sanity check.
 * if not issubclass(Vec_tuple, tuple):
 *     raise RuntimeError('Vec_tuple is not a tuple subclass!')             # <<<<<<<<<<<<<<
 * 
 * # If we don't directly construct this is the fallback.
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 48, __pyx_L1_error)

    /* "srctools/_math.pyx":47
 * 
 * # Sanity check.
 * if not issubclass(Vec_tuple, tuple):             # <<<<<<<<<<<<<<
 *     raise RuntimeError('Vec_tuple is not a tuple subclass!')
 * 
 */
  }

  /* "srctools/_math.pyx":51
 * 
 * # If we don't directly construct this is the fallback.
 * cdef object tuple_new = tuple.__new__             # <<<<<<<<<<<<<<
 * 
 * # For convenience, an iterator which immediately fails.
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyTuple_Type)), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(__pyx_v_8srctools_5_math_tuple_new);
  __Pyx_DECREF_SET(__pyx_v_8srctools_5_math_tuple_new, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "srctools/_math.pyx":54
 * 
 * # For convenience, an iterator which immediately fails.
 * cdef object EMPTY_ITER = iter(())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyObject_GetIter(__pyx_empty_tuple); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(__pyx_v_8srctools_5_math_EMPTY_ITER);
  __Pyx_DECREF_SET(__pyx_v_8srctools_5_math_EMPTY_ITER, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "srctools/_math.pyx":150
 * 
 * 
 * def parse_vec_str(object val, object x=0.0, object y=0.0, object z=0.0):             # <<<<<<<<<<<<<<
 *     """Convert a string in the form '(4 6 -4)' into a set of floats.
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8srctools_5_math_1parse_vec_str, NULL, __pyx_n_s_srctools__math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_parse_vec_str, __pyx_t_2) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srctools/_math.pyx":176
 * 
 * @cython.cdivision(False)  # ZeroDivisionError is needed.
 * def lerp(x: float, in_min: float, in_max: float, out_min: float, out_max: float) -> float:             # <<<<<<<<<<<<<<
 *     """Linearly interpolate from in to out.
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8srctools_5_math_3lerp, NULL, __pyx_n_s_srctools__math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lerp, __pyx_t_2) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srctools/_math.pyx":393
 * 
 * 
 * def to_matrix(value) -> Matrix:             # <<<<<<<<<<<<<<
 *     """Convert various values to a rotation matrix.
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8srctools_5_math_5to_matrix, NULL, __pyx_n_s_srctools__math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_to_matrix, __pyx_t_2) < 0) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srctools/_math.pyx":599
 *     # Various constants.
 *     INV_AXIS = {
 *         'x': ('y', 'z'),             # <<<<<<<<<<<<<<
 *         'y': ('x', 'z'),
 *         'z': ('x', 'y'),
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_x, __pyx_tuple__26) < 0) __PYX_ERR(0, 599, __pyx_L1_error)

  /* "srctools/_math.pyx":600
 *     INV_AXIS = {
 *         'x': ('y', 'z'),
 *         'y': ('x', 'z'),             # <<<<<<<<<<<<<<
 *         'z': ('x', 'y'),
 * 
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_y, __pyx_tuple__27) < 0) __PYX_ERR(0, 599, __pyx_L1_error)

  /* "srctools/_math.pyx":601
 *         'x': ('y', 'z'),
 *         'y': ('x', 'z'),
 *         'z': ('x', 'y'),             # <<<<<<<<<<<<<<
 * 
 *         ('y', 'z'): 'x',
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_z, __pyx_tuple__28) < 0) __PYX_ERR(0, 599, __pyx_L1_error)

  /* "srctools/_math.pyx":603
 *         'z': ('x', 'y'),
 * 
 *         ('y', 'z'): 'x',             # <<<<<<<<<<<<<<
 *         ('x', 'z'): 'y',
 *         ('x', 'y'): 'z',
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__26, __pyx_n_u_x) < 0) __PYX_ERR(0, 599, __pyx_L1_error)

  /* "srctools/_math.pyx":604
 * 
 *         ('y', 'z'): 'x',
 *         ('x', 'z'): 'y',             # <<<<<<<<<<<<<<
 *         ('x', 'y'): 'z',
 * 
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__27, __pyx_n_u_y) < 0) __PYX_ERR(0, 599, __pyx_L1_error)

  /* "srctools/_math.pyx":605
 *         ('y', 'z'): 'x',
 *         ('x', 'z'): 'y',
 *         ('x', 'y'): 'z',             # <<<<<<<<<<<<<<
 * 
 *         ('z', 'y'): 'x',
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__28, __pyx_n_u_z) < 0) __PYX_ERR(0, 599, __pyx_L1_error)

  /* "srctools/_math.pyx":607
 *         ('x', 'y'): 'z',
 * 
 *         ('z', 'y'): 'x',             # <<<<<<<<<<<<<<
 *         ('z', 'x'): 'y',
 *         ('y', 'x'): 'z',
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__29, __pyx_n_u_x) < 0) __PYX_ERR(0, 599, __pyx_L1_error)

  /* "srctools/_math.pyx":608
 * 
 *         ('z', 'y'): 'x',
 *         ('z', 'x'): 'y',             # <<<<<<<<<<<<<<
 *         ('y', 'x'): 'z',
 *     }
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__30, __pyx_n_u_y) < 0) __PYX_ERR(0, 599, __pyx_L1_error)

  /* "srctools/_math.pyx":609
 *         ('z', 'y'): 'x',
 *         ('z', 'x'): 'y',
 *         ('y', 'x'): 'z',             # <<<<<<<<<<<<<<
 *     }
 *     # Vectors pointing in all cardinal directions.
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_tuple__31, __pyx_n_u_z) < 0) __PYX_ERR(0, 599, __pyx_L1_error)
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_INV_AXIS, __pyx_t_2) < 0) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);

  /* "srctools/_math.pyx":613
 *     # Vectors pointing in all cardinal directions.
 *     # Tuple.__new__() can't be unpacked...
 *     N = north = y_pos = _make_tuple(0, 1, 0)             # <<<<<<<<<<<<<<
 *     S = south = y_neg = _make_tuple(0, -1, 0)
 *     E = east = x_pos = _make_tuple(1, 0, 0)
 */
  __pyx_t_2 = __pyx_f_8srctools_5_math__make_tuple(0.0, 1.0, 0.0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_N, __pyx_t_2) < 0) __PYX_ERR(0, 613, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_north, __pyx_t_2) < 0) __PYX_ERR(0, 613, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_y_pos, __pyx_t_2) < 0) __PYX_ERR(0, 613, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srctools/_math.pyx":614
 *     # Tuple.__new__() can't be unpacked...
 *     N = north = y_pos = _make_tuple(0, 1, 0)
 *     S = south = y_neg = _make_tuple(0, -1, 0)             # <<<<<<<<<<<<<<
 *     E = east = x_pos = _make_tuple(1, 0, 0)
 *     W = west = x_neg = _make_tuple(-1, 0, 0)
 */
  __pyx_t_2 = __pyx_f_8srctools_5_math__make_tuple(0.0, -1.0, 0.0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_S, __pyx_t_2) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_south, __pyx_t_2) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_y_neg, __pyx_t_2) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srctools/_math.pyx":615
 *     N = north = y_pos = _make_tuple(0, 1, 0)
 *     S = south = y_neg = _make_tuple(0, -1, 0)
 *     E = east = x_pos = _make_tuple(1, 0, 0)             # <<<<<<<<<<<<<<
 *     W = west = x_neg = _make_tuple(-1, 0, 0)
 *     T = top = z_pos = _make_tuple(0, 0, 1)
 */
  __pyx_t_2 = __pyx_f_8srctools_5_math__make_tuple(1.0, 0.0, 0.0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_E, __pyx_t_2) < 0) __PYX_ERR(0, 615, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_east, __pyx_t_2) < 0) __PYX_ERR(0, 615, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_x_pos, __pyx_t_2) < 0) __PYX_ERR(0, 615, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srctools/_math.pyx":616
 *     S = south = y_neg = _make_tuple(0, -1, 0)
 *     E = east = x_pos = _make_tuple(1, 0, 0)
 *     W = west = x_neg = _make_tuple(-1, 0, 0)             # <<<<<<<<<<<<<<
 *     T = top = z_pos = _make_tuple(0, 0, 1)
 *     B = bottom = z_neg = _make_tuple(0, 0, -1)
 */
  __pyx_t_2 = __pyx_f_8srctools_5_math__make_tuple(-1.0, 0.0, 0.0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_W, __pyx_t_2) < 0) __PYX_ERR(0, 616, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_west, __pyx_t_2) < 0) __PYX_ERR(0, 616, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_x_neg, __pyx_t_2) < 0) __PYX_ERR(0, 616, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srctools/_math.pyx":617
 *     E = east = x_pos = _make_tuple(1, 0, 0)
 *     W = west = x_neg = _make_tuple(-1, 0, 0)
 *     T = top = z_pos = _make_tuple(0, 0, 1)             # <<<<<<<<<<<<<<
 *     B = bottom = z_neg = _make_tuple(0, 0, -1)
 * 
 */
  __pyx_t_2 = __pyx_f_8srctools_5_math__make_tuple(0.0, 0.0, 1.0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_T, __pyx_t_2) < 0) __PYX_ERR(0, 617, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_top, __pyx_t_2) < 0) __PYX_ERR(0, 617, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_z_pos, __pyx_t_2) < 0) __PYX_ERR(0, 617, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srctools/_math.pyx":618
 *     W = west = x_neg = _make_tuple(-1, 0, 0)
 *     T = top = z_pos = _make_tuple(0, 0, 1)
 *     B = bottom = z_neg = _make_tuple(0, 0, -1)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __pyx_f_8srctools_5_math__make_tuple(0.0, 0.0, -1.0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_B, __pyx_t_2) < 0) __PYX_ERR(0, 618, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_bottom, __pyx_t_2) < 0) __PYX_ERR(0, 618, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_z_neg, __pyx_t_2) < 0) __PYX_ERR(0, 618, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srctools/_math.pyx":724
 * 
 *     @classmethod
 *     def from_str(cls, value, double x=0, double y=0, double z=0):             # <<<<<<<<<<<<<<
 *         """Convert a string in the form '(4 6 -4)' into a Vector.
 * 
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_8srctools_5_math_Vec, __pyx_n_s_from_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "srctools/_math.pyx":723
 *         return unpickle_vec, (self.val.x, self.val.y, self.val.z)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_str(cls, value, double x=0, double y=0, double z=0):
 *         """Convert a string in the form '(4 6 -4)' into a Vector.
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_from_str, __pyx_t_1) < 0) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);

  /* "srctools/_math.pyx":739
 *     @classmethod
 *     @cython.boundscheck(False)
 *     def with_axes(cls, *args) -> 'Vec':             # <<<<<<<<<<<<<<
 *         """Create a Vector, given a number of axes and corresponding values.
 * 
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_8srctools_5_math_Vec, __pyx_n_s_with_axes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "srctools/_math.pyx":737
 *         return vec
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     @cython.boundscheck(False)
 *     def with_axes(cls, *args) -> 'Vec':
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_with_axes, __pyx_t_2) < 0) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);

  /* "srctools/_math.pyx":851
 * 
 *     @classmethod
 *     def bbox(cls, *points: Vec) -> 'Tuple[Vec, Vec]':             # <<<<<<<<<<<<<<
 *         """Compute the bounding box for a set of points.
 * 
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_8srctools_5_math_Vec, __pyx_n_s_bbox); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "srctools/_math.pyx":850
 *         return self
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def bbox(cls, *points: Vec) -> 'Tuple[Vec, Vec]':
 *         """Compute the bounding box for a set of points.
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_bbox, __pyx_t_1) < 0) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);

  /* "srctools/_math.pyx":941
 * 
 *     @classmethod
 *     def iter_grid(             # <<<<<<<<<<<<<<
 *         cls,
 *         min_pos,
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_8srctools_5_math_Vec, __pyx_n_s_iter_grid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "srctools/_math.pyx":940
 * 
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def iter_grid(
 *         cls,
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_iter_grid, __pyx_t_2) < 0) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);

  /* "srctools/_math.pyx":1052
 * 
 *     @staticmethod
 *     def bbox_intersect(min1: Vec, max1: Vec, min2: Vec, max2: Vec) -> bool:             # <<<<<<<<<<<<<<
 *         """Check if the (min1, max1) bbox intersects the (min2, max2) bbox."""
 *         return not (
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8srctools_5_math_3Vec_31bbox_intersect, NULL, __pyx_n_s_srctools__math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_bbox_intersect, __pyx_t_2) < 0) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);

  /* "srctools/_math.pyx":1051
 *         )
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def bbox_intersect(min1: Vec, max1: Vec, min2: Vec, max2: Vec) -> bool:
 *         """Check if the (min1, max1) bbox intersects the (min2, max2) bbox."""
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_8srctools_5_math_Vec, __pyx_n_s_bbox_intersect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Vec->tp_dict, __pyx_n_s_bbox_intersect, __pyx_t_1) < 0) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Vec);

  /* "srctools/_math.pyx":1874
 * 
 *     @classmethod
 *     def from_pitch(cls, double pitch):             # <<<<<<<<<<<<<<
 *         """Return the matrix representing a pitch rotation.
 * 
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_8srctools_5_math_Matrix, __pyx_n_s_from_pitch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "srctools/_math.pyx":1873
 *         )
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_pitch(cls, double pitch):
 *         """Return the matrix representing a pitch rotation.
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Matrix->tp_dict, __pyx_n_s_from_pitch, __pyx_t_2) < 0) __PYX_ERR(0, 1874, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Matrix);

  /* "srctools/_math.pyx":1892
 * 
 *     @classmethod
 *     def from_yaw(cls, double yaw):             # <<<<<<<<<<<<<<
 *         """Return the matrix representing a yaw rotation.
 * 
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_8srctools_5_math_Matrix, __pyx_n_s_from_yaw); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "srctools/_math.pyx":1891
 *         return rot
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_yaw(cls, double yaw):
 *         """Return the matrix representing a yaw rotation.
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Matrix->tp_dict, __pyx_n_s_from_yaw, __pyx_t_1) < 0) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Matrix);

  /* "srctools/_math.pyx":1909
 * 
 *     @classmethod
 *     def from_roll(cls, double roll):             # <<<<<<<<<<<<<<
 *         """Return the matrix representing a roll rotation.
 * 
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_8srctools_5_math_Matrix, __pyx_n_s_from_roll); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "srctools/_math.pyx":1908
 *         return rot
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_roll(cls, double roll):
 *         """Return the matrix representing a roll rotation.
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Matrix->tp_dict, __pyx_n_s_from_roll, __pyx_t_2) < 0) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Matrix);

  /* "srctools/_math.pyx":1927
 * 
 *     @classmethod
 *     def from_angle(cls, pitch, yaw=None, roll=None):             # <<<<<<<<<<<<<<
 *         """Return the rotation representing an Euler angle.
 * 
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_8srctools_5_math_Matrix, __pyx_n_s_from_angle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "srctools/_math.pyx":1926
 *         return rot
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_angle(cls, pitch, yaw=None, roll=None):
 *         """Return the rotation representing an Euler angle.
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Matrix->tp_dict, __pyx_n_s_from_angle, __pyx_t_1) < 0) __PYX_ERR(0, 1927, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Matrix);

  /* "srctools/_math.pyx":1947
 * 
 *     @classmethod
 *     def axis_angle(cls, object axis, double angle) -> 'Matrix':             # <<<<<<<<<<<<<<
 *         """Compute the rotation matrix forming a rotation around an axis by a specific angle."""
 *         cdef vec_t vec_axis
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_8srctools_5_math_Matrix, __pyx_n_s_axis_angle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "srctools/_math.pyx":1946
 * 
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def axis_angle(cls, object axis, double angle) -> 'Matrix':
 *         """Compute the rotation matrix forming a rotation around an axis by a specific angle."""
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Matrix->tp_dict, __pyx_n_s_axis_angle, __pyx_t_2) < 0) __PYX_ERR(0, 1947, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Matrix);

  /* "srctools/_math.pyx":2032
 * 
 *     @classmethod
 *     def from_basis(             # <<<<<<<<<<<<<<
 *         cls, *,
 *         x: Vec=None,
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_8srctools_5_math_Matrix, __pyx_n_s_from_basis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "srctools/_math.pyx":2031
 *         return rot
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_basis(
 *         cls, *,
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Matrix->tp_dict, __pyx_n_s_from_basis, __pyx_t_1) < 0) __PYX_ERR(0, 2032, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Matrix);

  /* "srctools/_math.pyx":2175
 * 
 *     @classmethod
 *     def from_str(cls, val, double pitch=0.0, double yaw=0.0, double roll=0.0):             # <<<<<<<<<<<<<<
 *         """Convert a string in the form '(4 6 -4)' into an Angle.
 * 
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_8srctools_5_math_Angle, __pyx_n_s_from_str); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "srctools/_math.pyx":2174
 *         return unpickle_ang, (self.val.x, self.val.y, self.val.z)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_str(cls, val, double pitch=0.0, double yaw=0.0, double roll=0.0):
 *         """Convert a string in the form '(4 6 -4)' into an Angle.
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Angle->tp_dict, __pyx_n_s_from_str, __pyx_t_2) < 0) __PYX_ERR(0, 2175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Angle);

  /* "srctools/_math.pyx":2254
 *     @classmethod
 *     @cython.boundscheck(False)
 *     def with_axes(cls, *args):             # <<<<<<<<<<<<<<
 *         """Create an Angle, given a number of axes and corresponding values.
 * 
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_8srctools_5_math_Angle, __pyx_n_s_with_axes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "srctools/_math.pyx":2252
 * 
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     @cython.boundscheck(False)
 *     def with_axes(cls, *args):
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Angle->tp_dict, __pyx_n_s_with_axes, __pyx_t_1) < 0) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Angle);

  /* "srctools/_math.pyx":2297
 * 
 *     @classmethod
 *     def from_basis(             # <<<<<<<<<<<<<<
 *         cls, *,
 *         x: Vec=None,
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_8srctools_5_math_Angle, __pyx_n_s_from_basis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "srctools/_math.pyx":2296
 *         return ang
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_basis(
 *         cls, *,
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8srctools_5_math_Angle->tp_dict, __pyx_n_s_from_basis, __pyx_t_2) < 0) __PYX_ERR(0, 2297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8srctools_5_math_Angle);

  /* "srctools/_math.pyx":2464
 * 
 * 
 * def quickhull(vertexes: 'Iterable[Vec]') -> 'list[tuple[Vec, Vec, Vec]]':             # <<<<<<<<<<<<<<
 *     """Use the quickhull algorithm to construct a convex hull around the provided points."""
 *     cdef size_t v1, v2, v3, ind
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8srctools_5_math_7quickhull, NULL, __pyx_n_s_srctools__math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_quickhull, __pyx_t_2) < 0) __PYX_ERR(0, 2464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srctools/_math.pyx":2495
 * 
 * from cpython.object cimport PyTypeObject
 * if USE_TYPE_INTERNALS:             # <<<<<<<<<<<<<<
 *     (<PyTypeObject *>Vec).tp_name = b"srctools.math.Vec"
 *     (<PyTypeObject *>Angle).tp_name = b"srctools.math.Angle"
 */
  __pyx_t_4 = (CYTHON_USE_TYPE_SLOTS != 0);
  if (__pyx_t_4) {

    /* "srctools/_math.pyx":2496
 * from cpython.object cimport PyTypeObject
 * if USE_TYPE_INTERNALS:
 *     (<PyTypeObject *>Vec).tp_name = b"srctools.math.Vec"             # <<<<<<<<<<<<<<
 *     (<PyTypeObject *>Angle).tp_name = b"srctools.math.Angle"
 *     (<PyTypeObject *>Matrix).tp_name = b"srctools.math.Matrix"
 */
    ((PyTypeObject *)__pyx_ptype_8srctools_5_math_Vec)->tp_name = ((char const *)"srctools.math.Vec");

    /* "srctools/_math.pyx":2497
 * if USE_TYPE_INTERNALS:
 *     (<PyTypeObject *>Vec).tp_name = b"srctools.math.Vec"
 *     (<PyTypeObject *>Angle).tp_name = b"srctools.math.Angle"             # <<<<<<<<<<<<<<
 *     (<PyTypeObject *>Matrix).tp_name = b"srctools.math.Matrix"
 *     (<PyTypeObject *>VecIter).tp_name = b"srctools.math._Vec_iterator"
 */
    ((PyTypeObject *)__pyx_ptype_8srctools_5_math_Angle)->tp_name = ((char const *)"srctools.math.Angle");

    /* "srctools/_math.pyx":2498
 *     (<PyTypeObject *>Vec).tp_name = b"srctools.math.Vec"
 *     (<PyTypeObject *>Angle).tp_name = b"srctools.math.Angle"
 *     (<PyTypeObject *>Matrix).tp_name = b"srctools.math.Matrix"             # <<<<<<<<<<<<<<
 *     (<PyTypeObject *>VecIter).tp_name = b"srctools.math._Vec_iterator"
 *     (<PyTypeObject *>AngleIter).tp_name = b"srctools.math._Angle_iterator"
 */
    ((PyTypeObject *)__pyx_ptype_8srctools_5_math_Matrix)->tp_name = ((char const *)"srctools.math.Matrix");

    /* "srctools/_math.pyx":2499
 *     (<PyTypeObject *>Angle).tp_name = b"srctools.math.Angle"
 *     (<PyTypeObject *>Matrix).tp_name = b"srctools.math.Matrix"
 *     (<PyTypeObject *>VecIter).tp_name = b"srctools.math._Vec_iterator"             # <<<<<<<<<<<<<<
 *     (<PyTypeObject *>AngleIter).tp_name = b"srctools.math._Angle_iterator"
 *     (<PyTypeObject *>VecIterGrid).tp_name = b"srctools.math._Vec_grid_iterator"
 */
    ((PyTypeObject *)__pyx_ptype_8srctools_5_math_VecIter)->tp_name = ((char const *)"srctools.math._Vec_iterator");

    /* "srctools/_math.pyx":2500
 *     (<PyTypeObject *>Matrix).tp_name = b"srctools.math.Matrix"
 *     (<PyTypeObject *>VecIter).tp_name = b"srctools.math._Vec_iterator"
 *     (<PyTypeObject *>AngleIter).tp_name = b"srctools.math._Angle_iterator"             # <<<<<<<<<<<<<<
 *     (<PyTypeObject *>VecIterGrid).tp_name = b"srctools.math._Vec_grid_iterator"
 *     (<PyTypeObject *>VecIterLine).tp_name = b"srctools.math.Vec_line_iterator"
 */
    ((PyTypeObject *)__pyx_ptype_8srctools_5_math_AngleIter)->tp_name = ((char const *)"srctools.math._Angle_iterator");

    /* "srctools/_math.pyx":2501
 *     (<PyTypeObject *>VecIter).tp_name = b"srctools.math._Vec_iterator"
 *     (<PyTypeObject *>AngleIter).tp_name = b"srctools.math._Angle_iterator"
 *     (<PyTypeObject *>VecIterGrid).tp_name = b"srctools.math._Vec_grid_iterator"             # <<<<<<<<<<<<<<
 *     (<PyTypeObject *>VecIterLine).tp_name = b"srctools.math.Vec_line_iterator"
 *     (<PyTypeObject *>VecTransform).tp_name = b"srctools.math._Vec_transform_cm"
 */
    ((PyTypeObject *)__pyx_ptype_8srctools_5_math_VecIterGrid)->tp_name = ((char const *)"srctools.math._Vec_grid_iterator");

    /* "srctools/_math.pyx":2502
 *     (<PyTypeObject *>AngleIter).tp_name = b"srctools.math._Angle_iterator"
 *     (<PyTypeObject *>VecIterGrid).tp_name = b"srctools.math._Vec_grid_iterator"
 *     (<PyTypeObject *>VecIterLine).tp_name = b"srctools.math.Vec_line_iterator"             # <<<<<<<<<<<<<<
 *     (<PyTypeObject *>VecTransform).tp_name = b"srctools.math._Vec_transform_cm"
 *     (<PyTypeObject *>AngleTransform).tp_name = b"srctools.math._Angle_transform_cm"
 */
    ((PyTypeObject *)__pyx_ptype_8srctools_5_math_VecIterLine)->tp_name = ((char const *)"srctools.math.Vec_line_iterator");

    /* "srctools/_math.pyx":2503
 *     (<PyTypeObject *>VecIterGrid).tp_name = b"srctools.math._Vec_grid_iterator"
 *     (<PyTypeObject *>VecIterLine).tp_name = b"srctools.math.Vec_line_iterator"
 *     (<PyTypeObject *>VecTransform).tp_name = b"srctools.math._Vec_transform_cm"             # <<<<<<<<<<<<<<
 *     (<PyTypeObject *>AngleTransform).tp_name = b"srctools.math._Angle_transform_cm"
 * try:
 */
    ((PyTypeObject *)__pyx_ptype_8srctools_5_math_VecTransform)->tp_name = ((char const *)"srctools.math._Vec_transform_cm");

    /* "srctools/_math.pyx":2504
 *     (<PyTypeObject *>VecIterLine).tp_name = b"srctools.math.Vec_line_iterator"
 *     (<PyTypeObject *>VecTransform).tp_name = b"srctools.math._Vec_transform_cm"
 *     (<PyTypeObject *>AngleTransform).tp_name = b"srctools.math._Angle_transform_cm"             # <<<<<<<<<<<<<<
 * try:
 *     parse_vec_str.__module__ = 'srctools.math'
 */
    ((PyTypeObject *)__pyx_ptype_8srctools_5_math_AngleTransform)->tp_name = ((char const *)"srctools.math._Angle_transform_cm");

    /* "srctools/_math.pyx":2495
 * 
 * from cpython.object cimport PyTypeObject
 * if USE_TYPE_INTERNALS:             # <<<<<<<<<<<<<<
 *     (<PyTypeObject *>Vec).tp_name = b"srctools.math.Vec"
 *     (<PyTypeObject *>Angle).tp_name = b"srctools.math.Angle"
 */
  }

  /* "srctools/_math.pyx":2505
 *     (<PyTypeObject *>VecTransform).tp_name = b"srctools.math._Vec_transform_cm"
 *     (<PyTypeObject *>AngleTransform).tp_name = b"srctools.math._Angle_transform_cm"
 * try:             # <<<<<<<<<<<<<<
 *     parse_vec_str.__module__ = 'srctools.math'
 *     to_matrix.__module__ = 'srctools.math'
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "srctools/_math.pyx":2506
 *     (<PyTypeObject *>AngleTransform).tp_name = b"srctools.math._Angle_transform_cm"
 * try:
 *     parse_vec_str.__module__ = 'srctools.math'             # <<<<<<<<<<<<<<
 *     to_matrix.__module__ = 'srctools.math'
 *     lerp.__module__ = 'srctools.math'
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_parse_vec_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2506, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_module, __pyx_kp_u_srctools_math) < 0) __PYX_ERR(0, 2506, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "srctools/_math.pyx":2507
 * try:
 *     parse_vec_str.__module__ = 'srctools.math'
 *     to_matrix.__module__ = 'srctools.math'             # <<<<<<<<<<<<<<
 *     lerp.__module__ = 'srctools.math'
 * except Exception:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_to_matrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2507, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_module, __pyx_kp_u_srctools_math) < 0) __PYX_ERR(0, 2507, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "srctools/_math.pyx":2508
 *     parse_vec_str.__module__ = 'srctools.math'
 *     to_matrix.__module__ = 'srctools.math'
 *     lerp.__module__ = 'srctools.math'             # <<<<<<<<<<<<<<
 * except Exception:
 *     pass  # Perfectly fine.
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_lerp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2508, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_module, __pyx_kp_u_srctools_math) < 0) __PYX_ERR(0, 2508, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "srctools/_math.pyx":2505
 *     (<PyTypeObject *>VecTransform).tp_name = b"srctools.math._Vec_transform_cm"
 *     (<PyTypeObject *>AngleTransform).tp_name = b"srctools.math._Angle_transform_cm"
 * try:             # <<<<<<<<<<<<<<
 *     parse_vec_str.__module__ = 'srctools.math'
 *     to_matrix.__module__ = 'srctools.math'
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "srctools/_math.pyx":2509
 *     to_matrix.__module__ = 'srctools.math'
 *     lerp.__module__ = 'srctools.math'
 * except Exception:             # <<<<<<<<<<<<<<
 *     pass  # Perfectly fine.
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_8) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L5_exception_handled;
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "srctools/_math.pyx":2505
 *     (<PyTypeObject *>VecTransform).tp_name = b"srctools.math._Vec_transform_cm"
 *     (<PyTypeObject *>AngleTransform).tp_name = b"srctools.math._Angle_transform_cm"
 * try:             # <<<<<<<<<<<<<<
 *     parse_vec_str.__module__ = 'srctools.math'
 *     to_matrix.__module__ = 'srctools.math'
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L5_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L9_try_end:;
  }

  /* "srctools/_math.pyx":1
 * # cython: language_level=3, embedsignature=True, auto_pickle=False             # <<<<<<<<<<<<<<
 * # """Optimised Vector object."""
 * from libc cimport math
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init srctools._math", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init srctools._math");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* None */
static CYTHON_INLINE double __Pyx_mod_double(double a, double b) {
    double r = fmod(a, b);
    r += ((r != 0) & ((r < 0) ^ (b < 0))) * b;
    return r;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* IterNext */
static PyObject *__Pyx_PyIter_Next2Default(PyObject* defval) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_Occurred();
    if (unlikely(exc_type)) {
        if (!defval || unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return NULL;
        __Pyx_PyErr_Clear();
        Py_INCREF(defval);
        return defval;
    }
    if (defval) {
        Py_INCREF(defval);
        return defval;
    }
    __Pyx_PyErr_SetNone(PyExc_StopIteration);
    return NULL;
}
static void __Pyx_PyIter_Next_ErrorNoIterator(PyObject *iterator) {
    PyErr_Format(PyExc_TypeError,
        "%.200s object is not an iterator", Py_TYPE(iterator)->tp_name);
}
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject* iterator, PyObject* defval) {
    PyObject* next;
    iternextfunc iternext = Py_TYPE(iterator)->tp_iternext;
    if (likely(iternext)) {
#if CYTHON_USE_TYPE_SLOTS
        next = iternext(iterator);
        if (likely(next))
            return next;
        #if PY_VERSION_HEX >= 0x02070000
        if (unlikely(iternext == &_PyObject_NextNotImplemented))
            return NULL;
        #endif
#else
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
#endif
    } else if (CYTHON_USE_TYPE_SLOTS || unlikely(!PyIter_Check(iterator))) {
        __Pyx_PyIter_Next_ErrorNoIterator(iterator);
        return NULL;
    }
#if !CYTHON_USE_TYPE_SLOTS
    else {
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
    }
#endif
    return __Pyx_PyIter_Next2Default(defval);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* GetItemIntUnicode */
static CYTHON_INLINE Py_UCS4 __Pyx_GetItemInt_Unicode_Fast(PyObject* ustring, Py_ssize_t i,
                                                           int wraparound, int boundscheck) {
    Py_ssize_t length;
    if (unlikely(__Pyx_PyUnicode_READY(ustring) < 0)) return (Py_UCS4)-1;
    if (wraparound | boundscheck) {
        length = __Pyx_PyUnicode_GET_LENGTH(ustring);
        if (wraparound & unlikely(i < 0)) i += length;
        if ((!boundscheck) || likely(__Pyx_is_valid_index(i, length))) {
            return __Pyx_PyUnicode_READ_CHAR(ustring, i);
        } else {
            PyErr_SetString(PyExc_IndexError, "string index out of range");
            return (Py_UCS4)-1;
        }
    } else {
        return __Pyx_PyUnicode_READ_CHAR(ustring, i);
    }
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* PyObjectFormat */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {
    int ret;
    _PyUnicodeWriter writer;
    if (likely(PyFloat_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyFloat_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else if (likely(PyLong_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyLong_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else {
        return PyObject_Format(obj, format_spec);
    }
    if (unlikely(ret == -1)) {
        _PyUnicodeWriter_Dealloc(&writer);
        return NULL;
    }
    return _PyUnicodeWriter_Finish(&writer);
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if ((0)) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* BytesContains */
static CYTHON_INLINE int __Pyx_BytesContains(PyObject* bytes, char character) {
    const Py_ssize_t length = PyBytes_GET_SIZE(bytes);
    char* char_start = PyBytes_AS_STRING(bytes);
    return memchr(char_start, (unsigned char)character, (size_t)length) != NULL;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned char neg_one = (unsigned char) -1, const_zero = (unsigned char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned char, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) >= 2 * PyLong_SHIFT) {
                            return (unsigned char) (((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) >= 3 * PyLong_SHIFT) {
                            return (unsigned char) (((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) >= 4 * PyLong_SHIFT) {
                            return (unsigned char) (((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned char) (((unsigned char)-1)*(((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned char) ((((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned char) (((unsigned char)-1)*(((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned char) ((((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned char) (((unsigned char)-1)*(((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned char) ((((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned char) -1;
        }
    } else {
        unsigned char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned char) -1;
        val = __Pyx_PyInt_As_unsigned_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned char");
    return (unsigned char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned char");
    return (unsigned char) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned char neg_one = (unsigned char) -1, const_zero = (unsigned char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned char),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
